/*! For license information please see main.a578b67d966131d3ecc1.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_v2("main",{"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var i=s("./node_modules/ogl/src/core/Renderer.js"),a=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),h=s("./app/components/Canvas/Detail/index.js");class o{constructor({template:e}){this.template=e,this.y={start:0,end:0},this.createRenderer(),this.createScene(),this.createCamera(),this.onResize()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0,dpr:3}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new a.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createDetail(){this.detail=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(e){this.detail&&this.detail.hide()}onChangeEnd(e){"detail"===e?this.createDetail():this.detail&&this.destroyDetail(),this.template=e}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:this.gl.canvas.width/this.gl.canvas.height});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s};const i={sizes:this.sizes};this.detail&&this.detail.onResize(i)}onTouchDown(e){this.isDown=!0,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={y:this.y};this.detail&&this.detail.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientY:e.clientY;this.y.end=t;const s={y:this.y};this.detail&&this.detail.onTouchMove(s)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.y.end=t;const s={y:this.y};this.detail&&this.detail.onTouchUp(s)}onWheel(e){this.detail&&this.detail.onWheel(e)}update(e){this.detail&&this.detail.update(e),this.renderer.render({camera:this.camera,scene:this.scene})}}}},(function(e){e.h=()=>"9631f23274a8942059dd"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQ1B6QixLQUFLeUIsT0FBTzZCLFVBQVVQLEVBRTFCLENBRUFTLFFBQVFDLEdBQ0h6RCxLQUFLeUIsUUFDTnpCLEtBQUt5QixPQUFPK0IsUUFBUUMsRUFFeEIsQ0FFQUMsT0FBT0MsR0FDRDNELEtBQUt5QixRQUNQekIsS0FBS3lCLE9BQU9pQyxPQUFPQyxHQUdyQjNELEtBQUtRLFNBQVNvRCxPQUFPLENBQ25CMUMsT0FBUWxCLEtBQUtrQixPQUNiSSxNQUFPdEIsS0FBS3NCLE9BRWhCLGtCQ3ZLRnVDLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW9fdjIvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9ydGZvbGlvX3YyL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tICdvZ2wnO1xuXG5pbXBvcnQgRGV0YWlsIGZyb20gJy4vRGV0YWlsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlIH0pIHtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGVcblxuICAgIHRoaXMueSA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiAwXG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpXG4gICAgdGhpcy5jcmVhdGVTY2VuZSgpXG4gICAgdGhpcy5jcmVhdGVDYW1lcmEoKVxuXG4gICAgdGhpcy5vblJlc2l6ZSgpXG4gIH1cblxuICBjcmVhdGVSZW5kZXJlcigpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHtcbiAgICAgIGFscGhhOiB0cnVlLFxuICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgZHByOiAzXG4gICAgfSk7XG5cbiAgICB0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbDtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5nbC5jYW52YXMpO1xuICB9XG5cbiAgY3JlYXRlQ2FtZXJhKCkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLmdsKTtcblxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1O1xuICB9XG5cbiAgY3JlYXRlU2NlbmUoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUcmFuc2Zvcm0oKVxuICB9XG5cblxuICAvKipcbiAgICogREVUQUlMXG4gICAqL1xuICAgY3JlYXRlRGV0YWlsKCkge1xuICAgIHRoaXMuZGV0YWlsID0gbmV3IERldGFpbCh7XG4gICAgICBnbDogdGhpcy5nbCxcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcbiAgICB9KVxuICB9XG5cbiAgZGVzdHJveURldGFpbCgpe1xuICAgIGlmICghdGhpcy5kZXRhaWwpIHJldHVyblxuICAgIHRoaXMuZGV0YWlsLmRlc3Ryb3koKVxuICAgIHRoaXMuZGV0YWlsID0gbnVsbFxuICB9XG5cblxuICBvblByZWxvYWRlZCgpe1xuICAgIHRoaXMub25DaGFuZ2VFbmQodGhpcy50ZW1wbGF0ZSlcbiAgfVxuXG4gIG9uQ2hhbmdlU3RhcnQodXJsKXtcbiAgICBpZih0aGlzLmRldGFpbCl7XG4gICAgICB0aGlzLmRldGFpbC5oaWRlKClcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZUVuZCh0ZW1wbGF0ZSl7XG4gICAgaWYgKHRlbXBsYXRlID09PSAnZGV0YWlsJykge1xuICAgICAgdGhpcy5jcmVhdGVEZXRhaWwoKVxuICAgIH0gZWxzZSBpZiAodGhpcy5kZXRhaWwpe1xuICAgICAgdGhpcy5kZXN0cm95RGV0YWlsKClcbiAgICB9XG5cbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGVcbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblxuICAgIHRoaXMuY2FtZXJhLnBlcnNwZWN0aXZlKHtcbiAgICAgIGFzcGVjdDogdGhpcy5nbC5jYW52YXMud2lkdGggLyB0aGlzLmdsLmNhbnZhcy5oZWlnaHRcbiAgICB9KTtcblxuICAgIGNvbnN0IGZvdiA9IHRoaXMuY2FtZXJhLmZvdiAqIChNYXRoLlBJIC8gMTgwKVxuICAgIGNvbnN0IGhlaWdodCA9IDIgKiBNYXRoLnRhbihmb3YgLyAyKSAqIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnpcbiAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdFxuXG4gICAgdGhpcy5zaXplcyA9IHtcbiAgICAgIGhlaWdodCxcbiAgICAgIHdpZHRoXG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcbiAgICB9XG5cbiAgICBpZih0aGlzLmRldGFpbCl7XG4gICAgICB0aGlzLmRldGFpbC5vblJlc2l6ZSh2YWx1ZXMpXG4gICAgfVxuICB9XG5cbiAgb25Ub3VjaERvd24oZSkge1xuICAgIHRoaXMuaXNEb3duID0gdHJ1ZTtcblxuICAgIHRoaXMueS5zdGFydCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5jbGllbnRZIDogZS5jbGllbnRZO1xuXG4gICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgeTogdGhpcy55LFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLm9uVG91Y2hEb3duKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICghdGhpcy5pc0Rvd24pIHJldHVybjtcblxuICAgIGNvbnN0IHkgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcblxuICAgIHRoaXMueS5lbmQgPSB5O1xuXG4gICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgeTogdGhpcy55LFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLm9uVG91Y2hNb3ZlKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgb25Ub3VjaFVwKGUpIHtcbiAgICB0aGlzLmlzRG93biA9IGZhbHNlO1xuXG4gICAgY29uc3QgeSA9IGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG5cbiAgICB0aGlzLnkuZW5kID0geTtcblxuICAgIGNvbnN0IHZhbHVlcyA9IHtcbiAgICAgIHk6IHRoaXMueSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuZGV0YWlsKSB7XG4gICAgICB0aGlzLmRldGFpbC5vblRvdWNoVXAodmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICBvbldoZWVsKGV2ZW50KXtcbiAgICBpZih0aGlzLmRldGFpbCl7XG4gICAgICB0aGlzLmRldGFpbC5vbldoZWVsKGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShzY3JvbGwpIHtcbiAgICBpZiAodGhpcy5kZXRhaWwpIHtcbiAgICAgIHRoaXMuZGV0YWlsLnVwZGF0ZShzY3JvbGwpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHtcbiAgICAgIGNhbWVyYTogdGhpcy5jYW1lcmEsXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICB9KTtcbiAgfVxufVxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiOTYzMWYyMzI3NGE4OTQyMDU5ZGRcIikiXSwibmFtZXMiOlsiQ2FudmFzIiwiY29uc3RydWN0b3IiLCJ0ZW1wbGF0ZSIsInRoaXMiLCJ5Iiwic3RhcnQiLCJlbmQiLCJjcmVhdGVSZW5kZXJlciIsImNyZWF0ZVNjZW5lIiwiY3JlYXRlQ2FtZXJhIiwib25SZXNpemUiLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwiYWxwaGEiLCJhbnRpYWxpYXMiLCJkcHIiLCJnbCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2FudmFzIiwiY2FtZXJhIiwiQ2FtZXJhIiwicG9zaXRpb24iLCJ6Iiwic2NlbmUiLCJUcmFuc2Zvcm0iLCJjcmVhdGVEZXRhaWwiLCJkZXRhaWwiLCJEZXRhaWwiLCJzaXplcyIsImRlc3Ryb3lEZXRhaWwiLCJkZXN0cm95Iiwib25QcmVsb2FkZWQiLCJvbkNoYW5nZUVuZCIsIm9uQ2hhbmdlU3RhcnQiLCJ1cmwiLCJoaWRlIiwic2V0U2l6ZSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBlcnNwZWN0aXZlIiwiYXNwZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJmb3YiLCJNYXRoIiwiUEkiLCJ0YW4iLCJ2YWx1ZXMiLCJvblRvdWNoRG93biIsImUiLCJpc0Rvd24iLCJ0b3VjaGVzIiwiY2xpZW50WSIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFVwIiwiY2hhbmdlZFRvdWNoZXMiLCJvbldoZWVsIiwiZXZlbnQiLCJ1cGRhdGUiLCJzY3JvbGwiLCJyZW5kZXIiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=