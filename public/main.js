/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r={"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=e=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/events/events.js"),s=r.n(n),o=r("./node_modules/lodash/each.js"),a=r.n(o);class i extends(s()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Detection.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=new class{isDesktop(){return/(Windows NT|Macintosh)/i.test(navigator.userAgent)}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./node_modules/lodash/each.js"),o=r.n(s),a=r("./node_modules/lodash/map.js"),i=r.n(a),l=r("./app/classes/AsyncLoad.js"),u=r("./app/classes/Detection.js");class c{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,preloaders:"[data-src]"},this.id=r,this.alert=document.querySelector(".alert")}create(){this.element=document.querySelector(this.selector),this.elements={},u.default.isDesktop()||(window.pageYOffset=0,document.documentElement.scrollTop=0,document.body.scrollTop=0),this.scroll={current:0,target:0,last:0,limit:0},this.y={start:0,end:0},o()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),!u.default.isDesktop()&&this.createPreloader()}createPreloader(){this.preloaders=i()(this.elements.preloaders,(e=>new l.default({element:e})))}show(){return new Promise((e=>{(0,n.default)({targets:this.element,opacity:[0,1],easing:"linear",duration:400,complete:()=>{this.addEventListeners(),e()}})}))}hide(){return new Promise((e=>{(0,n.default)({targets:this.element,opacity:0,easing:"linear",duration:400,complete:()=>{e()}})}))}onResize(){this.scroll.last=this.scroll.target=0,this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight/1.5),u.default.isDesktop()||(window.innerHeight<window.innerWidth?this.alert.style.opacity=1:this.alert.style.opacity=0)}onTouchDown(e){this.isDown=!0,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.scroll.last=this.scroll.current}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientY:e.clientY;this.y.end=t;const r=this.y.start-this.y.end;this.scroll.target=this.scroll.last+r}onTouchUp(e){this.isDown=!1}onWheel({pixelY:e}){this.scroll.target+=e}update(){if(this.scroll.target=Math.min(Math.max(this.scroll.target,0),this.scroll.limit),this.scroll.current=this.scroll.current+.1*(this.scroll.target-this.scroll.current),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&u.default.isDesktop()){this.elements.wrapper.style.transform=`translate3d(0, -${this.scroll.current}px, 0)`;const e=this.element.querySelectorAll(".item"),t=window.innerHeight/2;o()(e,(e=>{const r=e.getBoundingClientRect();r.top<t&&r.bottom>t?e.classList.add("item_on_middle"):e.classList.remove("item_on_middle")}))}}addEventListeners(){}removeEventListeners(){}}},"./app/components/Canvas/Detail/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Program.js"),s=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./node_modules/animejs/lib/anime.es.js"),a=r("./app/shaders/plane-fragment.glsl"),i=r("./app/shaders/plane-vertex.glsl");class l{constructor({element:e,geometry:t,gl:r,index:n,scene:s,sizes:o}){this.element=e,this.gl=r,this.geometry=t,this.scene=s,this.index=n,this.sizes=o,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector(".detail__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:a,vertex:i,uniforms:{threshold:{value:-.1},tMap:{value:this.texture}}})}createMesh(){this.mesh=new s.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){(0,o.default)({targets:this.program.uniforms.threshold,value:1,duration:1100,easing:"easeOutQuint",delay:400})}hide(){(0,o.default)({targets:this.program.uniforms.threshold,value:-.1,easing:"easeOutQuint",duration:800})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left-e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top-e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.updateScale(),this.updateX(),this.updateY(e)}}},"./app/components/Canvas/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/extras/Plane.js"),o=r("./node_modules/lodash/map.js"),a=r.n(o),i=r("./app/components/Canvas/Detail/Media.js");const l=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.scene=t,this.sizes=r,this.group=new n.Transform,this.galleryWrapperElement=document.querySelector(".detail__gallery__wrapper"),this.scroll={current:0,start:0,target:0,lerp:.1},this.createGeometry(),this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new s.Plane(this.gl)}createMedias(){this.mediasElements=document.querySelectorAll(".detail__media"),this.medias=a()(this.mediasElements,((e,t)=>new i.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){a()(this.medias,(e=>e.show()))}hide(){a()(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,a()(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.height-this.medias[0].element.clientHeight}onTouchDown(){this.scroll.last=this.scroll.current}onTouchMove({y:e}){const t=e.start-e.end;this.scroll.target=this.scroll.last+t}onTouchUp(){}onWheel({pixelY:e}){this.scroll.target+=e}update(){this.scroll.target=Math.min(Math.max(this.scroll.target,0),this.scroll.limit),this.scroll.current=this.scroll.current+.1*(this.scroll.target-this.scroll.current),this.scroll.current<.01&&(this.scroll.current=0),a()(this.medias,(e=>e.update(this.scroll.current)))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./app/components/Canvas/Detail/index.js");class i{constructor({template:e}){this.template=e,this.y={start:0,end:0},this.positions={posX:0,posY:0},this.createRenderer(),this.createScene(),this.createCamera(),this.onResize()}createRenderer(){this.renderer=new n.Renderer({alpha:!0,antialias:!0,dpr:1.5}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new o.Transform}createDetail(){this.detail=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(e){this.detail&&this.detail.hide()}onChangeEnd(e){"detail"===e?this.createDetail():this.detail&&this.destroyDetail(),this.template=e}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r};const n={sizes:this.sizes};this.detail&&this.detail.onResize(n)}onTouchDown(e){this.isDown=!0,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.detail&&this.detail.onTouchDown()}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientY:e.clientY;this.y.end=t;const r={y:this.y};this.detail&&this.detail.onTouchMove(r)}onTouchUp(e){this.isDown=!1}onWheel(e){this.detail&&this.detail.onWheel(e)}update(e){this.detail&&this.detail.update(e),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./app/classes/Component.js");class o extends s.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"home"===e?((0,n.default)({targets:this.elements.items[1],opacity:0,pointerEvents:"none",translateY:"-100%",easing:"linear",duration:500}),n.default.set(this.elements.items[0],{translateY:"0%",pointerEvents:"auto"}),(0,n.default)({targets:this.elements.items[0],opacity:1,delay:750,easing:"linear",duration:500})):((0,n.default)({targets:this.elements.items[0],opacity:0,translateY:"-100%",pointerEvents:"none",easing:"linear",duration:500}),n.default.set(this.elements.items[1],{translateY:"0%",pointerEvents:"auto"}),(0,n.default)({targets:this.elements.items[1],opacity:1,delay:750,easing:"linear",duration:500}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./node_modules/lodash/each.js"),o=r.n(s),a=r("./app/utils/text.js"),i=r("./node_modules/ogl/src/core/Texture.js"),l=r("./app/classes/Component.js");class u extends l.default{constructor({canvas:e=null}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=e,window.TEXTURES={},this.page=document.querySelector(".preloader");const t=this.page.querySelector(".preloader__text");(0,a.split)({element:t}),(0,a.split)({element:t}),this.titleSpan=this.page.querySelector("span span"),this.length=0,this.createLoader()}createLoader(){this.canvas?o()(window.ASSETS,(e=>{const t=new i.Texture(this.canvas.gl,{generateMipMaps:!1}),r=new window.Image;r.crossOrigin="anonymous",r.src=e,r.onload=e=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t})):o()(window.ASSETS,(e=>{const t=new window.Image;t.crossOrigin="anonymous",t.src=e,t.onload=e=>{this.onAssetLoaded()}}))}onAssetLoaded(){this.length++;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animationOut=n.default.timeline({begin:()=>{this.emit("completed")},complete:()=>{this.destroy()}}),this.animationOut.add({targets:this.titleSpan,translateY:"-110%",easing:"linear",duration:300},1e3),this.animationOut.add({targets:this.elements.numberText,translateY:"110%",easing:"linear",duration:300},1e3),this.animationOut.add({targets:this.element,opacity:0,easing:"linear",duration:500},"+=500")}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/normalize-wheel/index.js"),s=r.n(n),o=r("./node_modules/lodash/each.js"),a=r.n(o),i=r("./app/classes/Detection.js"),l=r("./app/components/Canvas/index.js"),u=r("./app/components/Preloader.js"),c=r("./app/components/Navigation.js"),d=r("./app/pages/Home/index.js"),h=r("./app/pages/Detail/index.js"),p=r("./app/pages/About/index.js");new class{constructor(){this.createContent(),i.default.isDesktop()&&this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createCanvas(){this.canvas=new l.default({template:this.template})}createPreloader(){this.preloader=new u.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createNavigation(){this.navigation=new c.default({template:this.template})}createPages(){this.pages={home:new d.default,detail:new h.default,about:new p.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas&&this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas&&this.canvas.onChangeStart(this.template,e),await this.page.hide();const r=await window.fetch(e);if(200===r.status){const n=await r.text(),s=document.createElement("div");t&&window.history.pushState({},"",e),s.innerHTML=n;const o=s.querySelector(".content");this.template=o.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=o.innerHTML,this.canvas&&this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),await this.page.show(),this.addLinkListeners()}else console.error(`response status: ${r.status}`)}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((e=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e),this.page&&this.page.onTouchDown&&this.page.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e),this.page&&this.page.onTouchDown&&this.page.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e),this.page&&this.page.onTouchDown&&this.page.onTouchUp(e)}onWheel(e){const t=s()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");a()(e,(e=>{-1===e.href.indexOf(window.location.origin)||(e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange({url:r})})}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o),i=r("./app/classes/Page.js"),l=r("./app/classes/Detection.js");class u extends i.default{constructor(){super({id:"about",element:".about"})}async show(){super.show(),l.default.isDesktop()&&this.textAnimation()}textAnimation(){this.page=document.querySelector(".about"),this.links=this.page.querySelectorAll("a"),this.texts=this.page.querySelectorAll("h1, h2, p"),a()(this.texts,(e=>{(0,s.split)({element:e,expression:"<br>"}),(0,s.split)({element:e,expression:"<br>"})})),this.spans=this.page.querySelectorAll("span span"),(0,n.default)({targets:this.spans,translateY:["105%","0%"],easing:"easeOutQuint",duration:600,delay:n.default.stagger(50,{start:700})}),(0,n.default)({targets:this.links,opacity:[0,1],duration:600,easing:"linear",delay:1e3})}}},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o),i=r("./app/classes/Page.js"),l=r("./app/classes/Detection.js");class u extends i.default{constructor(){super({id:"detail",element:".detail"})}async show(){super.show(),l.default.isDesktop()&&this.textAnimation()}textAnimation(){this.page=document.querySelector(".detail"),this.texts=this.page.querySelectorAll("h1, h2, p"),a()(this.texts,(e=>{(0,s.split)({element:e,expression:"<br>"}),(0,s.split)({element:e,expression:"<br>"})})),this.spans=this.page.querySelectorAll("span span"),(0,n.default)({targets:this.spans,translateY:["110%","0%"],easing:"easeOutQuint",duration:600,delay:n.default.stagger(50,{start:700})})}}},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/animejs/lib/anime.es.js"),s=r("./app/classes/Page.js"),o=r("./app/classes/Detection.js");class a extends s.default{constructor(){super({id:"home",element:".home",elements:{wrapper:".home__list"}})}textShow(){this.page=document.querySelector(".home"),this.texts=this.page.querySelectorAll(".item__wrapper"),(0,n.default)({targets:this.texts,opacity:[0,1],translateY:["15%","0%"],easing:"easeOutQuint",duration:600,delay:n.default.stagger(50,{start:700})})}async show(){super.show(),o.default.isDesktop()&&this.textShow()}}},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{calculate:()=>a,split:()=>o});var n=r("./node_modules/lodash/each.js"),s=r.n(n);function o({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s()(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let o=!1,a="";const i=[];s()(n,(e=>{o||!e.includes("<a")&&!e.includes("<strong")||(a="",o=!0),o&&(a+=` ${e}`),o&&(e.includes("/a>")||e.includes("/strong>"))&&(i.push(a),a=""),o||""!==a||i.push(e),o&&(e.includes("/a>")||e.includes("/strong>"))&&(o=!1)})),n=i})),n}(e.innerHTML.toString().trim(),t);let o="";s()(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s()(t,((e,t)=>{o+=t>0?"<br>"+i(e):i(e)}))}else o+=i(e)})),e.innerHTML=o;const a=e.querySelectorAll("span");return r&&s()(a,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),n="&"!==e.textContent,s="-"!==e.textContent;t&&r&&n&&s&&(e.innerHTML=`${e.textContent}&nbsp;`)})),a}function a(e){if(!e.length)return;const t=[];let r=[],n=e[0].offsetTop;return s()(e,((s,o)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),o+1===e.length&&t.push(r)})),t}function i(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/animejs/lib/anime.es.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>ie});var n={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},s={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},o=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],a={CSS:{},springs:{}};function i(e,t,r){return Math.min(Math.max(e,t),r)}function l(e,t){return e.indexOf(t)>-1}function u(e,t){return e.apply(null,t)}var c={arr:function(e){return Array.isArray(e)},obj:function(e){return l(Object.prototype.toString.call(e),"Object")},pth:function(e){return c.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||c.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return c.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return c.hex(e)||c.rgb(e)||c.hsl(e)},key:function(e){return!n.hasOwnProperty(e)&&!s.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function d(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function h(e,t){var r=d(e),n=i(c.und(r[0])?1:r[0],.1,100),s=i(c.und(r[1])?100:r[1],.1,100),o=i(c.und(r[2])?10:r[2],.1,100),l=i(c.und(r[3])?0:r[3],.1,100),u=Math.sqrt(s/n),h=o/(2*Math.sqrt(s*n)),p=h<1?u*Math.sqrt(1-h*h):0,f=1,m=h<1?(h*u-l)/p:-l+u;function g(e){var r=t?t*e/1e3:e;return r=h<1?Math.exp(-r*h*u)*(f*Math.cos(p*r)+m*Math.sin(p*r)):(f+m*r)*Math.exp(-r*u),0===e||1===e?e:1-r}return t?g:function(){var t=a.springs[e];if(t)return t;for(var r=1/6,n=0,s=0;;)if(1===g(n+=r)){if(++s>=16)break}else s=0;var o=n*r*1e3;return a.springs[e]=o,o}}function p(e){return void 0===e&&(e=10),function(t){return Math.ceil(i(t,1e-6,1)*e)*(1/e)}}var f,m,g=function(){var e=.1;function t(e,t){return 1-3*t+3*e}function r(e,t){return 3*t-6*e}function n(e){return 3*e}function s(e,s,o){return((t(s,o)*e+r(s,o))*e+n(s))*e}function o(e,s,o){return 3*t(s,o)*e*e+2*r(s,o)*e+n(s)}return function(t,r,n,a){if(0<=t&&t<=1&&0<=n&&n<=1){var i=new Float32Array(11);if(t!==r||n!==a)for(var l=0;l<11;++l)i[l]=s(l*e,t,n);return function(e){return t===r&&n===a||0===e||1===e?e:s(u(e),r,a)}}function u(r){for(var a=0,l=1;10!==l&&i[l]<=r;++l)a+=e;--l;var u=a+(r-i[l])/(i[l+1]-i[l])*e,c=o(u,t,n);return c>=.001?function(e,t,r,n){for(var a=0;a<4;++a){var i=o(t,r,n);if(0===i)return t;t-=(s(t,r,n)-e)/i}return t}(r,u,t,n):0===c?u:function(e,t,r,n,o){var a,i,l=0;do{(a=s(i=t+(r-t)/2,n,o)-e)>0?r=i:t=i}while(Math.abs(a)>1e-7&&++l<10);return i}(r,a,a+e,t,n)}}}(),v=(f={linear:function(){return function(e){return e}}},m={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,r=4;e<((t=Math.pow(2,--r))-1)/11;);return 1/Math.pow(4,3-r)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var r=i(e,1,10),n=i(t,.1,2);return function(e){return 0===e||1===e?e:-r*Math.pow(2,10*(e-1))*Math.sin((e-1-n/(2*Math.PI)*Math.asin(1/r))*(2*Math.PI)/n)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){m[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(m).forEach((function(e){var t=m[e];f["easeIn"+e]=t,f["easeOut"+e]=function(e,r){return function(n){return 1-t(e,r)(1-n)}},f["easeInOut"+e]=function(e,r){return function(n){return n<.5?t(e,r)(2*n)/2:1-t(e,r)(-2*n+2)/2}},f["easeOutIn"+e]=function(e,r){return function(n){return n<.5?(1-t(e,r)(1-2*n))/2:(t(e,r)(2*n-1)+1)/2}}})),f);function b(e,t){if(c.fnc(e))return e;var r=e.split("(")[0],n=v[r],s=d(e);switch(r){case"spring":return h(e,t);case"cubicBezier":return u(g,s);case"steps":return u(p,s);default:return u(n,s)}}function y(e){try{return document.querySelectorAll(e)}catch(e){return}}function _(e,t){for(var r=e.length,n=arguments.length>=2?arguments[1]:void 0,s=[],o=0;o<r;o++)if(o in e){var a=e[o];t.call(n,a,o,e)&&s.push(a)}return s}function w(e){return e.reduce((function(e,t){return e.concat(c.arr(t)?w(t):t)}),[])}function x(e){return c.arr(e)?e:(c.str(e)&&(e=y(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function j(e,t){return e.some((function(e){return e===t}))}function E(e){var t={};for(var r in e)t[r]=e[r];return t}function A(e,t){var r=E(e);for(var n in e)r[n]=t.hasOwnProperty(n)?t[n]:e[n];return r}function S(e,t){var r=E(e);for(var n in t)r[n]=c.und(e[n])?t[n]:e[n];return r}function M(e){return c.rgb(e)?(r=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+r[1]+",1)":t:c.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,r,n){return t+t+r+r+n+n})),r=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(r[1],16)+","+parseInt(r[2],16)+","+parseInt(r[3],16)+",1)"}(e):c.hsl(e)?function(e){var t,r,n,s=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),o=parseInt(s[1],10)/360,a=parseInt(s[2],10)/100,i=parseInt(s[3],10)/100,l=s[4]||1;function u(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}if(0==a)t=r=n=i;else{var c=i<.5?i*(1+a):i+a-i*a,d=2*i-c;t=u(d,c,o+1/3),r=u(d,c,o),n=u(d,c,o-1/3)}return"rgba("+255*t+","+255*r+","+255*n+","+l+")"}(e):void 0;var t,r}function q(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function k(e,t){return c.fnc(e)?e(t.target,t.id,t.total):e}function O(e,t){return e.getAttribute(t)}function T(e,t,r){if(j([r,"deg","rad","turn"],q(t)))return t;var n=a.CSS[t+r];if(!c.und(n))return n;var s=document.createElement(e.tagName),o=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;o.appendChild(s),s.style.position="absolute",s.style.width=100+r;var i=100/s.offsetWidth;o.removeChild(s);var l=i*parseFloat(t);return a.CSS[t+r]=l,l}function D(e,t,r){if(t in e.style){var n=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),s=e.style[t]||getComputedStyle(e).getPropertyValue(n)||"0";return r?T(e,s,r):s}}function L(e,t){return c.dom(e)&&!c.inp(e)&&(!c.nil(O(e,t))||c.svg(e)&&e[t])?"attribute":c.dom(e)&&j(o,t)?"transform":c.dom(e)&&"transform"!==t&&D(e,t)?"css":null!=e[t]?"object":void 0}function C(e){if(c.dom(e)){for(var t,r=e.style.transform||"",n=/(\w+)\(([^)]*)\)/g,s=new Map;t=n.exec(r);)s.set(t[1],t[2]);return s}}function R(e,t,r,n){var s=l(t,"scale")?1:0+function(e){return l(e,"translate")||"perspective"===e?"px":l(e,"rotate")||l(e,"skew")?"deg":void 0}(t),o=C(e).get(t)||s;return r&&(r.transforms.list.set(t,o),r.transforms.last=t),n?T(e,o,n):o}function P(e,t,r,n){switch(L(e,t)){case"transform":return R(e,t,n,r);case"css":return D(e,t,r);case"attribute":return O(e,t);default:return e[t]||0}}function F(e,t){var r=/^(\*=|\+=|-=)/.exec(e);if(!r)return e;var n=q(e)||0,s=parseFloat(t),o=parseFloat(e.replace(r[0],""));switch(r[0][0]){case"+":return s+o+n;case"-":return s-o+n;case"*":return s*o+n}}function I(e,t){if(c.col(e))return M(e);if(/\s/g.test(e))return e;var r=q(e),n=r?e.substr(0,e.length-r.length):e;return t?n+t:n}function N(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function U(e){for(var t,r=e.points,n=0,s=0;s<r.numberOfItems;s++){var o=r.getItem(s);s>0&&(n+=N(t,o)),t=o}return n}function B(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*O(e,"r")}(e);case"rect":return function(e){return 2*O(e,"width")+2*O(e,"height")}(e);case"line":return function(e){return N({x:O(e,"x1"),y:O(e,"y1")},{x:O(e,"x2"),y:O(e,"y2")})}(e);case"polyline":return U(e);case"polygon":return function(e){var t=e.points;return U(e)+N(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function z(e,t){var r=t||{},n=r.el||function(e){for(var t=e.parentNode;c.svg(t)&&c.svg(t.parentNode);)t=t.parentNode;return t}(e),s=n.getBoundingClientRect(),o=O(n,"viewBox"),a=s.width,i=s.height,l=r.viewBox||(o?o.split(" "):[0,0,a,i]);return{el:n,viewBox:l,x:l[0]/1,y:l[1]/1,w:a,h:i,vW:l[2],vH:l[3]}}function H(e,t,r){function n(r){void 0===r&&(r=0);var n=t+r>=1?t+r:0;return e.el.getPointAtLength(n)}var s=z(e.el,e.svg),o=n(),a=n(-1),i=n(1),l=r?1:s.w/s.vW,u=r?1:s.h/s.vH;switch(e.property){case"x":return(o.x-s.x)*l;case"y":return(o.y-s.y)*u;case"angle":return 180*Math.atan2(i.y-a.y,i.x-a.x)/Math.PI}}function V(e,t){var r=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,n=I(c.pth(e)?e.totalLength:e,t)+"";return{original:n,numbers:n.match(r)?n.match(r).map(Number):[0],strings:c.str(e)||t?n.split(r):[]}}function G(e){return _(e?w(c.arr(e)?e.map(x):x(e)):[],(function(e,t,r){return r.indexOf(e)===t}))}function Y(e){var t=G(e);return t.map((function(e,r){return{target:e,id:r,total:t.length,transforms:{list:C(e)}}}))}function W(e,t){var r=E(t);if(/^spring/.test(r.easing)&&(r.duration=h(r.easing)),c.arr(e)){var n=e.length;2===n&&!c.obj(e[0])?e={value:e}:c.fnc(t.duration)||(r.duration=t.duration/n)}var s=c.arr(e)?e:[e];return s.map((function(e,r){var n=c.obj(e)&&!c.pth(e)?e:{value:e};return c.und(n.delay)&&(n.delay=r?0:t.delay),c.und(n.endDelay)&&(n.endDelay=r===s.length-1?t.endDelay:0),n})).map((function(e){return S(e,r)}))}function X(e,t){var r=[],n=t.keyframes;for(var s in n&&(t=S(function(e){for(var t=_(w(e.map((function(e){return Object.keys(e)}))),(function(e){return c.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),r={},n=function(n){var s=t[n];r[s]=e.map((function(e){var t={};for(var r in e)c.key(r)?r==s&&(t.value=e[r]):t[r]=e[r];return t}))},s=0;s<t.length;s++)n(s);return r}(n),t)),t)c.key(s)&&r.push({name:s,tweens:W(t[s],e)});return r}function Z(e,t){var r;return e.tweens.map((function(n){var s=function(e,t){var r={};for(var n in e){var s=k(e[n],t);c.arr(s)&&1===(s=s.map((function(e){return k(e,t)}))).length&&(s=s[0]),r[n]=s}return r.duration=parseFloat(r.duration),r.delay=parseFloat(r.delay),r}(n,t),o=s.value,a=c.arr(o)?o[1]:o,i=q(a),l=P(t.target,e.name,i,t),u=r?r.to.original:l,d=c.arr(o)?o[0]:u,h=q(d)||q(l),p=i||h;return c.und(a)&&(a=u),s.from=V(d,p),s.to=V(F(a,d),p),s.start=r?r.end:0,s.end=s.start+s.delay+s.duration+s.endDelay,s.easing=b(s.easing,s.duration),s.isPath=c.pth(o),s.isPathTargetInsideSVG=s.isPath&&c.svg(t.target),s.isColor=c.col(s.from.original),s.isColor&&(s.round=1),r=s,s}))}var $={css:function(e,t,r){return e.style[t]=r},attribute:function(e,t,r){return e.setAttribute(t,r)},object:function(e,t,r){return e[t]=r},transform:function(e,t,r,n,s){if(n.list.set(t,r),t===n.last||s){var o="";n.list.forEach((function(e,t){o+=t+"("+e+") "})),e.style.transform=o}}};function K(e,t){Y(e).forEach((function(e){for(var r in t){var n=k(t[r],e),s=e.target,o=q(n),a=P(s,r,o,e),i=F(I(n,o||q(a)),a),l=L(s,r);$[l](s,r,i,e.transforms,!0)}}))}function Q(e,t){return _(w(e.map((function(e){return t.map((function(t){return function(e,t){var r=L(e.target,t.name);if(r){var n=Z(t,e),s=n[n.length-1];return{type:r,property:t.name,animatable:e,tweens:n,duration:s.end,delay:n[0].delay,endDelay:s.endDelay}}}(e,t)}))}))),(function(e){return!c.und(e)}))}function J(e,t){var r=e.length,n=function(e){return e.timelineOffset?e.timelineOffset:0},s={};return s.duration=r?Math.max.apply(Math,e.map((function(e){return n(e)+e.duration}))):t.duration,s.delay=r?Math.min.apply(Math,e.map((function(e){return n(e)+e.delay}))):t.delay,s.endDelay=r?s.duration-Math.max.apply(Math,e.map((function(e){return n(e)+e.duration-e.endDelay}))):t.endDelay,s}var ee=0;var te=[],re=function(){var e;function t(r){for(var n=te.length,s=0;s<n;){var o=te[s];o.paused?(te.splice(s,1),n--):(o.tick(r),s++)}e=s>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){se.suspendWhenDocumentHidden&&(ne()?e=cancelAnimationFrame(e):(te.forEach((function(e){return e._onDocumentVisibility()})),re()))})),function(){e||ne()&&se.suspendWhenDocumentHidden||!(te.length>0)||(e=requestAnimationFrame(t))}}();function ne(){return!!document&&document.hidden}function se(e){void 0===e&&(e={});var t,r=0,o=0,a=0,l=0,u=null;function c(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var d=function(e){var t=A(n,e),r=A(s,e),o=X(r,e),a=Y(e.targets),i=Q(a,o),l=J(i,r),u=ee;return ee++,S(t,{id:u,children:[],animatables:a,animations:i,duration:l.duration,delay:l.delay,endDelay:l.endDelay})}(e);c(d);function h(){var e=d.direction;"alternate"!==e&&(d.direction="normal"!==e?"normal":"reverse"),d.reversed=!d.reversed,t.forEach((function(e){return e.reversed=d.reversed}))}function p(e){return d.reversed?d.duration-e:e}function f(){r=0,o=p(d.currentTime)*(1/se.speed)}function m(e,t){t&&t.seek(e-t.timelineOffset)}function g(e){for(var t=0,r=d.animations,n=r.length;t<n;){var s=r[t],o=s.animatable,a=s.tweens,l=a.length-1,u=a[l];l&&(u=_(a,(function(t){return e<t.end}))[0]||u);for(var c=i(e-u.start-u.delay,0,u.duration)/u.duration,h=isNaN(c)?1:u.easing(c),p=u.to.strings,f=u.round,m=[],g=u.to.numbers.length,v=void 0,b=0;b<g;b++){var y=void 0,w=u.to.numbers[b],x=u.from.numbers[b]||0;y=u.isPath?H(u.value,h*w,u.isPathTargetInsideSVG):x+h*(w-x),f&&(u.isColor&&b>2||(y=Math.round(y*f)/f)),m.push(y)}var j=p.length;if(j){v=p[0];for(var E=0;E<j;E++){p[E];var A=p[E+1],S=m[E];isNaN(S)||(v+=A?S+A:S+" ")}}else v=m[0];$[s.type](o.target,s.property,v,o.transforms),s.currentValue=v,t++}}function v(e){d[e]&&!d.passThrough&&d[e](d)}function b(e){var n=d.duration,s=d.delay,f=n-d.endDelay,b=p(e);d.progress=i(b/n*100,0,100),d.reversePlayback=b<d.currentTime,t&&function(e){if(d.reversePlayback)for(var r=l;r--;)m(e,t[r]);else for(var n=0;n<l;n++)m(e,t[n])}(b),!d.began&&d.currentTime>0&&(d.began=!0,v("begin")),!d.loopBegan&&d.currentTime>0&&(d.loopBegan=!0,v("loopBegin")),b<=s&&0!==d.currentTime&&g(0),(b>=f&&d.currentTime!==n||!n)&&g(n),b>s&&b<f?(d.changeBegan||(d.changeBegan=!0,d.changeCompleted=!1,v("changeBegin")),v("change"),g(b)):d.changeBegan&&(d.changeCompleted=!0,d.changeBegan=!1,v("changeComplete")),d.currentTime=i(b,0,n),d.began&&v("update"),e>=n&&(o=0,d.remaining&&!0!==d.remaining&&d.remaining--,d.remaining?(r=a,v("loopComplete"),d.loopBegan=!1,"alternate"===d.direction&&h()):(d.paused=!0,d.completed||(d.completed=!0,v("loopComplete"),v("complete"),!d.passThrough&&"Promise"in window&&(u(),c(d)))))}return d.reset=function(){var e=d.direction;d.passThrough=!1,d.currentTime=0,d.progress=0,d.paused=!0,d.began=!1,d.loopBegan=!1,d.changeBegan=!1,d.completed=!1,d.changeCompleted=!1,d.reversePlayback=!1,d.reversed="reverse"===e,d.remaining=d.loop,t=d.children;for(var r=l=t.length;r--;)d.children[r].reset();(d.reversed&&!0!==d.loop||"alternate"===e&&1===d.loop)&&d.remaining++,g(d.reversed?d.duration:0)},d._onDocumentVisibility=f,d.set=function(e,t){return K(e,t),d},d.tick=function(e){a=e,r||(r=a),b((a+(o-r))*se.speed)},d.seek=function(e){b(p(e))},d.pause=function(){d.paused=!0,f()},d.play=function(){d.paused&&(d.completed&&d.reset(),d.paused=!1,te.push(d),f(),re())},d.reverse=function(){h(),d.completed=!d.reversed,f()},d.restart=function(){d.reset(),d.play()},d.remove=function(e){ae(G(e),d)},d.reset(),d.autoplay&&d.play(),d}function oe(e,t){for(var r=t.length;r--;)j(e,t[r].animatable.target)&&t.splice(r,1)}function ae(e,t){var r=t.animations,n=t.children;oe(e,r);for(var s=n.length;s--;){var o=n[s],a=o.animations;oe(e,a),a.length||o.children.length||n.splice(s,1)}r.length||n.length||t.pause()}se.version="3.2.1",se.speed=1,se.suspendWhenDocumentHidden=!0,se.running=te,se.remove=function(e){for(var t=G(e),r=te.length;r--;){ae(t,te[r])}},se.get=P,se.set=K,se.convertPx=T,se.path=function(e,t){var r=c.str(e)?y(e)[0]:e,n=t||100;return function(e){return{property:e,el:r,svg:z(r),totalLength:B(r)*(n/100)}}},se.setDashoffset=function(e){var t=B(e);return e.setAttribute("stroke-dasharray",t),t},se.stagger=function(e,t){void 0===t&&(t={});var r=t.direction||"normal",n=t.easing?b(t.easing):null,s=t.grid,o=t.axis,a=t.from||0,i="first"===a,l="center"===a,u="last"===a,d=c.arr(e),h=d?parseFloat(e[0]):parseFloat(e),p=d?parseFloat(e[1]):0,f=q(d?e[1]:e)||0,m=t.start||0+(d?h:0),g=[],v=0;return function(e,t,c){if(i&&(a=0),l&&(a=(c-1)/2),u&&(a=c-1),!g.length){for(var b=0;b<c;b++){if(s){var y=l?(s[0]-1)/2:a%s[0],_=l?(s[1]-1)/2:Math.floor(a/s[0]),w=y-b%s[0],x=_-Math.floor(b/s[0]),j=Math.sqrt(w*w+x*x);"x"===o&&(j=-w),"y"===o&&(j=-x),g.push(j)}else g.push(Math.abs(a-b));v=Math.max.apply(Math,g)}n&&(g=g.map((function(e){return n(e/v)*v}))),"reverse"===r&&(g=g.map((function(e){return o?e<0?-1*e:-e:Math.abs(v-e)})))}return m+(d?(p-h)/v:h)*(Math.round(100*g[t])/100)+f}},se.timeline=function(e){void 0===e&&(e={});var t=se(e);return t.duration=0,t.add=function(r,n){var o=te.indexOf(t),a=t.children;function i(e){e.passThrough=!0}o>-1&&te.splice(o,1);for(var l=0;l<a.length;l++)i(a[l]);var u=S(r,A(s,e));u.targets=u.targets||e.targets;var d=t.duration;u.autoplay=!1,u.direction=t.direction,u.timelineOffset=c.und(n)?d:F(n,d),i(t),t.seek(u.timelineOffset);var h=se(u);i(h),a.push(h);var p=J(a,e);return t.delay=p.delay,t.endDelay=p.endDelay,t.duration=p.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},se.easing=b,se.penner=v,se.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};const ie=se},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=a;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},o={23:"</i>",24:"</u>",29:"</del>"};function a(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)m/g,(function(e,t){var n=s[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var a=o[t];return a?(r.pop(),a):""})),a=r.length;return a>0&&(n+=Array(a+1).join("</span>")),n}function i(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){o[e]="</span>"})),a.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var s=e.hasOwnProperty(n)?e[n]:null;if(s){if("reset"===n){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var o=r[n];s[0]||(s[0]=o[0]),1!==s.length&&s[1]||(s=[s[0]]).push(o[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=s}else t[n]=r[n]}i(t)},a.reset=function(){i(r)},a.tags={},Object.defineProperty?(Object.defineProperty(a.tags,"open",{get:function(){return s}}),Object.defineProperty(a.tags,"close",{get:function(){return o}})):(a.tags.open=s,a.tags.close=o),a.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function s(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}m(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,r)}(e,s,{once:!0})}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function i(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var s,o,a,u;if(i(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(s=l(e))>0&&a.length>s&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=c.bind(n);return s.listener=r,n.wrapFn=s,s}function h(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):f(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function m(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(o){n.once&&e.removeEventListener(t,s),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,o=this._events;if(void 0!==o)s=s&&void 0===o.error;else if(!s)return!1;if(s){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var i=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw i.context=a,i}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var u=l.length,c=f(l,u);for(r=0;r<u;++r)n(c[r],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return i(t),this.on(e,d(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return i(t),this.prependListener(e,d(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,s,o,a;if(i(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,s=o;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(s=o[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return h(this,e,!0)},o.prototype.rawListeners=function(e){return h(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/named-references.js"),o=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),a=r("./node_modules/html-entities/lib/surrogate-pairs.js"),i=n(n({},s.namedReferences),{all:s.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(c=(o=void 0===t?u:t).mode)?"specialChars":c,n=void 0===(f=o.numeric)?"decimal":f,s=o.level;if(!e)return"";var o,c,d=l[r],h=i[void 0===s?"all":s].characters,p="hexadecimal"===n;if(d.lastIndex=0,o=d.exec(e)){c="";var f=0;do{f!==o.index&&(c+=e.substring(f,o.index));var m=h[s=o[0]];if(!m){var g=s.length>1?a.getCodePoint(s,0):s.charCodeAt(0);m=(p?"&#x"+g.toString(16):"&#"+g)+";"}c+=m,f=o.index+s.length}while(o=d.exec(e));f!==e.length&&(c+=e.substring(f))}else c=e;return c};var c={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:d,attribute:h,body:s.bodyRegExps.xml},html4:{strict:d,attribute:h,body:s.bodyRegExps.html4},html5:{strict:d,attribute:h,body:s.bodyRegExps.html5}},f=n(n({},p),{all:p.html5}),m=String.fromCharCode,g=m(65533),v={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(n=(void 0===t?v:t).level)?"all":n;if(!e)return"";var n=e,s=(e[e.length-1],i[r].entities[e]);if(s)n=s;else if("&"===e[0]&&"#"===e[1]){var l=e[2],u="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));n=u>=1114111?g:u>65535?a.fromCodePoint(u):m(o.numericUnicodeMap[u]||u)}return n},t.decode=function(e,t){var r=void 0===t?c:t,n=r.level,s=void 0===n?"all":n,l=r.scope,u=void 0===l?"xml"===s?"strict":"body":l;if(!e)return"";var d=f[s][u],h=i[s].entities,p="attribute"===u,v="strict"===u;d.lastIndex=0;var b,y=d.exec(e);if(y){b="";var _=0;do{_!==y.index&&(b+=e.substring(_,y.index));var w=y[0],x=w,j=w[w.length-1];if(p&&"="===j)x=w;else if(v&&";"!==j)x=w;else{var E=h[w];if(E)x=E;else if("&"===w[0]&&"#"===w[1]){var A=w[2],S="x"==A||"X"==A?parseInt(w.substr(3),16):parseInt(w.substr(2));x=S>=1114111?g:S>65535?a.fromCodePoint(S):m(o.numericUnicodeMap[S]||S)}}b+=x,_=y.index+w.length}while(y=d.exec(e));_!==e.length&&(b+=e.substring(_))}else b=e;return b}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=n},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var n=r("./node_modules/lodash/_hashClear.js"),s=r("./node_modules/lodash/_hashDelete.js"),o=r("./node_modules/lodash/_hashGet.js"),a=r("./node_modules/lodash/_hashHas.js"),i=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=o,l.prototype.has=a,l.prototype.set=i,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_listCacheClear.js"),s=r("./node_modules/lodash/_listCacheDelete.js"),o=r("./node_modules/lodash/_listCacheGet.js"),a=r("./node_modules/lodash/_listCacheHas.js"),i=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=o,l.prototype.has=a,l.prototype.set=i,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=n},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_mapCacheClear.js"),s=r("./node_modules/lodash/_mapCacheDelete.js"),o=r("./node_modules/lodash/_mapCacheGet.js"),a=r("./node_modules/lodash/_mapCacheHas.js"),i=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=o,l.prototype.has=a,l.prototype.set=i,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=n},"./node_modules/lodash/_Set.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=n},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js"),s=r("./node_modules/lodash/_setCacheAdd.js"),o=r("./node_modules/lodash/_setCacheHas.js");function a(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}a.prototype.add=a.prototype.push=s,a.prototype.has=o,e.exports=a},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_stackClear.js"),o=r("./node_modules/lodash/_stackDelete.js"),a=r("./node_modules/lodash/_stackGet.js"),i=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new n(e);this.size=t.size}u.prototype.clear=s,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Symbol;e.exports=n},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=n},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=n},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=0,o=[];++r<n;){var a=e[r];t(a,r,e)&&(o[s++]=a)}return o}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseTimes.js"),s=r("./node_modules/lodash/isArguments.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/isBuffer.js"),i=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=o(e),c=!r&&s(e),d=!r&&!c&&a(e),h=!r&&!c&&!d&&l(e),p=r||c||d||h,f=p?n(e.length,String):[],m=f.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||d&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||i(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=Array(n);++r<n;)s[r]=t(e[r],r,e);return s}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,n=t.length,s=e.length;++r<n;)e[s+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var n=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseForOwn.js"),s=r("./node_modules/lodash/_createBaseEach.js")(n);e.exports=s},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var n=r("./node_modules/lodash/_createBaseFor.js")();e.exports=n},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseFor.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&n(e,t,s)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,o=(t=n(t,e)).length;null!=e&&r<o;)e=e[s(t[r++])];return r&&r==o?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayPush.js"),s=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var o=t(e);return s(e)?o:n(o,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_getRawTag.js"),o=r("./node_modules/lodash/_objectToString.js"),a=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?s(e):o(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return s(e)&&"[object Arguments]"==n(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqualDeep.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,o,a,i){return t===r||(null==t||null==r||!s(t)&&!s(r)?t!=t&&r!=r:n(t,r,o,a,e,i))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_equalArrays.js"),o=r("./node_modules/lodash/_equalByTag.js"),a=r("./node_modules/lodash/_equalObjects.js"),i=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",h="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,m,g,v){var b=l(e),y=l(t),_=b?h:i(e),w=y?h:i(t),x=(_=_==d?p:_)==p,j=(w=w==d?p:w)==p,E=_==w;if(E&&u(e)){if(!u(t))return!1;b=!0,x=!1}if(E&&!x)return v||(v=new n),b||c(e)?s(e,t,r,m,g,v):o(e,t,_,r,m,g,v);if(!(1&r)){var A=x&&f.call(e,"__wrapped__"),S=j&&f.call(t,"__wrapped__");if(A||S){var M=A?e.value():e,q=S?t.value():t;return v||(v=new n),g(M,q,r,m,v)}}return!!E&&(v||(v=new n),a(e,t,r,m,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,o){var a=r.length,i=a,l=!o;if(null==e)return!i;for(e=Object(e);a--;){var u=r[a];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++a<i;){var c=(u=r[a])[0],d=e[c],h=u[1];if(l&&u[2]){if(void 0===d&&!(c in e))return!1}else{var p=new n;if(o)var f=o(d,h,c,e,t,p);if(!(void 0===f?s(h,d,3,o,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/_isMasked.js"),o=r("./node_modules/lodash/isObject.js"),a=r("./node_modules/lodash/_toSource.js"),i=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,d=u.hasOwnProperty,h=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||s(e))&&(n(e)?h:i).test(a(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isLength.js"),o=r("./node_modules/lodash/isObjectLike.js"),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&s(e.length)&&!!a[n(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseMatches.js"),s=r("./node_modules/lodash/_baseMatchesProperty.js"),o=r("./node_modules/lodash/identity.js"),a=r("./node_modules/lodash/isArray.js"),i=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?a(e)?s(e[0],e[1]):n(e):i(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isPrototype.js"),s=r("./node_modules/lodash/_nativeKeys.js"),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return s(e);var t=[];for(var r in Object(e))o.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseEach.js"),s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,o=s(e)?Array(e.length):[];return n(e,(function(e,n,s){o[++r]=t(e,n,s)})),o}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsMatch.js"),s=r("./node_modules/lodash/_getMatchData.js"),o=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=s(e);return 1==t.length&&t[0][2]?o(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqual.js"),s=r("./node_modules/lodash/get.js"),o=r("./node_modules/lodash/hasIn.js"),a=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return a(e)&&i(t)?l(u(e),t):function(r){var a=s(r,e);return void 0===a&&a===t?o(r,e):n(t,a,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return n(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_arrayMap.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/isSymbol.js"),i=n?n.prototype:void 0,l=i?i.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return s(t,e)+"";if(a(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:n}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_stringToPath.js"),a=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return n(e)?e:s(e,t)?[e]:o(a(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=n},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,s){if(null==r)return r;if(!n(r))return e(r,s);for(var o=r.length,a=t?o:-1,i=Object(r);(t?a--:++a<o)&&!1!==s(i[a],a,i););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,n){for(var s=-1,o=Object(t),a=n(t),i=a.length;i--;){var l=a[e?i:++s];if(!1===r(o[l],l,o))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var n=r("./node_modules/lodash/_SetCache.js"),s=r("./node_modules/lodash/_arraySome.js"),o=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,a,i,l){var u=1&r,c=e.length,d=t.length;if(c!=d&&!(u&&d>c))return!1;var h=l.get(e),p=l.get(t);if(h&&p)return h==t&&p==e;var f=-1,m=!0,g=2&r?new n:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var v=e[f],b=t[f];if(a)var y=u?a(b,v,f,t,e,l):a(v,b,f,e,t,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!s(t,(function(e,t){if(!o(g,t)&&(v===e||i(v,e,r,a,l)))return g.push(t)}))){m=!1;break}}else if(v!==b&&!i(v,b,r,a,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_Uint8Array.js"),o=r("./node_modules/lodash/eq.js"),a=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=n?n.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,n,u,d,h){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new s(e),new s(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=i;case"[object Set]":var f=1&n;if(p||(p=l),e.size!=t.size&&!f)return!1;var m=h.get(e);if(m)return m==t;n|=2,h.set(e,t);var g=a(p(e),p(t),n,u,d,h);return h.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getAllKeys.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,o,a,i){var l=1&r,u=n(e),c=u.length;if(c!=n(t).length&&!l)return!1;for(var d=c;d--;){var h=u[d];if(!(l?h in t:s.call(t,h)))return!1}var p=i.get(e),f=i.get(t);if(p&&f)return p==t&&f==e;var m=!0;i.set(e,t),i.set(t,e);for(var g=l;++d<c;){var v=e[h=u[d]],b=t[h];if(o)var y=l?o(b,v,h,t,e,i):o(v,b,h,e,t,i);if(!(void 0===y?v===b||a(v,b,r,o,i):y)){m=!1;break}g||(g="constructor"==h)}if(m&&!g){var _=e.constructor,w=t.constructor;_==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w||(m=!1)}return i.delete(e),i.delete(t),m}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetAllKeys.js"),s=r("./node_modules/lodash/_getSymbols.js"),o=r("./node_modules/lodash/keys.js");e.exports=function(e){return n(e,o,s)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isStrictComparable.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=s(e),r=t.length;r--;){var o=t[r],a=e[o];t[r]=[o,a,n(a)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsNative.js"),s=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=s(e,t);return n(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=Object.prototype,o=s.hasOwnProperty,a=s.toString,i=n?n.toStringTag:void 0;e.exports=function(e){var t=o.call(e,i),r=e[i];try{e[i]=void 0;var n=!0}catch(e){}var s=a.call(e);return n&&(t?e[i]=r:delete e[i]),s}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayFilter.js"),s=r("./node_modules/lodash/stubArray.js"),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,i=a?function(e){return null==e?[]:(e=Object(e),n(a(e),(function(t){return o.call(e,t)})))}:s;e.exports=i},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_DataView.js"),s=r("./node_modules/lodash/_Map.js"),o=r("./node_modules/lodash/_Promise.js"),a=r("./node_modules/lodash/_Set.js"),i=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",d="[object Promise]",h="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(n),g=u(s),v=u(o),b=u(a),y=u(i),_=l;(n&&_(new n(new ArrayBuffer(1)))!=f||s&&_(new s)!=c||o&&_(o.resolve())!=d||a&&_(new a)!=h||i&&_(new i)!=p)&&(_=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,n=r?u(r):"";if(n)switch(n){case m:return f;case g:return c;case v:return d;case b:return h;case y:return p}return t}),e.exports=_},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/isArguments.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/_isIndex.js"),i=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=n(t,e)).length,d=!1;++u<c;){var h=l(t[u]);if(!(d=null!=e&&r(e,h)))break;e=e[h]}return d||++u!=c?d:!!(c=null==e?0:e.length)&&i(c)&&a(h,c)&&(o(e)||s(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=n?n(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return s.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:s.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/isSymbol.js"),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!s(e))||(a.test(e)||!o.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var n,s=r("./node_modules/lodash/_coreJsData.js"),o=(n=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!o&&o in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var n=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!n(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js"),s=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0)&&(r==t.length-1?t.pop():s.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return n(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,s=n(r,e);return s<0?(++this.size,r.push([e,t])):r[s][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Hash.js"),s=r("./node_modules/lodash/_ListCache.js"),o=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(o||s),string:new n}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=n(this,e),s=r.size;return r.set(e,t),this.size+=r.size==s?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var n=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=n},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=n},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_freeGlobal.js"),s=t&&!t.nodeType&&t,o=s&&e&&!e.nodeType&&e,a=o&&o.exports===s&&n.process,i=function(){try{var e=o&&o.require&&o.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=i},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var n=r("./node_modules/lodash/_freeGlobal.js"),s="object"==typeof self&&self&&self.Object===Object&&self,o=n||s||Function("return this")();e.exports=o},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new n,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_Map.js"),o=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var a=r.__data__;if(!s||a.length<199)return a.push([e,t]),this.size=++r.size,this;r=this.__data__=new o(a)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_memoizeCapped.js"),s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(s,(function(e,r,n,s){t.push(n?s.replace(o,"$1"):r||e)})),t}));e.exports=a},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayEach.js"),s=r("./node_modules/lodash/_baseEach.js"),o=r("./node_modules/lodash/_castFunction.js"),a=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(a(e)?n:s)(e,o(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var s=null==e?void 0:n(e,t);return void 0===s?r:s}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseHasIn.js"),s=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&s(e,t,n)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsArguments.js"),s=r("./node_modules/lodash/isObjectLike.js"),o=Object.prototype,a=o.hasOwnProperty,i=o.propertyIsEnumerable,l=n(function(){return arguments}())?n:function(e){return s(e)&&a.call(e,"callee")&&!i.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&s(e.length)&&!n(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_root.js"),s=r("./node_modules/lodash/stubFalse.js"),o=t&&!t.nodeType&&t,a=o&&e&&!e.nodeType&&e,i=a&&a.exports===o?n.Buffer:void 0,l=(i?i.isBuffer:void 0)||s;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!s(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==n(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsTypedArray.js"),s=r("./node_modules/lodash/_baseUnary.js"),o=r("./node_modules/lodash/_nodeUtil.js"),a=o&&o.isTypedArray,i=a?s(a):n;e.exports=i},"./node_modules/lodash/keys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayLikeKeys.js"),s=r("./node_modules/lodash/_baseKeys.js"),o=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return o(e)?n(e):s(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayMap.js"),s=r("./node_modules/lodash/_baseIteratee.js"),o=r("./node_modules/lodash/_baseMap.js"),a=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(a(e)?n:o)(e,s(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js");function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,s=t?t.apply(this,n):n[0],o=r.cache;if(o.has(s))return o.get(s);var a=e.apply(this,n);return r.cache=o.set(s,a)||o,a};return r.cache=new(s.Cache||n),r}s.Cache=n,e.exports=s},"./node_modules/lodash/property.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseProperty.js"),s=r("./node_modules/lodash/_basePropertyDeep.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return o(e)?n(a(e)):s(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":n(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),s=Object.create(null),o="undefined"==typeof document,a=Array.prototype.forEach;function i(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var s=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);d(s)&&!0!==t.visited&&s&&(l(t,s),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(o)return console.log("no window.document found, will not HMR CSS"),i;var r,a,l,d=function(e){var t=s[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),o=r[r.length-1];o&&(t=o.src)}s[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),s=r&&r[1];return s&&e?e.split(",").map((function(e){var r=new RegExp("".concat(s,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,s),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},a=50,l=0,function(){var e=this,t=arguments;clearTimeout(l),l=setTimeout((function(){return r.apply(e,t)}),a)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,n,s,o,a,i,l,u,c,d,h,p,f,m,g=!1;function v(){if(!g){g=!0;var e=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),b=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(h=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),m=/Mobile/i.exec(e),d=!!/Win64/.exec(e),v){(t=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);a=y?parseFloat(y[1])+4:t,r=v[2]?parseFloat(v[2]):NaN,n=v[3]?parseFloat(v[3]):NaN,(s=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(e),o=v&&v[1]?parseFloat(v[1]):NaN):o=NaN}else t=r=n=o=s=NaN;if(b){if(b[1]){var _=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);i=!_||parseFloat(_[1].replace("_","."))}else i=!1;l=!!b[2],u=!!b[3]}else i=l=u=!1}}var b={ie:function(){return v()||t},ieCompatibilityMode:function(){return v()||a>t},ie64:function(){return b.ie()&&d},firefox:function(){return v()||r},opera:function(){return v()||n},webkit:function(){return v()||s},safari:function(){return b.webkit()},chrome:function(){return v()||o},windows:function(){return v()||l},osx:function(){return v()||i},linux:function(){return v()||u},iphone:function(){return v()||h},mobile:function(){return v()||h||p||c||m},nativeApp:function(){return v()||f},android:function(){return v()||c},ipad:function(){return v()||p}};e.exports=b},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var n,s=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");s.canUseDOM&&(n=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,o=r in document;if(!o){var a=document.createElement("div");a.setAttribute(r,"return;"),o="function"==typeof a[r]}return!o&&n&&"wheel"===e&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var n=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),s=r("./node_modules/normalize-wheel/src/isEventSupported.js");function o(e){var t=0,r=0,n=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1==e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:s}}o.getEventType=function(){return n.firefox()?"DOMMouseScroll":s("wheel")?"wheel":"mousewheel"},e.exports=o},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/webpack-dev-server/client/utils/log.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(s=n.key,o=void 0,"symbol"==typeof(o=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(s,"string"))?o:String(o)),n)}var s,o}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){n.log.error(e)}}var t,r,o;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&s(t.prototype,r),o&&s(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/webpack/hot/log.js"),s=r.n(n),o=r("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),a=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),i=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),c=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js");function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function f(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var m={isUnloading:!1,currentHash:r.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},v=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),b={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1};if("true"===v.hot&&(g.hot=!0,b["Hot Module Replacement"]=!0),"true"===v["live-reload"]&&(g.liveReload=!0,b["Live Reloading"]=!0),"true"===v.progress&&(g.progress=!0,b.Progress=!0),v.overlay){try{g.overlay=JSON.parse(v.overlay)}catch(e){u.log.error("Error parsing overlay options from resource query:",e)}"object"==typeof g.overlay&&(g.overlay=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){f(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({errors:!0,warnings:!0,runtimeErrors:!0},g.overlay)),b.Overlay=!0}function y(e){s().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)}v.logging&&(g.logging=v.logging),void 0!==v.reconnect&&(g.reconnect=Number(v.reconnect)),g.logging&&y(g.logging),(0,u.logEnabledFeatures)(b),self.addEventListener("beforeunload",(function(){m.isUnloading=!0}));var _="undefined"!=typeof window?(0,l.createOverlay)("object"==typeof g.overlay?{trustedTypesPolicyName:g.overlay.trustedTypesPolicyName,catchRuntimeError:g.overlay.runtimeErrors}:{trustedTypesPolicyName:!1,catchRuntimeError:g.overlay}):{send:function(){}},w={hot:function(){"false"!==v.hot&&(g.hot=!0)},liveReload:function(){"false"!==v["live-reload"]&&(g.liveReload=!0)},invalid:function(){u.log.info("App updated. Recompiling..."),g.overlay&&_.send({type:"DISMISS"}),(0,c.default)("Invalid")},hash:function(e){m.previousHash=m.currentHash,m.currentHash=e},logging:y,overlay:function(e){"undefined"!=typeof document&&(g.overlay=e)},reconnect:function(e){"false"!==v.reconnect&&(g.reconnect=e)},progress:function(e){g.progress=e},"progress-update":function(e){g.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),g.overlay&&_.send({type:"DISMISS"}),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),g.overlay&&_.send({type:"DISMISS"}),(0,d.default)(g,m)},"content-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){u.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,n=t.body;return"".concat(r,"\n").concat((0,o.default)(n))}));(0,c.default)("Warnings",r);for(var n=0;n<r.length;n++)u.log.warn(r[n]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings)&&_.send({type:"BUILD_ERROR",level:"warning",messages:e}),t&&t.preventReloading||(0,d.default)(g,m)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,n=t.body;return"".concat(r,"\n").concat((0,o.default)(n))}));(0,c.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors)&&_.send({type:"BUILD_ERROR",level:"error",messages:e})},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),g.overlay&&_.send({type:"DISMISS"}),(0,c.default)("Close")}},x=(0,h.default)(v);(0,i.default)(x,w,g.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(s=n.key,o=void 0,o=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(s,"string"),"symbol"==typeof o?o:String(o)),n)}var s,o}var o=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=o;var a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),i=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[a]=t,this.getChildLogger=r}var t,n,u;return t=e,n=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this[a](o.error,r)}}},{key:"trace",value:function(){this[a](o.trace,["Trace"])}},{key:"clear",value:function(){this[a](o.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.groupEnd,t)}},{key:"profile",value:function(e){this[a](o.profile,[e])}},{key:"profileEnd",value:function(e){this[a](o.profileEnd,[e])}},{key:"time",value:function(e){this[i]=this[i]||new Map,this[i].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[i]&&this[i].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(t);this[a](o.time,[e].concat(r(n)))}},{key:"timeEnd",value:function(e){var t=this[i]&&this[i].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(t);this[i].delete(e),this[a](o.time,[e].concat(r(n)))}},{key:"timeAggregate",value:function(e){var t=this[i]&&this[i].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[i].delete(e),this[l]=this[l]||new Map;var n=this[l].get(e);void 0!==n&&(r[1]+n[1]>1e9?(r[0]+=n[0]+1,r[1]=r[1]-1e9+n[1]):(r[0]+=n[0],r[1]+=n[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[a](o.time,[e].concat(r(t))))}}}],n&&s(t.prototype,n),u&&s(t,u),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function n(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=r("./node_modules/webpack/lib/logging/Logger.js").LogType,a=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},i={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,s=e.debug,l=void 0!==s&&s,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(a),d=i["".concat(r)]||0;return function(e,t,r){var s=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(n(r.slice(1))):["[".concat(e,"]")].concat(n(r)):[]},a=c.some((function(t){return t(e)}));switch(t){case o.debug:if(!a)return;"function"==typeof u.debug?u.debug.apply(u,n(s())):u.log.apply(u,n(s()));break;case o.log:if(!a&&d>i.log)return;u.log.apply(u,n(s()));break;case o.info:if(!a&&d>i.info)return;u.info.apply(u,n(s()));break;case o.warn:if(!a&&d>i.warn)return;u.warn.apply(u,n(s()));break;case o.error:if(!a&&d>i.error)return;u.error.apply(u,n(s()));break;case o.trace:if(!a)return;u.trace();break;case o.groupCollapsed:if(!a&&d>i.log)return;if(!a&&d>i.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,n(s())):u.log.apply(u,n(s()));break}case o.group:if(!a&&d>i.log)return;"function"==typeof u.group?u.group.apply(u,n(s())):u.log.apply(u,n(s()));break;case o.groupEnd:if(!a&&d>i.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case o.time:if(!a&&d>i.log)return;var l=1e3*r[1]+r[2]/1e6,h="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(h):u.log(h);break;case o.profile:"function"==typeof u.profile&&u.profile.apply(u,n(s()));break;case o.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,n(s()));break;case o.clear:if(!a&&d>i.log)return;"function"==typeof u.clear&&u.clear();break;case o.status:if(!a&&d>i.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,n(s())):0!==r.length&&u.info.apply(u,n(s()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}var s=r("./client-src/modules/logger/SyncBailHookFake.js"),o=r("./node_modules/webpack/lib/logging/Logger.js").Logger,a=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),i={level:"info",debug:!1,console},l=a(i);t.getLogger=function(e){return new o((function(r,n){void 0===t.hooks.log.call(e,r,n)&&l(e,r,n)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){n(i,e),l=a(i)},t.hooks={log:new s(["origin","type","args"])}}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var o=r[t]={exports:{}};return e[t](o,o.exports,n),o.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s),n.d(s,{default:function(){return e}});var e=n("./node_modules/webpack/lib/logging/runtime.js")}();var o=t;for(var a in s)o[a]=s[a];s.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOverlay:()=>p,formatProblem:()=>h});var n=r("./node_modules/ansi-html-community/index.js"),s=r.n(n),o=r("./node_modules/html-entities/lib/index.js"),a=r("./node_modules/webpack-dev-server/client/overlay/runtime-error.js"),i=r("./node_modules/webpack-dev-server/client/overlay/state-machine.js"),l=r("./node_modules/webpack-dev-server/client/overlay/styles.js");function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){d(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function h(e,t){var r="warning"===e?"WARNING":"ERROR",n="";if("string"==typeof t)n+=t;else{var s=t.file||"",o=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",a=t.loc;r+="".concat(o||s?" in ".concat(o?"".concat(o).concat(s?" (".concat(s,")"):""):s).concat(a?" ".concat(a):""):""),n+=t.message||""}return Array.isArray(t.stack)&&t.stack.forEach((function(e){"string"==typeof e&&(n+="\r\n".concat(e))})),{header:r,body:n}}s().setColors({reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"});var p=function(e){var t,r,n,u=[];function d(e,t){Object.keys(t).forEach((function(r){e.style[r]=t[r]}))}function p(e,s){if(r)return r.innerHTML="",void e(r);u.push(e),t||function(e){window.trustedTypes&&(n=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(t=document.createElement("iframe")).id="webpack-dev-server-client-overlay",t.src="about:blank",d(t,l.iframeStyle),t.onload=function(){var e=t.contentDocument.createElement("div");r=t.contentDocument.createElement("div"),e.id="webpack-dev-server-client-overlay-div",d(e,l.containerStyle);var n=document.createElement("div");n.innerText="Compiled with problems:",d(n,l.headerStyle);var s=document.createElement("button");d(s,l.dismissButtonStyle),s.innerText="×",s.ariaLabel="Dismiss",s.addEventListener("click",(function(){f.send({type:"DISMISS"})})),e.appendChild(n),e.appendChild(s),e.appendChild(r),t.contentDocument.body.appendChild(e),u.forEach((function(t){t(e)})),u=[],t.onload=null},document.body.appendChild(t)}(s)}var f=(0,i.default)({showOverlay:function(t){var a=t.level;return function(e,t,a){p((function(){t.forEach((function(t){var a=document.createElement("div");d(a,c(c({},"warning"===e?l.msgStyles.warning:l.msgStyles.error),{},{padding:"1rem 1rem 1.5rem 1rem"}));var i=document.createElement("div"),u=h(e,t),p=u.header,f=u.body;i.innerText=p,d(i,l.msgTypeStyle),t.moduleIdentifier&&(d(i,{cursor:"pointer"}),i.setAttribute("data-can-open",!0),i.addEventListener("click",(function(){fetch("/webpack-dev-server/open-editor?fileName=".concat(t.moduleIdentifier))})));var m=s()((0,o.encode)(f)),g=document.createElement("div");d(g,l.msgTextStyle),g.innerHTML=n?n.createHTML(m):m,a.appendChild(i),a.appendChild(g),r.appendChild(a)}))}),a)}(void 0===a?"error":a,t.messages,e.trustedTypesPolicyName)},hideOverlay:function(){t&&(document.body.removeChild(t),t=null,r=null)}});return e.catchRuntimeError&&(0,a.listenToRuntimeError)((function(e){var t=e.error,r=e.message;if(t||r){var n=t instanceof Error?t:new Error(t||r);f.send({type:"RUNTIME_ERROR",messages:[{message:n.message,stack:(0,a.parseErrorToStacks)(n)}]})}})),f}},"./node_modules/webpack-dev-server/client/overlay/fsm.js":(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.r(t),r.d(t,{default:()=>a});const a=function(e,t){var r=e.states,n=e.context,o=e.initial,a=t.actions,i=o,l=n;return{send:function(e){var t=r[i].on,n=t&&t[e.type];n&&(i=n.target,n.actions&&n.actions.forEach((function(t){var r=a[t],n=r&&r(l,e);n&&(l=s(s({},l),n))})))}}}},"./node_modules/webpack-dev-server/client/overlay/runtime-error.js":(e,t,r)=>{"use strict";function n(e){if(!(e&&e instanceof Error))throw new Error("parseErrorToStacks expects Error object");if("string"==typeof e.stack)return e.stack.split("\n").filter((function(t){return t!=="Error: ".concat(e.message)}))}function s(e){return window.addEventListener("error",e),function(){window.removeEventListener("error",e)}}r.r(t),r.d(t,{listenToRuntimeError:()=>s,parseErrorToStacks:()=>n})},"./node_modules/webpack-dev-server/client/overlay/state-machine.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/webpack-dev-server/client/overlay/fsm.js");const s=function(e){var t=e.hideOverlay,r=e.showOverlay;return(0,n.default)({initial:"hidden",context:{level:"error",messages:[]},states:{hidden:{on:{BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["setMessages","showOverlay"]}}},displayBuildError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["appendMessages","showOverlay"]}}},displayRuntimeError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["appendMessages","showOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]}}}}},{actions:{dismissMessages:function(){return{messages:[],level:"error"}},appendMessages:function(e,t){return{messages:e.messages.concat(t.messages),level:t.level||e.level}},setMessages:function(e,t){return{messages:t.messages,level:t.level||e.level}},hideOverlay:t,showOverlay:r}})}},"./node_modules/webpack-dev-server/client/overlay/styles.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{containerStyle:()=>o,dismissButtonStyle:()=>i,headerStyle:()=>a,iframeStyle:()=>s,msgStyles:()=>n,msgTextStyle:()=>u,msgTypeStyle:()=>l});var n={error:{backgroundColor:"rgba(206, 17, 38, 0.1)",color:"#fccfcf"},warning:{backgroundColor:"rgba(251, 245, 180, 0.1)",color:"#fbf5b4"}},s={position:"fixed",top:0,left:0,right:0,bottom:0,width:"100vw",height:"100vh",border:"none","z-index":9999999999},o={position:"fixed",boxSizing:"border-box",left:0,top:0,right:0,bottom:0,width:"100vw",height:"100vh",fontSize:"large",padding:"2rem 2rem 4rem 2rem",lineHeight:"1.2",whiteSpace:"pre-wrap",overflow:"auto",backgroundColor:"rgba(0, 0, 0, 0.9)",color:"white"},a={color:"#e83b46",fontSize:"2em",whiteSpace:"pre-wrap",fontFamily:"sans-serif",margin:"0 2rem 2rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"},i={color:"#ffffff",lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0,backgroundColor:"transparent",border:"none"},l={color:"#e83b46",fontSize:"1.2em",marginBottom:"1rem",fontFamily:"sans-serif"},u={lineHeight:"1.5",fontSize:"1rem",fontFamily:"Menlo, Consolas, monospace"}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>u,default:()=>d});var n=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),s=r("./node_modules/webpack-dev-server/client/utils/log.js"),o=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),a=void 0!==o?void 0!==o.default?o.default:o:n.default,i=0,l=10,u=null,c=function(e,t,r){(u=new a(e)).onOpen((function(){i=0,void 0!==r&&(l=r)})),u.onClose((function(){if(0===i&&t.close(),u=null,i<l){var n=1e3*Math.pow(2,i)+100*Math.random();i+=1,s.log.info("Trying to reconnect..."),setTimeout((function(){c(e,t,r)}),n)}})),u.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const d=c},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var n=e.protocol||self.location.protocol;("auto:"===n||t&&r&&"https:"===self.location.protocol)&&(n=self.location.protocol),n=n.replace(/^(?:http|.+-extension|file)/i,"ws");var s="";e.username&&(s=e.username,e.password&&(s=s.concat(":",e.password)));var o=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),a=e.port;a&&"0"!==a||(a=self.location.port);var i="/ws";return e.pathname&&!e.fromCurrentScript&&(i=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var n="";e.hostname&&(n=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(n+=":".concat(e.port)));var s=e.pathname||"";e.slashes?(n="//".concat(n||""),s&&"/"!==s.charAt(0)&&(s="/".concat(s))):n||(n="");var o=e.search||"";o&&"?"!==o.charAt(0)&&(o="?".concat(o));var a=e.hash||"";return a&&"#"!==a.charAt(0)&&(a="#".concat(a)),s=s.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),o=o.replace("#","%23"),"".concat(t).concat(n).concat(s).concat(o).concat(a)}({protocol:n,auth:s,hostname:o,port:a,pathname:i,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>a,logEnabledFeatures:()=>i,setLogLevel:()=>o});var n=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),s=r.n(n);function o(e){s().configureDefaultLogger({level:e})}o("info");var a=s().getLogger("webpack-dev-server"),i=function(e){var t=Object.keys(e);if(e&&0!==t.length){for(var r="Server started:",n=0;n<t.length;n++){var s=t[n];r+=" ".concat(s," ").concat(e[s]?"enabled":"disabled",",")}r=r.slice(0,-1).concat("."),a.info(r)}}},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const s=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),s=0;s<r.length;s++){var o=r[s].split("=");t[o[0]]=decodeURIComponent(o[1])}else{var a,i=(0,n.default)();try{a=new URL(i,self.location.href)}catch(e){}a&&((t=a).fromCurrentScript=!0)}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/webpack/hot/emitter.js"),s=r.n(n),o=r("./node_modules/webpack-dev-server/client/utils/log.js");const a=function(e,t){var r=e.hot,n=e.liveReload;if(!t.isUnloading){var a=t.currentHash,i=t.previousHash;if(!(a.indexOf(i)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)o.log.info("App hot update..."),s().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(n&&c)var d=self,h=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&p(d,h)}))}}function p(e,t){clearInterval(t),o.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const s=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(n,"")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var n,s=function(){return n.indexOf(r.h())>=0},o=r("./node_modules/webpack/hot/log.js"),a=function t(){e.hot.check(!0).then((function(e){if(!e)return o("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),o("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());s()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),s()&&o("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(o("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),o("warning","[HMR] "+o.formatError(t)),"undefined"!=typeof window&&window.location.reload()):o("warning","[HMR] Update failed: "+o.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){n=t,s()||"idle"!==e.hot.status()||(o("info","[HMR] Checking for updates on the server..."),a())})),o("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var n=e.filter((function(e){return t&&t.indexOf(e)<0})),s=r("./node_modules/webpack/hot/log.js");(n.length>0&&(s("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach((function(e){s("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(s("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");s.groupCollapsed("info","[HMR]  - "+t.pop()),s("info","[HMR]  - "+e),s.groupEnd("info")}else s("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&s("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):s("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var o=console.group||r,a=console.groupCollapsed||r,i=console.groupEnd||r;e.exports.group=s(o),e.exports.groupCollapsed=s(a),e.exports.groupEnd=s(i),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./app/shaders/plane-fragment.glsl":e=>{"use strict";e.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\nuniform float threshold;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    float alpha = step(vUv.x, threshold);\n    gl_FragColor = vec4(texture.rgb, alpha * texture.a);\n}"},"./app/shaders/plane-vertex.glsl":e=>{"use strict";e.exports="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Vec3.js");const a=new s.Mat4,i=new o.Vec3,l=new o.Vec3;class u extends n.Transform{constructor(e,{near:t=.1,far:r=100,fov:n=45,aspect:a=1,left:i,right:l,bottom:u,top:c,zoom:d=1}={}){super(),Object.assign(this,{near:t,far:r,fov:n,aspect:a,left:i,right:l,bottom:u,top:c,zoom:d}),this.projectionMatrix=new s.Mat4,this.viewMatrix=new s.Mat4,this.projectionViewMatrix=new s.Mat4,this.worldPosition=new o.Vec3,this.type=i||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:n}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:n,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:n=this.right,bottom:s=this.bottom,top:o=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:n,bottom:s,top:o,zoom:a}),r/=a,n/=a,s/=a,o/=a,this.projectionMatrix.fromOrthogonal({left:r,right:n,bottom:s,top:o,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(a.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3,new o.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e,t=e.worldMatrix){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const r=i;r.copy(e.geometry.bounds.center),r.applyMatrix4(t);const n=e.geometry.bounds.radius*t.getMaxScaleOnAxis();return this.frustumIntersectsSphere(r,n)}frustumIntersectsSphere(e,t){const r=l;for(let n=0;n<6;n++){const s=this.frustum[n];if(r.copy(s).dot(e)+s.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var n=r("./node_modules/ogl/src/math/Vec3.js");const s=new n.Vec3;let o=1,a=1,i=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=o++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=a++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const n=this.attributes[t];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const o=n.size/s,a=1===s?0:s*s*s,i=1===s?0:s*s;for(let t=0;t<s;t++)this.gl.vertexAttribPointer(e+t,o,n.type,n.normalized,n.stride+a,n.offset+t*i),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,n.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:i?void 0:(console.warn("No position buffer data found to compute bounds"),i=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||(this.bounds={min:new n.Vec3,max:new n.Vec3,center:new n.Vec3,scale:new n.Vec3,radius:1/0});const s=this.bounds.min,o=this.bounds.max,a=this.bounds.center,i=this.bounds.scale;s.set(1/0),o.set(-1/0);for(let e=0,n=t.length;e<n;e+=r){const r=t[e],n=t[e+1],a=t[e+2];s.x=Math.min(r,s.x),s.y=Math.min(n,s.y),s.z=Math.min(a,s.z),o.x=Math.max(r,o.x),o.y=Math.max(n,o.y),o.z=Math.max(a,o.z)}i.sub(o,s),a.add(s,o).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||this.computeBoundingBox(e);let n=0;for(let e=0,o=t.length;e<o;e+=r)s.fromArray(t,e),n=Math.max(n,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(n)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>i});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),o=r("./node_modules/ogl/src/math/Mat4.js");let a=0;class i extends n.Transform{constructor(e,{geometry:t,program:r,mode:n=e.TRIANGLES,frustumCulled:i=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=a++,this.geometry=t,this.program=r,this.mode=n,this.frustumCulled=i,this.renderOrder=l,this.modelViewMatrix=new o.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>o});let n=1;const s={};class o{constructor(e,{vertex:t,fragment:r,uniforms:s={},transparent:o=!1,cullFace:a=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:d=e.LESS}={}){e.canvas||console.error("gl not passed as first argument to Program"),this.gl=e,this.uniforms=s,this.id=n++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=o,this.cullFace=a,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const h=e.createShader(e.VERTEX_SHADER);e.shaderSource(h,t),e.compileShader(h),""!==e.getShaderInfoLog(h)&&console.warn(`${e.getShaderInfoLog(h)}\nVertex Shader\n${i(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${i(r)}`),this.program=e.createProgram(),e.attachShader(this.program,h),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(h),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const n=r.name.match(/(\w+)/g);r.uniformName=n[0],3===n.length?(r.isStructArray=!0,r.structIndex=Number(n[1]),r.structProperty=n[2]):2===n.length&&isNaN(Number(n[1]))&&(r.isStruct=!0,r.structProperty=n[1])}this.attributeLocations=new Map;const m=[],g=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<g;t++){const r=e.getActiveAttrib(this.program,t),n=e.getAttribLocation(this.program,r.name);-1!==n&&(m[n]=r.name,this.attributeLocations.set(r,n))}this.attributeOrder=m.join("")}setBlendFunc(e,t,r,n){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=n,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let n=r.uniformName,s=this.uniforms[n];if(r.isStruct&&(s=s[r.structProperty],n+=`.${r.structProperty}`),r.isStructArray&&(s=s[r.structIndex][r.structProperty],n+=`[${r.structIndex}].${r.structProperty}`),!s)return u(`Active uniform ${n} has not been supplied`);if(s&&void 0===s.value)return u(`${n} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),a(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),a(this.gl,r.type,e,n)}a(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(e,t,r,n){n=n.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const n=t*r;let o=s[n];o||(s[n]=o=new Float32Array(n));for(let n=0;n<t;n++)o.set(e[n],n*r);return o}(n):n;const o=e.renderer.state.uniformLocations.get(r);if(n.length)if(void 0===o||o.length!==n.length)e.renderer.state.uniformLocations.set(r,n.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}(o,n))return;o.set?o.set(n):function(e,t){for(let r=0,n=e.length;r<n;r++)e[r]=t[r]}(o,n),e.renderer.state.uniformLocations.set(r,o)}else{if(o===n)return;e.renderer.state.uniformLocations.set(r,n)}switch(t){case 5126:return n.length?e.uniform1fv(r,n):e.uniform1f(r,n);case 35664:return e.uniform2fv(r,n);case 35665:return e.uniform3fv(r,n);case 35666:return e.uniform4fv(r,n);case 35670:case 5124:case 35678:case 35680:return n.length?e.uniform1iv(r,n):e.uniform1i(r,n);case 35671:case 35667:return e.uniform2iv(r,n);case 35672:case 35668:return e.uniform3iv(r,n);case 35673:case 35669:return e.uniform4iv(r,n);case 35674:return e.uniformMatrix2fv(r,!1,n);case 35675:return e.uniformMatrix3fv(r,!1,n);case 35676:return e.uniformMatrix4fv(r,!1,n)}}function i(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>o});const n=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let s=1;class o{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:n=1,alpha:o=!1,depth:a=!0,stencil:i=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:d="default",autoClear:h=!0,webgl:p=2}={}){const f={alpha:o,depth:a,stencil:i,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:d};this.dpr=n,this.alpha=o,this.color=!0,this.depth=a,this.stencil=i,this.premultipliedAlpha=u,this.autoClear=h,this.id=s++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,n=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=n,this.gl.viewport(r,n,e,t))}setScissor(e,t,r=0,n=0){this.gl.scissor(r,n,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,n){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=n,void 0!==r?this.gl.blendFuncSeparate(e,t,r,n):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:s}){let o=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||o.push(e))})),s){const e=[],r=[],s=[];o.forEach((o=>{o.program.transparent?o.program.depthTest?r.push(o):s.push(o):e.push(o),o.zDepth=0,0===o.renderOrder&&o.program.depthTest&&t&&(o.worldMatrix.getTranslation(n),n.applyMatrix4(t.projectionViewMatrix),o.zDepth=n.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),o=e.concat(r,s)}return o}render({scene:e,camera:t,target:r=null,update:n=!0,sort:s=!0,frustumCull:o=!0,clear:a}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:o,sort:s}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>a});const n=new Uint8Array(4);function s(e){return 0==(e&e-1)}let o=1;class a{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:n=e.UNSIGNED_BYTE,format:s=e.RGBA,internalFormat:a=s,wrapS:i=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:d=e.LINEAR,premultiplyAlpha:h=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:m=0,level:g=0,width:v,height:b=v}={}){this.gl=e,this.id=o++,this.image=t,this.target=r,this.type=n,this.format=s,this.internalFormat=a,this.minFilter=c,this.magFilter=d,this.wrapS=i,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=h,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=b,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>i});var n=r("./node_modules/ogl/src/math/Vec3.js"),s=r("./node_modules/ogl/src/math/Quat.js"),o=r("./node_modules/ogl/src/math/Mat4.js"),a=r("./node_modules/ogl/src/math/Euler.js");class i{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new o.Mat4,this.worldMatrix=new o.Mat4,this.matrixAutoUpdate=!0,this.position=new n.Vec3,this.quaternion=new s.Quat,this.scale=new n.Vec3(1),this.rotation=new a.Euler,this.up=new n.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>s});var n=r("./node_modules/ogl/src/core/Geometry.js");class s extends n.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:n=1,heightSegments:o=1,attributes:a={}}={}){const i=n,l=o,u=(i+1)*(l+1),c=i*l*6,d=new Float32Array(3*u),h=new Float32Array(3*u),p=new Float32Array(2*u),f=c>65536?new Uint32Array(c):new Uint16Array(c);s.buildPlane(d,h,p,f,t,r,0,i,l),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:h},uv:{size:2,data:p},index:{data:f}}),super(e,a)}static buildPlane(e,t,r,n,s,o,a,i,l,u=0,c=1,d=2,h=1,p=-1,f=0,m=0){const g=f,v=s/i,b=o/l;for(let y=0;y<=l;y++){let _=y*b-o/2;for(let o=0;o<=i;o++,f++){let b=o*v-s/2;if(e[3*f+u]=b*h,e[3*f+c]=_*p,e[3*f+d]=a/2,t[3*f+u]=0,t[3*f+c]=0,t[3*f+d]=a>=0?1:-1,r[2*f]=o/i,r[2*f+1]=1-y/l,y===l||o===i)continue;let w=g+o+y*(i+1),x=g+o+(y+1)*(i+1),j=g+o+(y+1)*(i+1)+1,E=g+o+y*(i+1)+1;n[6*m]=w,n[6*m+1]=x,n[6*m+2]=E,n[6*m+3]=x,n[6*m+4]=j,n[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>o});var n=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const s=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class o extends Array{constructor(e=0,t=e,r=e,n="YXZ"){return super(e,t,r),this.order=n,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return n.fromRotationMatrix(this,e,t),this.onChange(),this}fromQuaternion(e,t=this.order){return s.fromQuaternion(e),this.fromRotationMatrix(s,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=1,o=0,a=0,i=0,l=1){return super(e,t,r,n,s,o,a,i,l),this}set(e,t,r,s,o,a,i,l,u){return e.length?this.copy(e):(n.set(this,e,t,r,s,o,a,i,l,u),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t=this){return n.rotate(this,t,e),this}scale(e,t=this){return n.scale(this,t,e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromMatrix4(e){return n.fromMat4(this,e),this}fromQuaternion(e){return n.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return n.invert(this,e),this}getNormalMatrix(e){return n.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=0,o=1,a=0,i=0,l=0,u=0,c=1,d=0,h=0,p=0,f=0,m=1){return super(e,t,r,n,s,o,a,i,l,u,c,d,h,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,s,o,a,i,l,u,c,d,h,p,f,m,g){return e.length?this.copy(e):(n.set(this,e,t,r,s,o,a,i,l,u,c,d,h,p,f,m,g),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t,r=this){return n.rotate(this,r,e,t),this}scale(e,t=this){return n.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:s}={}){return n.perspective(this,e,t,r,s),this}fromOrthogonal({left:e,right:t,bottom:r,top:s,near:o,far:a}){return n.ortho(this,e,t,r,s,o,a),this}fromQuaternion(e){return n.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return n.invert(this,e),this}compose(e,t,r){return n.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return n.getRotation(e,this),this}getTranslation(e){return n.getTranslation(e,this),this}getScaling(e){return n.getScaling(e,this),this}getMaxScaleOnAxis(){return n.getMaxScaleOnAxis(this)}lookAt(e,t,r){return n.targetTo(this,e,t,r),this}determinant(){return n.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>s});var n=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class s extends Array{constructor(e=0,t=0,r=0,n=1){return super(e,t,r,n),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return n.identity(this),this.onChange(),this}set(e,t,r,s){return e.length?this.copy(e):(n.set(this,e,t,r,s),this.onChange(),this)}rotateX(e){return n.rotateX(this,this,e),this.onChange(),this}rotateY(e){return n.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return n.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return n.invert(this,e),this.onChange(),this}conjugate(e=this){return n.conjugate(this,e),this.onChange(),this}copy(e){return n.copy(this,e),this.onChange(),this}normalize(e=this){return n.normalize(this,e),this.onChange(),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this.onChange(),this}dot(e){return n.dot(this,e)}fromMatrix3(e){return n.fromMat3(this,e),this.onChange(),this}fromEuler(e){return n.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return n.setAxisAngle(this,e,t),this.onChange(),this}slerp(e,t){return n.slerp(this,this,e,t),this.onChange(),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this.onChange(),this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class s extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(n.set(this,e,t,r),this)}copy(e){return n.copy(this,e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e){return e.length?n.multiply(this,this,e):n.scale(this,this,e),this}divide(e){return e.length?n.divide(this,this,e):n.scale(this,this,1/e),this}inverse(e=this){return n.inverse(this,e),this}len(){return n.length(this)}distance(e){return e?n.distance(this,e):n.length(this)}squaredLen(){return n.squaredLength(this)}squaredDistance(e){return e?n.squaredDistance(this,e):n.squaredLength(this)}negate(e=this){return n.negate(this,e),this}cross(e,t){return t?n.cross(this,e,t):n.cross(this,this,e),this}scale(e){return n.scale(this,this,e),this}normalize(){return n.normalize(this,this),this}dot(e){return n.dot(this,e)}equals(e){return n.exactEquals(this,e)}applyMatrix3(e){return n.transformMat3(this,this,e),this}applyMatrix4(e){return n.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return n.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return n.transformQuat(this,this,e),this}angle(e){return n.angle(this,e)}lerp(e,t){return n.lerp(this,this,e,t),this}clone(){return new s(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],n=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*n,this[1]=e[1]*t+e[5]*r+e[9]*n,this[2]=e[2]*t+e[6]*r+e[10]*n,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function n(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>n})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>v,copy:()=>o,determinant:()=>c,fromMat4:()=>n,fromQuat:()=>s,identity:()=>i,invert:()=>u,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>m,projection:()=>g,rotate:()=>p,scale:()=>f,set:()=>a,subtract:()=>b,translate:()=>h,transpose:()=>l});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function s(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=r+r,i=n+n,l=s+s,u=r*a,c=n*a,d=n*i,h=s*a,p=s*i,f=s*l,m=o*a,g=o*i,v=o*l;return e[0]=1-d-f,e[3]=c-v,e[6]=h+g,e[1]=c+v,e[4]=1-u-f,e[7]=p-m,e[2]=h-g,e[5]=p+m,e[8]=1-u-d,e}function o(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function a(e,t,r,n,s,o,a,i,l,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=o,e[5]=a,e[6]=i,e[7]=l,e[8]=u,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=s}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=t[4],i=t[5],l=t[6],u=t[7],c=t[8],d=c*a-i*u,h=-c*o+i*l,p=u*o-a*l,f=r*d+n*h+s*p;return f?(f=1/f,e[0]=d*f,e[1]=(-c*n+s*u)*f,e[2]=(i*n-s*a)*f,e[3]=h*f,e[4]=(c*r-s*l)*f,e[5]=(-i*r+s*o)*f,e[6]=p*f,e[7]=(-u*r+n*l)*f,e[8]=(a*r-n*o)*f,e):null}function c(e){let t=e[0],r=e[1],n=e[2],s=e[3],o=e[4],a=e[5],i=e[6],l=e[7],u=e[8];return t*(u*o-a*l)+r*(-u*s+a*i)+n*(l*s-o*i)}function d(e,t,r){let n=t[0],s=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1],f=r[2],m=r[3],g=r[4],v=r[5],b=r[6],y=r[7],_=r[8];return e[0]=h*n+p*a+f*u,e[1]=h*s+p*i+f*c,e[2]=h*o+p*l+f*d,e[3]=m*n+g*a+v*u,e[4]=m*s+g*i+v*c,e[5]=m*o+g*l+v*d,e[6]=b*n+y*a+_*u,e[7]=b*s+y*i+_*c,e[8]=b*o+y*l+_*d,e}function h(e,t,r){let n=t[0],s=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1];return e[0]=n,e[1]=s,e[2]=o,e[3]=a,e[4]=i,e[5]=l,e[6]=h*n+p*a+u,e[7]=h*s+p*i+c,e[8]=h*o+p*l+d,e}function p(e,t,r){let n=t[0],s=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=Math.sin(r),p=Math.cos(r);return e[0]=p*n+h*a,e[1]=p*s+h*i,e[2]=p*o+h*l,e[3]=p*a-h*n,e[4]=p*i-h*s,e[5]=p*l-h*o,e[6]=u,e[7]=c,e[8]=d,e}function f(e,t,r){let n=r[0],s=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=s*t[3],e[4]=s*t[4],e[5]=s*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function m(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=t[4],i=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],v=t[15],b=r*i-n*a,y=r*l-s*a,_=r*u-o*a,w=n*l-s*i,x=n*u-o*i,j=s*u-o*l,E=c*m-d*f,A=c*g-h*f,S=c*v-p*f,M=d*g-h*m,q=d*v-p*m,k=h*v-p*g,O=b*k-y*q+_*M+w*S-x*A+j*E;return O?(O=1/O,e[0]=(i*k-l*q+u*M)*O,e[1]=(l*S-a*k-u*A)*O,e[2]=(a*q-i*S+u*E)*O,e[3]=(s*q-n*k-o*M)*O,e[4]=(r*k-s*S+o*A)*O,e[5]=(n*S-r*q-o*E)*O,e[6]=(m*j-g*x+v*w)*O,e[7]=(g*_-f*j-v*y)*O,e[8]=(f*x-m*_+v*b)*O,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function v(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function b(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>j,copy:()=>s,determinant:()=>u,fromQuat:()=>y,fromRotationTranslationScale:()=>b,getMaxScaleOnAxis:()=>g,getRotation:()=>v,getScaling:()=>m,getTranslation:()=>f,identity:()=>a,invert:()=>l,multiply:()=>c,multiplyScalar:()=>A,ortho:()=>w,perspective:()=>_,rotate:()=>p,scale:()=>h,set:()=>o,subtract:()=>E,targetTo:()=>x,translate:()=>d,transpose:()=>i});const n=1e-6;function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function o(e,t,r,n,s,o,a,i,l,u,c,d,h,p,f,m,g){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=o,e[5]=a,e[6]=i,e[7]=l,e[8]=u,e[9]=c,e[10]=d,e[11]=h,e[12]=p,e[13]=f,e[14]=m,e[15]=g,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function i(e,t){if(e===t){let r=t[1],n=t[2],s=t[3],o=t[6],a=t[7],i=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=o,e[11]=t[14],e[12]=s,e[13]=a,e[14]=i}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function l(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=t[4],i=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],v=t[15],b=r*i-n*a,y=r*l-s*a,_=r*u-o*a,w=n*l-s*i,x=n*u-o*i,j=s*u-o*l,E=c*m-d*f,A=c*g-h*f,S=c*v-p*f,M=d*g-h*m,q=d*v-p*m,k=h*v-p*g,O=b*k-y*q+_*M+w*S-x*A+j*E;return O?(O=1/O,e[0]=(i*k-l*q+u*M)*O,e[1]=(s*q-n*k-o*M)*O,e[2]=(m*j-g*x+v*w)*O,e[3]=(h*x-d*j-p*w)*O,e[4]=(l*S-a*k-u*A)*O,e[5]=(r*k-s*S+o*A)*O,e[6]=(g*_-f*j-v*y)*O,e[7]=(c*j-h*_+p*y)*O,e[8]=(a*q-i*S+u*E)*O,e[9]=(n*S-r*q-o*E)*O,e[10]=(f*x-m*_+v*b)*O,e[11]=(d*_-c*x-p*b)*O,e[12]=(i*A-a*M-l*E)*O,e[13]=(r*M-n*A+s*E)*O,e[14]=(m*y-f*w-g*b)*O,e[15]=(c*w-d*y+h*b)*O,e):null}function u(e){let t=e[0],r=e[1],n=e[2],s=e[3],o=e[4],a=e[5],i=e[6],l=e[7],u=e[8],c=e[9],d=e[10],h=e[11],p=e[12],f=e[13],m=e[14],g=e[15];return(t*a-r*o)*(d*g-h*m)-(t*i-n*o)*(c*g-h*f)+(t*l-s*o)*(c*m-d*f)+(r*i-n*a)*(u*g-h*p)-(r*l-s*a)*(u*m-d*p)+(n*l-s*i)*(u*f-c*p)}function c(e,t,r){let n=t[0],s=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],m=t[12],g=t[13],v=t[14],b=t[15],y=r[0],_=r[1],w=r[2],x=r[3];return e[0]=y*n+_*i+w*d+x*m,e[1]=y*s+_*l+w*h+x*g,e[2]=y*o+_*u+w*p+x*v,e[3]=y*a+_*c+w*f+x*b,y=r[4],_=r[5],w=r[6],x=r[7],e[4]=y*n+_*i+w*d+x*m,e[5]=y*s+_*l+w*h+x*g,e[6]=y*o+_*u+w*p+x*v,e[7]=y*a+_*c+w*f+x*b,y=r[8],_=r[9],w=r[10],x=r[11],e[8]=y*n+_*i+w*d+x*m,e[9]=y*s+_*l+w*h+x*g,e[10]=y*o+_*u+w*p+x*v,e[11]=y*a+_*c+w*f+x*b,y=r[12],_=r[13],w=r[14],x=r[15],e[12]=y*n+_*i+w*d+x*m,e[13]=y*s+_*l+w*h+x*g,e[14]=y*o+_*u+w*p+x*v,e[15]=y*a+_*c+w*f+x*b,e}function d(e,t,r){let n,s,o,a,i,l,u,c,d,h,p,f,m=r[0],g=r[1],v=r[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*v+t[12],e[13]=t[1]*m+t[5]*g+t[9]*v+t[13],e[14]=t[2]*m+t[6]*g+t[10]*v+t[14],e[15]=t[3]*m+t[7]*g+t[11]*v+t[15]):(n=t[0],s=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],e[0]=n,e[1]=s,e[2]=o,e[3]=a,e[4]=i,e[5]=l,e[6]=u,e[7]=c,e[8]=d,e[9]=h,e[10]=p,e[11]=f,e[12]=n*m+i*g+d*v+t[12],e[13]=s*m+l*g+h*v+t[13],e[14]=o*m+u*g+p*v+t[14],e[15]=a*m+c*g+f*v+t[15]),e}function h(e,t,r){let n=r[0],s=r[1],o=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*s,e[5]=t[5]*s,e[6]=t[6]*s,e[7]=t[7]*s,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function p(e,t,r,s){let o,a,i,l,u,c,d,h,p,f,m,g,v,b,y,_,w,x,j,E,A,S,M,q,k=s[0],O=s[1],T=s[2],D=Math.hypot(k,O,T);return Math.abs(D)<n?null:(D=1/D,k*=D,O*=D,T*=D,o=Math.sin(r),a=Math.cos(r),i=1-a,l=t[0],u=t[1],c=t[2],d=t[3],h=t[4],p=t[5],f=t[6],m=t[7],g=t[8],v=t[9],b=t[10],y=t[11],_=k*k*i+a,w=O*k*i+T*o,x=T*k*i-O*o,j=k*O*i-T*o,E=O*O*i+a,A=T*O*i+k*o,S=k*T*i+O*o,M=O*T*i-k*o,q=T*T*i+a,e[0]=l*_+h*w+g*x,e[1]=u*_+p*w+v*x,e[2]=c*_+f*w+b*x,e[3]=d*_+m*w+y*x,e[4]=l*j+h*E+g*A,e[5]=u*j+p*E+v*A,e[6]=c*j+f*E+b*A,e[7]=d*j+m*E+y*A,e[8]=l*S+h*M+g*q,e[9]=u*S+p*M+v*q,e[10]=c*S+f*M+b*q,e[11]=d*S+m*M+y*q,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function f(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function m(e,t){let r=t[0],n=t[1],s=t[2],o=t[4],a=t[5],i=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,n,s),e[1]=Math.hypot(o,a,i),e[2]=Math.hypot(l,u,c),e}function g(e){let t=e[0],r=e[1],n=e[2],s=e[4],o=e[5],a=e[6],i=e[8],l=e[9],u=e[10];const c=t*t+r*r+n*n,d=s*s+o*o+a*a,h=i*i+l*l+u*u;return Math.sqrt(Math.max(c,d,h))}const v=function(){const e=[0,0,0];return function(t,r){let n=e;m(n,r);let s=1/n[0],o=1/n[1],a=1/n[2],i=r[0]*s,l=r[1]*o,u=r[2]*a,c=r[4]*s,d=r[5]*o,h=r[6]*a,p=r[8]*s,f=r[9]*o,g=r[10]*a,v=i+d+g,b=0;return v>0?(b=2*Math.sqrt(v+1),t[3]=.25*b,t[0]=(h-f)/b,t[1]=(p-u)/b,t[2]=(l-c)/b):i>d&&i>g?(b=2*Math.sqrt(1+i-d-g),t[3]=(h-f)/b,t[0]=.25*b,t[1]=(l+c)/b,t[2]=(p+u)/b):d>g?(b=2*Math.sqrt(1+d-i-g),t[3]=(p-u)/b,t[0]=(l+c)/b,t[1]=.25*b,t[2]=(h+f)/b):(b=2*Math.sqrt(1+g-i-d),t[3]=(l-c)/b,t[0]=(p+u)/b,t[1]=(h+f)/b,t[2]=.25*b),t}}();function b(e,t,r,n){let s=t[0],o=t[1],a=t[2],i=t[3],l=s+s,u=o+o,c=a+a,d=s*l,h=s*u,p=s*c,f=o*u,m=o*c,g=a*c,v=i*l,b=i*u,y=i*c,_=n[0],w=n[1],x=n[2];return e[0]=(1-(f+g))*_,e[1]=(h+y)*_,e[2]=(p-b)*_,e[3]=0,e[4]=(h-y)*w,e[5]=(1-(d+g))*w,e[6]=(m+v)*w,e[7]=0,e[8]=(p+b)*x,e[9]=(m-v)*x,e[10]=(1-(d+f))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function y(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=r+r,i=n+n,l=s+s,u=r*a,c=n*a,d=n*i,h=s*a,p=s*i,f=s*l,m=o*a,g=o*i,v=o*l;return e[0]=1-d-f,e[1]=c+v,e[2]=h-g,e[3]=0,e[4]=c-v,e[5]=1-u-f,e[6]=p+m,e[7]=0,e[8]=h+g,e[9]=p-m,e[10]=1-u-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function _(e,t,r,n,s){let o=1/Math.tan(t/2),a=1/(n-s);return e[0]=o/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(s+n)*a,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*s*n*a,e[15]=0,e}function w(e,t,r,n,s,o,a){let i=1/(t-r),l=1/(n-s),u=1/(o-a);return e[0]=-2*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*i,e[13]=(s+n)*l,e[14]=(a+o)*u,e[15]=1,e}function x(e,t,r,n){let s=t[0],o=t[1],a=t[2],i=n[0],l=n[1],u=n[2],c=s-r[0],d=o-r[1],h=a-r[2],p=c*c+d*d+h*h;0===p?h=1:(p=1/Math.sqrt(p),c*=p,d*=p,h*=p);let f=l*h-u*d,m=u*c-i*h,g=i*d-l*c;return p=f*f+m*m+g*g,0===p&&(u?i+=1e-6:l?u+=1e-6:l+=1e-6,f=l*h-u*d,m=u*c-i*h,g=i*d-l*c,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,e[0]=f,e[1]=m,e[2]=g,e[3]=0,e[4]=d*g-h*m,e[5]=h*f-c*g,e[6]=c*m-d*f,e[7]=0,e[8]=c,e[9]=d,e[10]=h,e[11]=0,e[12]=s,e[13]=o,e[14]=a,e[15]=1,e}function j(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function E(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function A(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>v,conjugate:()=>h,copy:()=>m,dot:()=>y,fromEuler:()=>f,fromMat3:()=>p,identity:()=>s,invert:()=>d,length:()=>w,lerp:()=>_,multiply:()=>a,normalize:()=>x,rotateX:()=>i,rotateY:()=>l,rotateZ:()=>u,scale:()=>b,set:()=>g,setAxisAngle:()=>o,slerp:()=>c});var n=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function s(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function o(e,t,r){r*=.5;let n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function a(e,t,r){let n=t[0],s=t[1],o=t[2],a=t[3],i=r[0],l=r[1],u=r[2],c=r[3];return e[0]=n*c+a*i+s*u-o*l,e[1]=s*c+a*l+o*i-n*u,e[2]=o*c+a*u+n*l-s*i,e[3]=a*c-n*i-s*l-o*u,e}function i(e,t,r){r*=.5;let n=t[0],s=t[1],o=t[2],a=t[3],i=Math.sin(r),l=Math.cos(r);return e[0]=n*l+a*i,e[1]=s*l+o*i,e[2]=o*l-s*i,e[3]=a*l-n*i,e}function l(e,t,r){r*=.5;let n=t[0],s=t[1],o=t[2],a=t[3],i=Math.sin(r),l=Math.cos(r);return e[0]=n*l-o*i,e[1]=s*l+a*i,e[2]=o*l+n*i,e[3]=a*l-s*i,e}function u(e,t,r){r*=.5;let n=t[0],s=t[1],o=t[2],a=t[3],i=Math.sin(r),l=Math.cos(r);return e[0]=n*l+s*i,e[1]=s*l-n*i,e[2]=o*l+a*i,e[3]=a*l-o*i,e}function c(e,t,r,n){let s,o,a,i,l,u=t[0],c=t[1],d=t[2],h=t[3],p=r[0],f=r[1],m=r[2],g=r[3];return o=u*p+c*f+d*m+h*g,o<0&&(o=-o,p=-p,f=-f,m=-m,g=-g),1-o>1e-6?(s=Math.acos(o),a=Math.sin(s),i=Math.sin((1-n)*s)/a,l=Math.sin(n*s)/a):(i=1-n,l=n),e[0]=i*u+l*p,e[1]=i*c+l*f,e[2]=i*d+l*m,e[3]=i*h+l*g,e}function d(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=r*r+n*n+s*s+o*o,i=a?1/a:0;return e[0]=-r*i,e[1]=-n*i,e[2]=-s*i,e[3]=o*i,e}function h(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let n=0;t[4]>t[0]&&(n=1),t[8]>t[3*n+n]&&(n=2);let s=(n+1)%3,o=(n+2)%3;r=Math.sqrt(t[3*n+n]-t[3*s+s]-t[3*o+o]+1),e[n]=.5*r,r=.5/r,e[3]=(t[3*s+o]-t[3*o+s])*r,e[s]=(t[3*s+n]+t[3*n+s])*r,e[o]=(t[3*o+n]+t[3*n+o])*r}return e}function f(e,t,r="YXZ"){let n=Math.sin(.5*t[0]),s=Math.cos(.5*t[0]),o=Math.sin(.5*t[1]),a=Math.cos(.5*t[1]),i=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=n*a*l+s*o*i,e[1]=s*o*l-n*a*i,e[2]=s*a*i+n*o*l,e[3]=s*a*l-n*o*i):"YXZ"===r?(e[0]=n*a*l+s*o*i,e[1]=s*o*l-n*a*i,e[2]=s*a*i-n*o*l,e[3]=s*a*l+n*o*i):"ZXY"===r?(e[0]=n*a*l-s*o*i,e[1]=s*o*l+n*a*i,e[2]=s*a*i+n*o*l,e[3]=s*a*l-n*o*i):"ZYX"===r?(e[0]=n*a*l-s*o*i,e[1]=s*o*l+n*a*i,e[2]=s*a*i-n*o*l,e[3]=s*a*l+n*o*i):"YZX"===r?(e[0]=n*a*l+s*o*i,e[1]=s*o*l+n*a*i,e[2]=s*a*i-n*o*l,e[3]=s*a*l-n*o*i):"XZY"===r&&(e[0]=n*a*l-s*o*i,e[1]=s*o*l-n*a*i,e[2]=s*a*i+n*o*l,e[3]=s*a*l+n*o*i),e}const m=n.copy,g=n.set,v=n.add,b=n.scale,y=n.dot,_=n.lerp,w=n.length,x=n.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>a,angle:()=>E,copy:()=>s,cross:()=>b,distance:()=>d,divide:()=>u,dot:()=>v,exactEquals:()=>A,inverse:()=>m,length:()=>n,lerp:()=>y,multiply:()=>l,negate:()=>f,normalize:()=>g,scale:()=>c,scaleRotateMat4:()=>w,set:()=>o,squaredDistance:()=>h,squaredLength:()=>p,subtract:()=>i,transformMat3:()=>x,transformMat4:()=>_,transformQuat:()=>j});function n(e){let t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function o(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function a(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function i(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function d(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}function h(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}function p(e){let t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function m(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],n=t[1],s=t[2],o=r*r+n*n+s*s;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function v(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function b(e,t,r){let n=t[0],s=t[1],o=t[2],a=r[0],i=r[1],l=r[2];return e[0]=s*l-o*i,e[1]=o*a-n*l,e[2]=n*i-s*a,e}function y(e,t,r,n){let s=t[0],o=t[1],a=t[2];return e[0]=s+n*(r[0]-s),e[1]=o+n*(r[1]-o),e[2]=a+n*(r[2]-a),e}function _(e,t,r){let n=t[0],s=t[1],o=t[2],a=r[3]*n+r[7]*s+r[11]*o+r[15];return a=a||1,e[0]=(r[0]*n+r[4]*s+r[8]*o+r[12])/a,e[1]=(r[1]*n+r[5]*s+r[9]*o+r[13])/a,e[2]=(r[2]*n+r[6]*s+r[10]*o+r[14])/a,e}function w(e,t,r){let n=t[0],s=t[1],o=t[2],a=r[3]*n+r[7]*s+r[11]*o+r[15];return a=a||1,e[0]=(r[0]*n+r[4]*s+r[8]*o)/a,e[1]=(r[1]*n+r[5]*s+r[9]*o)/a,e[2]=(r[2]*n+r[6]*s+r[10]*o)/a,e}function x(e,t,r){let n=t[0],s=t[1],o=t[2];return e[0]=n*r[0]+s*r[3]+o*r[6],e[1]=n*r[1]+s*r[4]+o*r[7],e[2]=n*r[2]+s*r[5]+o*r[8],e}function j(e,t,r){let n=t[0],s=t[1],o=t[2],a=r[0],i=r[1],l=r[2],u=i*o-l*s,c=l*n-a*o,d=a*s-i*n,h=i*d-l*c,p=l*u-a*d,f=a*c-i*u,m=2*r[3];return u*=m,c*=m,d*=m,h*=2,p*=2,f*=2,e[0]=n+u+h,e[1]=s+c+p,e[2]=o+d+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,n){s(e,r),s(t,n),g(e,e),g(t,t);let o=v(e,t);return o>1?0:o<-1?Math.PI:Math.acos(o)}}();function A(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o,copy:()=>n,dot:()=>u,length:()=>i,lerp:()=>c,normalize:()=>l,scale:()=>a,set:()=>s});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function s(e,t,r,n,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function a(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function i(e){let t=e[0],r=e[1],n=e[2],s=e[3];return Math.sqrt(t*t+r*r+n*n+s*s)}function l(e,t){let r=t[0],n=t[1],s=t[2],o=t[3],a=r*r+n*n+s*s+o*o;return a>0&&(a=1/Math.sqrt(a)),e[0]=r*a,e[1]=n*a,e[2]=s*a,e[3]=o*a,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,n){let s=t[0],o=t[1],a=t[2],i=t[3];return e[0]=s+n*(r[0]-s),e[1]=o+n*(r[1]-o),e[2]=a+n*(r[2]-a),e[3]=i+n*(r[3]-i),e}}},n={};function s(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var o=n[e]={id:e,loaded:!1,exports:{}};try{var a={id:e,module:o,factory:r[e],require:s};s.i.forEach((function(e){e(a)})),o=a.module,a.factory.call(o.exports,o,o.exports,a.require)}catch(e){throw o.error=e,e}return o.loaded=!0,o.exports}s.m=r,s.c=n,s.i=[],s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>{},s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"5aba1ee30fc2dd8926ef",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="portfolio_v2:",s.l=(r,n,o,a)=>{if(e[r])e[r].push(n);else{var i,l;if(void 0!==o)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var d=u[c];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+o){i=d;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",t+o),i.src=r),e[r]=[n];var h=(t,n)=>{i.onerror=i.onload=null,clearTimeout(p);var s=e[r];if(delete e[r],i.parentNode&&i.parentNode.removeChild(i),s&&s.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=h.bind(null,i.onerror),i.onload=h.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n={},o=s.c,a=[],i=[],l="idle",u=0,c=[];function d(e){l=e;for(var t=[],r=0;r<i.length;r++)t[r]=i[r].call(null,e);return Promise.all(t)}function h(){0==--u&&d("ready").then((function(){if(0===u){var e=c;c=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return d("check").then(s.hmrM).then((function(r){return r?d("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return n}))},0===u?t():new Promise((function(e){c.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):m(e)}function m(e){e=e||{},g();var n=t.map((function(t){return t(e)}));t=void 0;var s=n.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return d("abort").then((function(){throw s[0]}));var o=d("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var a,i=d("apply"),l=function(e){a||(a=e)},u=[];return n.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([o,i]).then((function(){return a?d("fail").then((function(){throw a})):r?m(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return u}))}))}function g(){if(r)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){r.forEach((function(r){s.hmrI[e](r,t)}))})),r=void 0,!0}s.hmrD=n,s.i.push((function(c){var m,g,v,b,y=c.module,_=function(t,r){var n=o[r];if(!n)return t;var s=function(s){if(n.hot.active){if(o[s]){var i=o[s].parents;-1===i.indexOf(r)&&i.push(r)}else a=[r],e=s;-1===n.children.indexOf(s)&&n.children.push(s)}else console.warn("[HMR] unexpected require("+s+") from disposed module "+r),a=[];return t(s)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&"e"!==c&&Object.defineProperty(s,c,i(c));return s.e=function(e){return function(e){switch(l){case"ready":d("prepare");case"prepare":return u++,e.then(h,h),e;default:return e}}(t.e(e))},s}(c.require,c.id);y.hot=(m=c.id,g=y,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){a=g.parents.slice(),e=v?void 0:m,s(m)},active:!0,accept:function(e,t,r){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)b._acceptedDependencies[e[n]]=t||function(){},b._acceptedErrorHandlers[e[n]]=r;else b._acceptedDependencies[e]=t||function(){},b._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._declinedDependencies[e[t]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=b._disposeHandlers.indexOf(e);t>=0&&b._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return l;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:n[m]},e=void 0,b),y.parents=a,y.children=[],a=[],c.require=_})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{if("undefined"!=typeof document){var e=(e,t,r,n,s)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css";return o.onerror=o.onload=r=>{if(o.onerror=o.onload=null,"load"===r.type)n();else{var a=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+i+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=i,o.parentNode&&o.parentNode.removeChild(o),s(l)}},o.href=t,r?r.parentNode.insertBefore(o,r.nextSibling):document.head.appendChild(o),o},t=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var s=(a=r[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(s===e||s===t))return a}var o=document.getElementsByTagName("style");for(n=0;n<o.length;n++){var a;if((s=(a=o[n]).getAttribute("data-href"))===e||s===t)return a}},r=[],n=[],o=e=>({dispose:()=>{for(var e=0;e<r.length;e++){var t=r[e];t.parentNode&&t.parentNode.removeChild(t)}r.length=0},apply:()=>{for(var e=0;e<n.length;e++)n[e].rel="stylesheet";n.length=0}});s.hmrC.miniCss=(a,i,l,u,c,d)=>{c.push(o),a.forEach((o=>{var a=s.miniCssF(o),i=s.p+a,l=t(a,i);l&&u.push(new Promise(((t,s)=>{var a=e(o,i,l,(()=>{a.as="style",a.rel="preload",t()}),s);r.push(l),n.push(a)})))}))}}})(),(()=>{var e,t,r,n,o,a=s.hmrS_jsonp=s.hmrS_jsonp||{main:0},i={};function l(t,r){return e=r,new Promise(((e,r)=>{i[t]=e;var n=s.p+s.hu(t),o=new Error;s.l(n,(e=>{if(i[t]){i[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+n+": "+s+")",o.name="ChunkLoadError",o.type=n,o.request=s,r(o)}}))}))}function u(e){function i(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),a=o.id,i=o.chain,u=s.c[a];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var c=0;c<u.parents.length;c++){var d=u.parents[c],h=s.c[d];if(h){if(h.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([d]),moduleId:a,parentId:d};-1===t.indexOf(d)&&(h.hot._acceptedDependencies[a]?(r[d]||(r[d]=[]),l(r[d],[a])):(delete r[d],t.push(d),n.push({chain:i.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,t=void 0;var u={},c=[],d={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(s.o(r,p)){var f,m=r[p],g=!1,v=!1,b=!1,y="";switch((f=m?i(p):{type:"disposed",moduleId:p}).chain&&(y="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+f.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(f),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),b=!0;break;default:throw new Error("Unexception type "+f.type)}if(g)return{error:g};if(v)for(p in d[p]=m,l(c,f.outdatedModules),f.outdatedDependencies)s.o(f.outdatedDependencies,p)&&(u[p]||(u[p]=[]),l(u[p],f.outdatedDependencies[p]));b&&(l(c,[f.moduleId]),d[p]=h)}r=void 0;for(var _,w=[],x=0;x<c.length;x++){var j=c[x],E=s.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&d[j]!==h&&!E.hot._selfInvalidated&&w.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete a[e]})),n=void 0;for(var t,r=c.slice();r.length>0;){var o=r.pop(),i=s.c[o];if(i){var l={},d=i.hot._disposeHandlers;for(x=0;x<d.length;x++)d[x].call(null,l);for(s.hmrD[o]=l,i.hot.active=!1,delete s.c[o],delete u[o],x=0;x<i.children.length;x++){var h=s.c[i.children[x]];h&&((e=h.parents.indexOf(o))>=0&&h.parents.splice(e,1))}}}for(var p in u)if(s.o(u,p)&&(i=s.c[p]))for(_=u[p],x=0;x<_.length;x++)t=_[x],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var r in d)s.o(d,r)&&(s.m[r]=d[r]);for(var n=0;n<o.length;n++)o[n](s);for(var a in u)if(s.o(u,a)){var i=s.c[a];if(i){_=u[a];for(var l=[],h=[],p=[],f=0;f<_.length;f++){var m=_[f],g=i.hot._acceptedDependencies[m],v=i.hot._acceptedErrorHandlers[m];if(g){if(-1!==l.indexOf(g))continue;l.push(g),h.push(v),p.push(m)}}for(var b=0;b<l.length;b++)try{l[b].call(null,_)}catch(r){if("function"==typeof h[b])try{h[b](r,{moduleId:a,dependencyId:p[b]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:p[b],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:p[b],error:r}),e.ignoreErrored||t(r)}}}for(var y=0;y<w.length;y++){var x=w[y],j=x.module;try{x.require(j)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:j,module:s.c[j]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return c}}}self.webpackHotUpdateportfolio_v2=(t,n,a)=>{for(var l in n)s.o(n,l)&&(r[l]=n[l],e&&e.push(l));a&&o.push(a),i[t]&&(i[t](),i[t]=void 0)},s.hmrI.jsonp=function(e,t){r||(r={},o=[],n=[],t.push(u)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(e,i,c,d,h,p){h.push(u),t={},n=i,r=c.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){s.o(a,e)&&void 0!==a[e]?(d.push(l(e,p)),t[e]=!0):t[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,r){t&&s.o(t,e)&&!t[e]&&(r.push(l(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),s("./node_modules/webpack/hot/dev-server.js"),s("./app/index.js");s("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,