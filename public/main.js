/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r,s,n,i,o,a={"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=e=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/events/events.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),o=r.n(i);class a extends(n()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},o()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Detection.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=new class{isPhone(){return this.isPhoneChecked||(this.isPhoneChecked=!0,this.isPhoneCheck=document.documentElement.classList.contains("phone")),this.isPhoneCheck}isTablet(){return this.isTabletChecked||(this.isTabletChecked=!0,this.isTabletCheck=document.documentElement.classList.contains("phone")),this.isTabletCheck}isDesktop(){return!this.isPhone()}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>d});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/prefix/index.js"),i=r.n(n),o=r("./node_modules/lodash/each.js"),a=r.n(o),l=r("./node_modules/lodash/map.js"),u=r.n(l),c=r("./app/classes/AsyncLoad.js");class d{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,preloaders:"[data-src]"},this.id=r,this.transformPrefix=i()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.createPreloader()}createPreloader(){this.preloaders=u()(this.elements.preloaders,(e=>new c.default({element:e})))}show(e){return new Promise((t=>{e?this.animationIn=e:(this.animationIn=s.default.timeline(),this.animationIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1})),this.animationIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((e=>{this.removeEventListeners(),this.animationOut=s.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight)}onWheel({pixelY:e}){this.scroll.target+=e}update(){this.scroll.target=s.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}}},"./app/components/Canvas/Detail/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Program.js"),n=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./node_modules/gsap/index.js"),o=r("./app/shaders/plane-fragment.glsl"),a=r("./app/shaders/plane-vertex.glsl");class l{constructor({element:e,geometry:t,gl:r,index:s,scene:n,sizes:i}){this.element=e,this.gl=r,this.geometry=t,this.scene=n,this.index=s,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector(".detail__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:o,vertex:a,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}},cullFace:null})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left-e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.updateScale(),this.updateX(),this.updateY(e)}}},"./app/components/Canvas/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>d});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./node_modules/gsap/index.js"),l=r("./node_modules/prefix/index.js"),u=r.n(l),c=r("./app/components/Canvas/Detail/Media.js");const d=class{constructor({gl:e,scene:t,sizes:r}){this.id="collections",this.gl=e,this.scene=t,this.sizes=r,this.group=new s.Transform,this.transformPrefix=u()("transform"),this.galleryElement=document.querySelector(".detail__gallery"),this.galleryWrapperElement=document.querySelector(".detail__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".detail__media"),this.scroll={current:0,start:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGallery(){this.medias=o()(this.mediasElements,((e,t)=>new c.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.medias,(e=>e.show()))}hide(){o()(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,o()(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.height-this.medias[0].element.clientHeight}onTouchDown({x:e}){}onTouchMove({x:e}){}onTouchUp({x:e}){}onWheel({pixelY:e}){this.scroll.target-=e}update(){this.scroll.target=a.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=a.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryWrapperElement.style[this.transformPrefix]=`translateY(${this.scroll.current}px)`,o()(this.medias,(e=>{e.update(this.scroll.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/ogl/src/core/Renderer.js"),n=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/Detail/index.js");class a{constructor({template:e}){this.template=e,this.y={start:0,end:0},this.createRenderer(),this.createScene(),this.createCamera(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0,dpr:3}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createDetail(){this.detail=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(e){this.detail&&this.detail.hide()}onChangeEnd(e){"detail"===e?this.createDetail():this.detail&&this.destroyDetail(),this.template=e}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:this.gl.canvas.width/this.gl.canvas.height});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r};const s={sizes:this.sizes};this.detail&&this.detail.onResize(s)}onWheel(e){this.detail&&this.detail.onWheel(e)}update(e){this.detail&&this.detail.update(e),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js");class i extends n.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"about"!==e?(s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/lodash/each.js"),i=r.n(n),o=r("./node_modules/ogl/src/core/Texture.js"),a=r("./app/classes/Component.js");class l extends a.default{constructor({canvas:e}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=e,window.TEXTURES={};const t=document.querySelector(".preloader__text"),r=t.getAttribute("data-text");i()(r,(e=>{t.innerHTML+=`<span><span>${e}</span></span>`})),this.titleLetters=document.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){i()(window.ASSETS,(e=>{const t=new o.Texture(this.canvas.gl,{generateMipMaps:!1}),r=new window.Image;r.crossOrigin="anonymous",r.src=e,r.onload=e=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(){this.length++;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=s.default.timeline({delay:1}),this.animateOut.to(this.titleLetters,{duration:1.5,ease:"expo.out",x:"-100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",y:"150%"},"-=1.5"),this.animateOut.to(this.element,{autoAlpha:0,duration:1},"-=0.5"),this.animateOut.call((e=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/normalize-wheel/index.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/classes/Detection.js"),l=r("./app/components/Canvas/index.js"),u=r("./app/components/Preloader.js"),c=r("./app/components/Navigation.js"),d=r("./app/pages/Home/index.js"),h=r("./app/pages/Detail/index.js"),p=r("./app/pages/About/index.js");new class{constructor(){this.createContent(),a.default.isDesktop()&&this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createCanvas(){console.log("canvas create"),this.canvas=new l.default({template:this.template})}createPreloader(){this.preloader=new u.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createNavigation(){this.navigation=new c.default({template:this.template})}createPages(){this.pages={home:new d.default,detail:new h.default,about:new p.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template,e),await this.page.hide();const r=await window.fetch(e);if(200===r.status){const s=await r.text(),n=document.createElement("div");t&&window.history.pushState({},"",e),n.innerHTML=s;const i=n.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=i.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.error(`response status: ${r.status}`)}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((e=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onWheel(e){const t=n()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");o()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange({url:r})}}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"about",element:".about"})}}},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"detail",element:".detail",elements:{wrapper:".detail__gallery__wrapper"}})}}},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"home",element:".home",elements:{wrapper:".home__wrapper"}})}}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],s=e.replace(/\033\[(\d+)m/g,(function(e,t){var s=n[t];if(s)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===s[0]?s:'<span style="'+s+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(s+=Array(o+1).join("</span>")),s}function a(e){for(var t in n[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],n[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],n[90]="color:#"+e.darkgrey,s){var r=e[s[t]]||"000";n[t]="color:#"+r,t=parseInt(t),n[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var s in r){var n=e.hasOwnProperty(s)?e[s]:null;if(n){if("reset"===s){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[s];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");t[s]=n}else t[s]=r[s]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return n}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=n,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,s){function n(r){e.removeListener(t,i),s(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",n),r([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,r)}(e,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,s){var n,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=s?[r,o]:[o,r]:s?o.unshift(r):o.push(r),(n=l(e))>0&&o.length>n&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=c.bind(s);return n.listener=r,s.wrapFn=n,n}function h(e,t,r){var s=e._events;if(void 0===s)return[];var n=s[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):f(n,n.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),s=0;s<t;++s)r[s]=e[s];return r}function m(e,t,r,s){if("function"==typeof e.on)s.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function n(i){s.once&&e.removeEventListener(t,n),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)s(l,this,t);else{var u=l.length,c=f(l,u);for(r=0;r<u;++r)s(c[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,s,n,i,o;if(a(t),void 0===(s=this._events))return this;if(void 0===(r=s[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,n=i;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(s[e]=r[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,s;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,i=Object.keys(r);for(s=0;s<i.length;++s)"removeListener"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return h(this,e,!0)},i.prototype.rawListeners=function(e){return h(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>Ee,_createElement:()=>I,_getBBox:()=>G,checkPrefix:()=>z,default:()=>Ee});var s,n,i,o,a,l,u,c,d=r("./node_modules/gsap/gsap-core.js"),h={},p=180/Math.PI,f=Math.PI/180,m=Math.atan2,g=/([A-Z])/g,_=/(left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},j=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},A=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},T=function(e,t,r){return e.style[t]=r},S=function(e,t,r){return e.style.setProperty(t,r)},M=function(e,t,r){return e._gsap[t]=r},k=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},C=function(e,t,r,s,n){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(n,i)},q=function(e,t,r,s,n){var i=e._gsap;i[t]=r,i.renderTransform(n,i)},O="transform",L=O+"Origin",D=function(e,t){var r=this,s=this.target,n=s.style;if(e in h){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=y[e]||e).indexOf(",")?e.split(",").forEach((function(e){return r.tfm[e]=Q(s,e)})):this.tfm[e]=s._gsap.x?s._gsap[e]:Q(s,e)),this.props.indexOf(O)>=0)return;s._gsap.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(L,t,"")),e=O}(n||t)&&this.props.push(e,t,n[e])},R=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},P=function(){var e,t,r=this.props,s=this.target,n=s.style,i=s._gsap;for(e=0;e<r.length;e+=3)r[e+1]?s[r[e]]=r[e+2]:r[e+2]?n[r[e]]=r[e+2]:n.removeProperty(r[e].replace(g,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),s.setAttribute("data-svg-origin",this.svgo||"")),!(e=u())||e.isStart||n[O]||(R(n),i.uncache=1)}},F=function(e,t){var r={target:e,props:[],revert:P,save:D};return t&&t.split(",").forEach((function(e){return r.save(e)})),r},I=function(e,t){var r=n.createElementNS?n.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):n.createElement(e);return r.style?r:n.createElement(e)},U=function e(t,r,s){var n=getComputedStyle(t);return n[r]||n.getPropertyValue(r.replace(g,"-$1").toLowerCase())||n.getPropertyValue(r)||!s&&e(t,z(r)||r,1)||""},N="O,Moz,ms,Ms,Webkit".split(","),z=function(e,t,r){var s=(t||a).style,n=5;if(e in s&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);n--&&!(N[n]+e in s););return n<0?null:(3===n?"ms":n>=0?N[n]:"")+e},B=function(){"undefined"!=typeof window&&window.document&&(s=window,n=s.document,i=n.documentElement,a=I("div")||{style:{}},I("div"),O=z(O),L=O+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",c=!!z("perspective"),u=d.gsap.core.reverting,o=1)},V=function e(t){var r,s=I("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(s),s.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(o?n.insertBefore(this,o):n.appendChild(this)),i.removeChild(s),this.style.cssText=a,r},H=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},G=function(e){var t;try{t=e.getBBox()}catch(r){t=V.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===V||(t=V.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+H(e,["x","cx","x1"])||0,y:+H(e,["y","cy","y1"])||0,width:0,height:0}},Y=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!G(e))},W=function(e,t){if(t){var r=e.style;t in h&&t!==L&&(t=O),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(g,"-$1").toLowerCase())):r.removeAttribute(t)}},X=function(e,t,r,s,n,i){var o=new d.PropTween(e._pt,t,r,0,1,i?A:E);return e._pt=o,o.b=s,o.e=n,e._props.push(r),o},Z={deg:1,rad:1,turn:1},K={grid:1,flex:1},$=function e(t,r,s,i){var o,l,u,c,p=parseFloat(s)||0,f=(s+"").trim().substr((p+"").length)||"px",m=a.style,g=_.test(r),v="svg"===t.tagName.toLowerCase(),y=(v?"client":"offset")+(g?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===f||!p||Z[i]||Z[f]?p:("px"!==f&&!w&&(p=e(t,r,s,"px")),c=t.getCTM&&Y(t),!x&&"%"!==f||!h[r]&&!~r.indexOf("adius")?(m[g?"width":"height"]=b+(w?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!v?t:t.parentNode,c&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(u=l._gsap)&&x&&u.width&&g&&u.time===d._ticker.time&&!u.uncache?(0,d._round)(p/u.width*b):((x||"%"===f)&&!K[U(l,"display")]&&(m.position=U(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",g&&x&&((u=(0,d._getCache)(l)).time=d._ticker.time,u.width=l[y]),(0,d._round)(w?o*p/b:o&&p?b/o*p:0))):(o=c?t.getBBox()[g?"width":"height"]:t[y],(0,d._round)(x?p/o*b:p/100*o)))},Q=function(e,t,r,s){var n;return o||B(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),h[t]&&"transform"!==t?(n=ue(e,s),n="transformOrigin"!==t?n[t]:n.svg?n.origin:ce(U(e,L))+" "+n.zOrigin+"px"):(!(n=e.style[t])||"auto"===n||s||~(n+"").indexOf("calc("))&&(n=re[t]&&re[t](e,t,r)||U(e,t)||(0,d._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(n+"").trim().indexOf(" ")?$(e,t,n,r)+r:n},J=function(e,t,r,s){if(!r||"none"===r){var n=z(t,e,1),i=n&&U(e,n,1);i&&i!==r?(t=n,r=i):"borderColor"===t&&(r=U(e,"borderTopColor"))}var o,a,l,u,c,h,p,f,m,g,_,v=new d.PropTween(this._pt,e.style,t,0,1,d._renderComplexString),y=0,b=0;if(v.b=r,v.e=s,r+="","auto"===(s+="")&&(e.style[t]=s,s=U(e,t)||s,e.style[t]=r),o=[r,s],(0,d._colorStringFilter)(o),s=o[1],l=(r=o[0]).match(d._numWithUnitExp)||[],(s.match(d._numWithUnitExp)||[]).length){for(;a=d._numWithUnitExp.exec(s);)p=a[0],m=s.substring(y,a.index),c?c=(c+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(c=1),p!==(h=l[b++]||"")&&(u=parseFloat(h)||0,_=h.substr((u+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(u,p)+_),f=parseFloat(p),g=p.substr((f+"").length),y=d._numWithUnitExp.lastIndex-g.length,g||(g=g||d._config.units[t]||_,y===s.length&&(s+=g,v.e+=g)),_!==g&&(u=$(e,t,h,g)||0),v._pt={_next:v._pt,p:m||1===b?m:",",s:u,c:f-u,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=y<s.length?s.substring(y,s.length):""}else v.r="display"===t&&"none"===s?A:E;return d._relExp.test(s)&&(v.e=0),this._pt=v,v},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,s,n,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",s=1;else for(n=(a=a.split(",")).length;--n>-1;)r=a[n],h[r]&&(s=1,r="transformOrigin"===r?L:O),W(i,r);s&&(W(i,O),l&&(l.svg&&i.removeAttribute("transform"),ue(i,1),l.uncache=1,R(o)))}},re={clearProps:function(e,t,r,s,n){if("isFromStart"!==n.data){var i=e._pt=new d.PropTween(e._pt,t,r,0,0,te);return i.u=s,i.pr=-10,i.tween=n,e._props.push(r),1}}},se=[1,0,0,1,0,0],ne={},ie=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},oe=function(e){var t=U(e,O);return ie(t)?se:t.substr(7).match(d._numExp).map(d._round)},ae=function(e,t){var r,s,n,o,a=e._gsap||(0,d._getCache)(e),l=e.style,u=oe(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=e.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?se:u:(u!==se||e.offsetParent||e===i||a.svg||(n=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,s=e.nextElementSibling,i.appendChild(e)),u=oe(e),n?l.display=n:W(e,"display"),o&&(s?r.insertBefore(e,s):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},le=function(e,t,r,s,n,i){var o,a,l,u=e._gsap,c=n||ae(e,!0),d=u.xOrigin||0,h=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,m=c[0],g=c[1],_=c[2],v=c[3],y=c[4],b=c[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?c!==se&&(a=m*v-g*_)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(v/a)+j*(-_/a)+(_*b-v*y)/a,j=l):(x=(o=G(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),s||!1!==s&&u.smooth?(y=x-d,b=j-h,u.xOffset=p+(y*m+b*_)-y,u.yOffset=f+(y*g+b*v)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!s,u.origin=t,u.originIsAbsolute=!!r,e.style[L]="0px 0px",i&&(X(i,u,"xOrigin",d,x),X(i,u,"yOrigin",h,j),X(i,u,"xOffset",p,u.xOffset),X(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},ue=function(e,t){var r=e._gsap||new d.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var s,n,i,o,a,l,u,h,g,_,v,y,b,w,x,j,E,A,T,S,M,k,C,q,D,R,P,F,I,N,z,B,V=e.style,H=r.scaleX<0,G="px",W="deg",X=getComputedStyle(e),Z=U(e,L)||"0";return s=n=i=l=u=h=g=_=v=0,o=a=1,r.svg=!(!e.getCTM||!Y(e)),X.translate&&("none"===X.translate&&"none"===X.scale&&"none"===X.rotate||(V[O]=("none"!==X.translate?"translate3d("+(X.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==X.rotate?"rotate("+X.rotate+") ":"")+("none"!==X.scale?"scale("+X.scale.split(" ").join(",")+") ":"")+("none"!==X[O]?X[O]:"")),V.scale=V.rotate=V.translate="none"),w=ae(e,r.svg),r.svg&&(r.uncache?(D=e.getBBox(),Z=r.xOrigin-D.x+"px "+(r.yOrigin-D.y)+"px",q=""):q=!t&&e.getAttribute("data-svg-origin"),le(e,q||Z,!!q||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==se&&(A=w[0],T=w[1],S=w[2],M=w[3],s=k=w[4],n=C=w[5],6===w.length?(o=Math.sqrt(A*A+T*T),a=Math.sqrt(M*M+S*S),l=A||T?m(T,A)*p:0,(g=S||M?m(S,M)*p+l:0)&&(a*=Math.abs(Math.cos(g*f))),r.svg&&(s-=y-(y*A+b*S),n-=b-(y*T+b*M))):(B=w[6],N=w[7],P=w[8],F=w[9],I=w[10],z=w[11],s=w[12],n=w[13],i=w[14],u=(x=m(B,I))*p,x&&(q=k*(j=Math.cos(-x))+P*(E=Math.sin(-x)),D=C*j+F*E,R=B*j+I*E,P=k*-E+P*j,F=C*-E+F*j,I=B*-E+I*j,z=N*-E+z*j,k=q,C=D,B=R),h=(x=m(-S,I))*p,x&&(j=Math.cos(-x),z=M*(E=Math.sin(-x))+z*j,A=q=A*j-P*E,T=D=T*j-F*E,S=R=S*j-I*E),l=(x=m(T,A))*p,x&&(q=A*(j=Math.cos(x))+T*(E=Math.sin(x)),D=k*j+C*E,T=T*j-A*E,C=C*j-k*E,A=q,k=D),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,h=180-h),o=(0,d._round)(Math.sqrt(A*A+T*T+S*S)),a=(0,d._round)(Math.sqrt(C*C+B*B)),x=m(k,C),g=Math.abs(x)>2e-4?x*p:0,v=z?1/(z<0?-z:z):0),r.svg&&(q=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!ie(U(e,O)),q&&e.setAttribute("transform",q))),Math.abs(g)>90&&Math.abs(g)<270&&(H?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||r.uncache,r.x=s-((r.xPercent=s&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-s)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+G,r.y=n-((r.yPercent=n&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-n)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+G,r.z=i+G,r.scaleX=(0,d._round)(o),r.scaleY=(0,d._round)(a),r.rotation=(0,d._round)(l)+W,r.rotationX=(0,d._round)(u)+W,r.rotationY=(0,d._round)(h)+W,r.skewX=g+W,r.skewY=_+W,r.transformPerspective=v+G,(r.zOrigin=parseFloat(Z.split(" ")[2])||0)&&(V[L]=ce(Z)),r.xOffset=r.yOffset=0,r.force3D=d._config.force3D,r.renderTransform=r.svg?_e:c?ge:he,r.uncache=0,r},ce=function(e){return(e=e.split(" "))[0]+" "+e[1]},de=function(e,t,r){var s=(0,d.getUnit)(t);return(0,d._round)(parseFloat(t)+parseFloat($(e,"x",r+"px",s)))+s},he=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ge(e,t)},pe="0deg",fe="0px",me=") ",ge=function(e,t){var r=t||this,s=r.xPercent,n=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,d=r.skewX,h=r.skewY,p=r.scaleX,m=r.scaleY,g=r.transformPerspective,_=r.force3D,v=r.target,y=r.zOrigin,b="",w="auto"===_&&e&&1!==e||!0===_;if(y&&(c!==pe||u!==pe)){var x,j=parseFloat(u)*f,E=Math.sin(j),A=Math.cos(j);j=parseFloat(c)*f,x=Math.cos(j),i=de(v,i,E*x*-y),o=de(v,o,-Math.sin(j)*-y),a=de(v,a,A*x*-y+y)}g!==fe&&(b+="perspective("+g+me),(s||n)&&(b+="translate("+s+"%, "+n+"%) "),(w||i!==fe||o!==fe||a!==fe)&&(b+=a!==fe||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+me),l!==pe&&(b+="rotate("+l+me),u!==pe&&(b+="rotateY("+u+me),c!==pe&&(b+="rotateX("+c+me),d===pe&&h===pe||(b+="skew("+d+", "+h+me),1===p&&1===m||(b+="scale("+p+", "+m+me),v.style[O]=b||"translate(0, 0)"},_e=function(e,t){var r,s,n,i,o,a=t||this,l=a.xPercent,u=a.yPercent,c=a.x,h=a.y,p=a.rotation,m=a.skewX,g=a.skewY,_=a.scaleX,v=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,A=parseFloat(c),T=parseFloat(h);p=parseFloat(p),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),p+=g),p||m?(p*=f,m*=f,r=Math.cos(p)*_,s=Math.sin(p)*_,n=Math.sin(p-m)*-v,i=Math.cos(p-m)*v,m&&(g*=f,o=Math.tan(m-g),n*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),s*=o)),r=(0,d._round)(r),s=(0,d._round)(s),n=(0,d._round)(n),i=(0,d._round)(i)):(r=_,i=v,s=n=0),(A&&!~(c+"").indexOf("px")||T&&!~(h+"").indexOf("px"))&&(A=$(y,"x",c,"px"),T=$(y,"y",h,"px")),(b||w||x||j)&&(A=(0,d._round)(A+b-(b*r+w*n)+x),T=(0,d._round)(T+w-(b*s+w*i)+j)),(l||u)&&(o=y.getBBox(),A=(0,d._round)(A+l/100*o.width),T=(0,d._round)(T+u/100*o.height)),o="matrix("+r+","+s+","+n+","+i+","+A+","+T+")",y.setAttribute("transform",o),E&&(y.style[O]=o)},ve=function(e,t,r,s,n){var i,o,a=360,l=(0,d._isString)(n),u=parseFloat(n)*(l&&~n.indexOf("rad")?p:1)-s,c=s+u+"deg";return l&&("short"===(i=n.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===i&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===i&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),e._pt=o=new d.PropTween(e._pt,t,r,s,u,w),o.e=c,o.u="deg",e._props.push(r),o},ye=function(e,t){for(var r in t)e[r]=t[r];return e},be=function(e,t,r){var s,n,i,o,a,l,u,c=ye({},r._gsap),p=r.style;for(n in c.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[O]=t,s=ue(r,1),W(r,O),r.setAttribute("transform",i)):(i=getComputedStyle(r)[O],p[O]=t,s=ue(r,1),p[O]=i),h)(i=c[n])!==(o=s[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=(0,d.getUnit)(i)!==(u=(0,d.getUnit)(o))?$(r,n,i,u):parseFloat(i),l=parseFloat(o),e._pt=new d.PropTween(e._pt,s,n,a,l-a,b),e._pt.u=u||0,e._props.push(n));ye(s,c)};(0,d._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",s="Right",n="Bottom",i="Left",o=(t<3?[r,s,n,i]:[r+i,r+s,n+s,n+i]).map((function(r){return t<2?e+r:"border"+r+e}));re[t>1?"border"+e:e]=function(e,t,r,s,n){var i,a;if(arguments.length<4)return i=o.map((function(t){return Q(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(s+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,n)}}));var we,xe,je,Ee={name:"css",register:B,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,s,n){var i,a,l,u,c,p,f,m,g,_,w,E,A,T,S,M,k,C,q,D,R=this._props,P=e.style,I=r.vars.startAt;for(f in o||B(),this.styles=this.styles||F(e),M=this.styles.props,this.tween=r,t)if("autoRound"!==f&&(a=t[f],!d._plugins[f]||!(0,d._checkPlugin)(f,t,r,s,e,n)))if(c=typeof a,p=re[f],"function"===c&&(c=typeof(a=a.call(r,s,e,n))),"string"===c&&~a.indexOf("random(")&&(a=(0,d._replaceRandom)(a)),p)p(this,e,f,a,r)&&(S=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",d._colorExp.lastIndex=0,d._colorExp.test(i)||(m=(0,d.getUnit)(i),g=(0,d.getUnit)(a)),g?m!==g&&(i=$(e,f,i,g)+g):m&&(a+=m),this.add(P,"setProperty",i,a,s,n,0,0,f),R.push(f),M.push(f,0,P[f]);else if("undefined"!==c){if(I&&f in I?(i="function"==typeof I[f]?I[f].call(r,s,e,n):I[f],(0,d._isString)(i)&&~i.indexOf("random(")&&(i=(0,d._replaceRandom)(i)),(0,d.getUnit)(i+"")||(i+=d._config.units[f]||(0,d.getUnit)(Q(e,f))||""),"="===(i+"").charAt(1)&&(i=Q(e,f))):i=Q(e,f),u=parseFloat(i),(_="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in y&&("autoAlpha"===f&&(1===u&&"hidden"===Q(e,"visibility")&&l&&(u=0),M.push("visibility",0,P.visibility),X(this,P,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=y[f]).indexOf(",")&&(f=f.split(",")[0])),w=f in h)if(this.styles.save(f),E||((A=e._gsap).renderTransform&&!t.parseTransform||ue(e,t.parseTransform),T=!1!==t.smoothOrigin&&A.smooth,(E=this._pt=new d.PropTween(this._pt,P,O,0,1,A.renderTransform,A,0,-1)).dep=1),"scale"===f)this._pt=new d.PropTween(this._pt,A,"scaleY",u,(_?(0,d._parseRelative)(u,_+l):l)-u||0,b),this._pt.u=0,R.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M.push(L,0,P[L]),C=void 0,q=void 0,D=void 0,C=(k=a).split(" "),q=C[0],D=C[1]||"50%","top"!==q&&"bottom"!==q&&"left"!==D&&"right"!==D||(k=q,q=D,D=k),C[0]=ee[q]||q,C[1]=ee[D]||D,a=C.join(" "),A.svg?le(e,a,0,T,0,this):((g=parseFloat(a.split(" ")[2])||0)!==A.zOrigin&&X(this,A,"zOrigin",A.zOrigin,g),X(this,P,f,ce(i),ce(a)));continue}if("svgOrigin"===f){le(e,a,1,T,0,this);continue}if(f in ne){ve(this,A,f,u,_?(0,d._parseRelative)(u,_+a):a);continue}if("smoothOrigin"===f){X(this,A,"smooth",A.smooth,a);continue}if("force3D"===f){A[f]=a;continue}if("transform"===f){be(this,a,e);continue}}else f in P||(f=z(f)||f);if(w||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in P)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,d.getUnit)(a)||(f in d._config.units?d._config.units[f]:m))&&(u=$(e,f,i,g)),this._pt=new d.PropTween(this._pt,w?A:P,f,u,(_?(0,d._parseRelative)(u,_+l):l)-u,w||"px"!==g&&"zIndex"!==f||!1===t.autoRound?b:j),this._pt.u=g||0,m!==g&&"%"!==g&&(this._pt.b=i,this._pt.r=x);else if(f in P)J.call(this,e,f,i,_?_+a:a);else{if(!(f in e)){(0,d._missingPlugin)(f,a);continue}this.add(e,f,i||e[f],_?_+a:a,s,n)}w||(f in P?M.push(f,0,P[f]):M.push(f,1,i||e[f])),R.push(f)}S&&(0,d._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!u())for(var r=t._pt;r;)r.r(e,r.d),r=r._next;else t.styles.revert()},get:Q,aliases:y,getSetter:function(e,t,r){var s=y[t];return s&&s.indexOf(",")<0&&(t=s),t in h&&t!==L&&(e._gsap.x||Q(e,"x"))?r&&l===r?"scale"===t?k:M:(l=r||{})&&("scale"===t?C:q):e.style&&!(0,d._isUndefined)(e.style[t])?T:~t.indexOf("-")?S:(0,d._getSetter)(e,t)},core:{_removeProperty:W,_getMatrix:ae}};d.gsap.utils.checkPrefix=z,d.gsap.core.getStyleSaver=F,we="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",je=(0,d._forEachName)(we+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){h[e]=1})),(0,d._forEachName)(xe,(function(e){d._config.units[e]="deg",ne[e]=1})),y[je[13]]=we+","+xe,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=je[t[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){d._config.units[e]="px"})),d.gsap.registerPlugin(Ee)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{Animation:()=>Wt,Back:()=>Hr,Bounce:()=>Yr,Circ:()=>Zr,Cubic:()=>Ur,Elastic:()=>Vr,Expo:()=>Xr,GSCache:()=>Yt,Linear:()=>Fr,Power0:()=>Or,Power1:()=>Lr,Power2:()=>Dr,Power3:()=>Rr,Power4:()=>Pr,PropTween:()=>yr,Quad:()=>Ir,Quart:()=>Nr,Quint:()=>zr,Sine:()=>Wr,SteppedEase:()=>Gr,Strong:()=>Br,Timeline:()=>Xt,TimelineLite:()=>Xt,TimelineMax:()=>Xt,Tween:()=>ir,TweenLite:()=>ir,TweenMax:()=>ir,_checkPlugin:()=>Jt,_colorExp:()=>Ct,_colorStringFilter:()=>Ot,_config:()=>b,_forEachName:()=>fe,_getCache:()=>he,_getProperty:()=>pe,_getSetter:()=>cr,_isString:()=>C,_isUndefined:()=>L,_missingPlugin:()=>K,_numExp:()=>z,_numWithUnitExp:()=>B,_parseRelative:()=>_e,_plugins:()=>oe,_relExp:()=>H,_removeLinkedListItem:()=>ke,_renderComplexString:()=>pr,_replaceRandom:()=>_t,_round:()=>me,_roundModifier:()=>lt,_setDefaults:()=>je,_sortPropTweensByPriority:()=>vr,_ticker:()=>Lt,clamp:()=>et,default:()=>qr,distribute:()=>at,getUnit:()=>Je,gsap:()=>qr,interpolate:()=>yt,mapRange:()=>vt,normalize:()=>pt,pipe:()=>dt,random:()=>ct,selector:()=>it,shuffle:()=>ot,snap:()=>ut,splitColor:()=>St,toArray:()=>nt,unitize:()=>ht,wrap:()=>mt,wrapYoyo:()=>gt});var i,o,a,l,u,c,d,h,p,f,m,g,_,v,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},x=1e8,j=1e-8,E=2*Math.PI,A=E/4,T=0,S=Math.sqrt,M=Math.cos,k=Math.sin,C=function(e){return"string"==typeof e},q=function(e){return"function"==typeof e},O=function(e){return"number"==typeof e},L=function(e){return void 0===e},D=function(e){return"object"==typeof e},R=function(e){return!1!==e},P=function(){return"undefined"!=typeof window},F=function(e){return q(e)||C(e)},I="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},U=Array.isArray,N=/(?:-?\.?\d|\.)+/gi,z=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,B=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,V=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,H=/[+-]=-?[.\d]+/,G=/[^,'"\[\]\s]+/gi,Y=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,W={},X={},Z=function(e){return(X=Ee(e,W))&&qr},K=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},$=function(e,t){return!t&&console.warn(e)},Q=function(e,t){return e&&(W[e]=t)&&X&&(X[e]=t)||W},J=function(){return 0},ee={suppressEvents:!0,isStart:!0,kill:!1},te={suppressEvents:!0,kill:!1},re={suppressEvents:!0},se={},ne=[],ie={},oe={},ae={},le=30,ue=[],ce="",de=function(e){var t,r,s=e[0];if(D(s)||q(s)||(e=[e]),!(t=(s._gsap||{}).harness)){for(r=ue.length;r--&&!ue[r].targetTest(s););t=ue[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Yt(e[r],t)))||e.splice(r,1);return e},he=function(e){return e._gsap||de(nt(e))[0]._gsap},pe=function(e,t,r){return(r=e[t])&&q(r)?e[t]():L(r)&&e.getAttribute&&e.getAttribute(t)||r},fe=function(e,t){return(e=e.split(",")).forEach(t)||e},me=function(e){return Math.round(1e5*e)/1e5||0},ge=function(e){return Math.round(1e7*e)/1e7||0},_e=function(e,t){var r=t.charAt(0),s=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+s:"-"===r?e-s:"*"===r?e*s:e/s},ve=function(e,t){for(var r=t.length,s=0;e.indexOf(t[s])<0&&++s<r;);return s<r},ye=function(){var e,t,r=ne.length,s=ne.slice(0);for(ie={},ne.length=0,e=0;e<r;e++)(t=s[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},be=function(e,t,r,s){ne.length&&ye(),e.render(t,r,s||o&&t<0&&(e._initted||e._startAt)),ne.length&&ye()},we=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(G).length<2?t:C(e)?e.trim():e},xe=function(e){return e},je=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Ee=function(e,t){for(var r in t)e[r]=t[r];return e},Ae=function e(t,r){for(var s in r)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(t[s]=D(r[s])?e(t[s]||(t[s]={}),r[s]):r[s]);return t},Te=function(e,t){var r,s={};for(r in e)r in t||(s[r]=e[r]);return s},Se=function(e){var t,r=e.parent||l,s=e.keyframes?(t=U(e.keyframes),function(e,r){for(var s in r)s in e||"duration"===s&&t||"ease"===s||(e[s]=r[s])}):je;if(R(e.inherit))for(;r;)s(e,r.vars.defaults),r=r.parent||r._dp;return e},Me=function(e,t,r,s,n){void 0===r&&(r="_first"),void 0===s&&(s="_last");var i,o=e[s];if(n)for(i=t[n];o&&o[n]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[s]=t,t._prev=o,t.parent=t._dp=e,t},ke=function(e,t,r,s){void 0===r&&(r="_first"),void 0===s&&(s="_last");var n=t._prev,i=t._next;n?n._next=i:e[r]===t&&(e[r]=i),i?i._prev=n:e[s]===t&&(e[s]=n),t._next=t._prev=t.parent=null},Ce=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},qe=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},Oe=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Le=function(e,t,r,s){return e._startAt&&(o?e._startAt.revert(te):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,s))},De=function e(t){return!t||t._ts&&e(t.parent)},Re=function(e){return e._repeat?Pe(e._tTime,e=e.duration()+e._rDelay)*e:0},Pe=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Fe=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ie=function(e){return e._end=ge(e._start+(e._tDur/Math.abs(e._ts||e._rts||j)||0))},Ue=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=ge(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ie(e),r._dirty||qe(r,e)),e},Ne=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=Fe(e.rawTime(),t),(!t._dur||Qe(0,t.totalDuration(),r)-t._tTime>j)&&t.render(r,!0)),qe(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},ze=function(e,t,r,s){return t.parent&&Ce(t),t._start=ge((O(r)?r:r||e!==l?Ze(e,r,t):e._time)+t._delay),t._end=ge(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Me(e,t,"_first","_last",e._sort?"_start":0),Ge(t)||(e._recent=t),s||Ne(e,t),e._ts<0&&Ue(e,e._tTime),e},Be=function(e,t){return(W.ScrollTrigger||K("scrollTrigger",t))&&W.ScrollTrigger.create(t,e)},Ve=function(e,t,r,s,n){return er(e,t,n),e._initted?!r&&e._pt&&!o&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Lt.frame?(ne.push(e),e._lazy=[n,s],1):void 0:1},He=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Ge=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Ye=function(e,t,r,s){var n=e._repeat,i=ge(t)||0,o=e._tTime/e._tDur;return o&&!s&&(e._time*=i/e._dur),e._dur=i,e._tDur=n?n<0?1e10:ge(i*(n+1)+e._rDelay*n):i,o>0&&!s&&Ue(e,e._tTime=e._tDur*o),e.parent&&Ie(e),r||qe(e.parent,e),e},We=function(e){return e instanceof Xt?qe(e):Ye(e,e._dur)},Xe={_start:0,endTime:J,totalDuration:J},Ze=function e(t,r,s){var n,i,o,a=t.labels,l=t._recent||Xe,u=t.duration()>=x?l.endTime(!1):t._dur;return C(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),n=r.indexOf("="),"<"===i||">"===i?(n>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(n<0?l:s).totalDuration()/100:1)):n<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(n-1)+r.substr(n+1)),o&&s&&(i=i/100*(U(s)?s[0]:s).totalDuration()),n>1?e(t,r.substr(0,n-1),s)+i:u+i)):null==r?u:+r},Ke=function(e,t,r){var s,n,i=O(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(s=a,n=r;n&&!("immediateRender"in s);)s=n.vars.defaults||{},n=R(n.vars.inherit)&&n.parent;a.immediateRender=R(s.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new ir(t[0],a,t[o+1])},$e=function(e,t){return e||0===e?t(e):t},Qe=function(e,t,r){return r<e?e:r>t?t:r},Je=function(e,t){return C(e)&&(t=Y.exec(e))?t[1]:""},et=function(e,t,r){return $e(r,(function(r){return Qe(e,t,r)}))},tt=[].slice,rt=function(e,t){return e&&D(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&D(e[0]))&&!e.nodeType&&e!==u},st=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var s;return C(e)&&!t||rt(e,1)?(s=r).push.apply(s,nt(e)):r.push(e)}))||r},nt=function(e,t,r){return a&&!t&&a.selector?a.selector(e):!C(e)||r||!c&&Dt()?U(e)?st(e,r):rt(e)?tt.call(e,0):e?[e]:[]:tt.call((t||d).querySelectorAll(e),0)},it=function(e){return e=nt(e)[0]||$("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return nt(t,r.querySelectorAll?r:r===e?$("Invalid scope")||d.createElement("div"):e)}},ot=function(e){return e.sort((function(){return.5-Math.random()}))},at=function(e){if(q(e))return e;var t=D(e)?e:{each:e},r=zt(t.ease),s=t.from||0,n=parseFloat(t.base)||0,i={},o=s>0&&s<1,a=isNaN(s)||o,l=t.axis,u=s,c=s;return C(s)?u=c={center:.5,edges:.5,end:1}[s]||0:!o&&a&&(u=s[0],c=s[1]),function(e,o,d){var h,p,f,m,g,_,v,y,b,w=(d||t).length,j=i[w];if(!j){if(!(b="auto"===t.grid?0:(t.grid||[1,x])[1])){for(v=-x;v<(v=d[b++].getBoundingClientRect().left)&&b<w;);b--}for(j=i[w]=[],h=a?Math.min(b,w)*u-.5:s%b,p=b===x?0:a?w*c/b-.5:s/b|0,v=0,y=x,_=0;_<w;_++)f=_%b-h,m=p-(_/b|0),j[_]=g=l?Math.abs("y"===l?m:f):S(f*f+m*m),g>v&&(v=g),g<y&&(y=g);"random"===s&&ot(j),j.max=v-y,j.min=y,j.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===s?-1:1),j.b=w<0?n-w:n,j.u=Je(t.amount||t.each)||0,r=r&&w<0?Ut(r):r}return w=(j[e]-j.min)/j.max||0,ge(j.b+(r?r(w):w)*j.v)+j.u}},lt=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var s=ge(Math.round(parseFloat(r)/e)*e*t);return(s-s%1)/t+(O(r)?0:Je(r))}},ut=function(e,t){var r,s,n=U(e);return!n&&D(e)&&(r=n=e.radius||x,e.values?(e=nt(e.values),(s=!O(e[0]))&&(r*=r)):e=lt(e.increment)),$e(t,n?q(e)?function(t){return s=e(t),Math.abs(s-t)<=r?s:t}:function(t){for(var n,i,o=parseFloat(s?t.x:t),a=parseFloat(s?t.y:0),l=x,u=0,c=e.length;c--;)(n=s?(n=e[c].x-o)*n+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=n,u=c);return u=!r||l<=r?e[u]:t,s||u===t||O(t)?u:u+Je(t)}:lt(e))},ct=function(e,t,r,s){return $e(U(e)?!t:!0===r?!!(r=0):!s,(function(){return U(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(s=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*s)/s}))},dt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},ht=function(e,t){return function(r){return e(parseFloat(r))+(t||Je(r))}},pt=function(e,t,r){return vt(e,t,0,1,r)},ft=function(e,t,r){return $e(r,(function(r){return e[~~t(r)]}))},mt=function e(t,r,s){var n=r-t;return U(t)?ft(t,e(0,t.length),r):$e(s,(function(e){return(n+(e-t)%n)%n+t}))},gt=function e(t,r,s){var n=r-t,i=2*n;return U(t)?ft(t,e(0,t.length-1),r):$e(s,(function(e){return t+((e=(i+(e-t)%i)%i||0)>n?i-e:e)}))},_t=function(e){for(var t,r,s,n,i=0,o="";~(t=e.indexOf("random(",i));)s=e.indexOf(")",t),n="["===e.charAt(t+7),r=e.substr(t+7,s-t-7).match(n?G:N),o+=e.substr(i,t-i)+ct(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),i=s+1;return o+e.substr(i,e.length-i)},vt=function(e,t,r,s,n){var i=t-e,o=s-r;return $e(n,(function(t){return r+((t-e)/i*o||0)}))},yt=function e(t,r,s,n){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,c,d=C(t),h={};if(!0===s&&(n=1)&&(s=null),d)t={p:t},r={p:r};else if(U(t)&&!U(r)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},s=r}else n||(t=Ee(U(t)?[]:{},t));if(!l){for(o in r)Qt.call(h,t,o,"get",r[o]);i=function(e){return fr(e,h)||(d?t.p:t)}}}return $e(s,i)},bt=function(e,t,r){var s,n,i,o=e.labels,a=x;for(s in o)(n=o[s]-t)<0==!!r&&n&&a>(n=Math.abs(n))&&(i=s,a=n);return i},wt=function(e,t,r){var s,n,i,o=e.vars,l=o[t],u=a,c=e._ctx;if(l)return s=o[t+"Params"],n=o.callbackScope||e,r&&ne.length&&ye(),c&&(a=c),i=s?l.apply(n,s):l.call(n),a=u,i},xt=function(e){return Ce(e),e.scrollTrigger&&e.scrollTrigger.kill(!!o),e.progress()<1&&wt(e,"onInterrupt"),e},jt=function(e){var t=(e=!e.name&&e.default||e).name,r=q(e),s=t&&!r&&e.init?function(){this._props=[]}:e,n={init:J,render:fr,add:Qt,kill:gr,modifier:mr,rawVars:0},i={targetTest:0,get:0,getSetter:cr,aliases:{},register:0};if(Dt(),e!==s){if(oe[t])return;je(s,je(Te(e,n),i)),Ee(s.prototype,Ee(n,Te(e,i))),oe[s.prop=t]=s,e.targetTest&&(ue.push(s),se[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Q(t,s),e.register&&e.register(qr,s,yr)},Et=255,At={aqua:[0,Et,Et],lime:[0,Et,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Et],navy:[0,0,128],white:[Et,Et,Et],olive:[128,128,0],yellow:[Et,Et,0],orange:[Et,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Et,0,0],pink:[Et,192,203],cyan:[0,Et,Et],transparent:[Et,Et,Et,0]},Tt=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Et+.5|0},St=function(e,t,r){var s,n,i,o,a,l,u,c,d,h,p=e?O(e)?[e>>16,e>>8&Et,e&Et]:0:At.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),At[e])p=At[e];else if("#"===e.charAt(0)){if(e.length<6&&(s=e.charAt(1),n=e.charAt(2),i=e.charAt(3),e="#"+s+s+n+n+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Et,p&Et,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Et,e&Et]}else if("hsl"===e.substr(0,3))if(p=h=e.match(N),t){if(~e.indexOf("="))return p=e.match(z),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,s=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Tt(o+1/3,s,n),p[1]=Tt(o,s,n),p[2]=Tt(o-1/3,s,n);else p=e.match(N)||At.transparent;p=p.map(Number)}return t&&!h&&(s=p[0]/Et,n=p[1]/Et,i=p[2]/Et,l=((u=Math.max(s,n,i))+(c=Math.min(s,n,i)))/2,u===c?o=a=0:(d=u-c,a=l>.5?d/(2-u-c):d/(u+c),o=u===s?(n-i)/d+(n<i?6:0):u===n?(i-s)/d+2:(s-n)/d+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Mt=function(e){var t=[],r=[],s=-1;return e.split(Ct).forEach((function(e){var n=e.match(B)||[];t.push.apply(t,n),r.push(s+=n.length+1)})),t.c=r,t},kt=function(e,t,r){var s,n,i,o,a="",l=(e+a).match(Ct),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=St(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Mt(e),(s=r.c).join(a)!==i.c.join(a)))for(o=(n=e.replace(Ct,"1").split(B)).length-1;c<o;c++)a+=n[c]+(~s.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!n)for(o=(n=e.split(Ct)).length-1;c<o;c++)a+=n[c]+l[c];return a+n[o]},Ct=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in At)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),qt=/hsl[a]?\(/,Ot=function(e){var t,r=e.join(" ");if(Ct.lastIndex=0,Ct.test(r))return t=qt.test(r),e[1]=kt(e[1],t),e[0]=kt(e[0],t,Mt(e[1])),!0},Lt=function(){var e,t,r,s,n,i,o=Date.now,a=500,l=33,p=o(),f=p,g=1e3/240,_=g,v=[],y=function r(u){var c,d,h,m,y=o()-f,b=!0===u;if(y>a&&(p+=y-l),((c=(h=(f+=y)-p)-_)>0||b)&&(m=++s.frame,n=h-1e3*s.time,s.time=h/=1e3,_+=c+(c>=g?4:g-c),d=1),b||(e=t(r)),d)for(i=0;i<v.length;i++)v[i](h,n,m,u)};return s={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(e){return n/(1e3/(e||60))},wake:function(){h&&(!c&&P()&&(u=c=window,d=u.document||{},W.gsap=qr,(u.gsapVersions||(u.gsapVersions=[])).push(qr.version),Z(X||u.GreenSockGlobals||!u.gsap&&u||{}),r=u.requestAnimationFrame),e&&s.sleep(),t=r||function(e){return setTimeout(e,_-1e3*s.time+1|0)},m=1,y(2))},sleep:function(){(r?u.cancelAnimationFrame:clearTimeout)(e),m=0,t=J},lagSmoothing:function(e,t){a=e||1e8,l=Math.min(t,a,0)},fps:function(e){g=1e3/(e||240),_=1e3*s.time+g},add:function(e,t,r){var n=t?function(t,r,i,o){e(t,r,i,o),s.remove(n)}:e;return s.remove(e),v[r?"unshift":"push"](n),Dt(),n},remove:function(e,t){~(t=v.indexOf(e))&&v.splice(t,1)&&i>=t&&i--},_listeners:v}}(),Dt=function(){return!m&&Lt.wake()},Rt={},Pt=/^[\d.\-M][\d.\-,\s]/,Ft=/["']/g,It=function(e){for(var t,r,s,n={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,s=r.substr(0,t),n[o]=isNaN(s)?s.replace(Ft,"").trim():+s,o=r.substr(t+1).trim();return n},Ut=function(e){return function(t){return 1-e(1-t)}},Nt=function e(t,r){for(var s,n=t._first;n;)n instanceof Xt?e(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?e(n.timeline,r):(s=n._ease,n._ease=n._yEase,n._yEase=s,n._yoyo=r)),n=n._next},zt=function(e,t){return e&&(q(e)?e:Rt[e]||function(e){var t,r,s,n,i=(e+"").split("("),o=Rt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[It(i[1])]:(t=e,r=t.indexOf("(")+1,s=t.indexOf(")"),n=t.indexOf("(",r),t.substring(r,~n&&n<s?t.indexOf(")",s+1):s)).split(",").map(we)):Rt._CE&&Pt.test(e)?Rt._CE("",e):o}(e))||t},Bt=function(e,t,r,s){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===s&&(s=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var n,i={easeIn:t,easeOut:r,easeInOut:s};return fe(e,(function(e){for(var t in Rt[e]=W[e]=i,Rt[n=e.toLowerCase()]=r,i)Rt[n+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Rt[e+"."+t]=i[t]})),i},Vt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Ht=function e(t,r,s){var n=r>=1?r:1,i=(s||(t?.3:.45))/(r<1?r:1),o=i/E*(Math.asin(1/n)||0),a=function(e){return 1===e?1:n*Math.pow(2,-10*e)*k((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Vt(a);return i=E/i,l.config=function(r,s){return e(t,r,s)},l},Gt=function e(t,r){void 0===r&&(r=1.70158);var s=function(e){return e?--e*e*((r+1)*e+r)+1:0},n="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:Vt(s);return n.config=function(r){return e(t,r)},n};fe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Bt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Rt.Linear.easeNone=Rt.none=Rt.Linear.easeIn,Bt("Elastic",Ht("in"),Ht("out"),Ht()),g=7.5625,v=1/(_=2.75),Bt("Bounce",(function(e){return 1-y(1-e)}),y=function(e){return e<v?g*e*e:e<.7272727272727273?g*Math.pow(e-1.5/_,2)+.75:e<.9090909090909092?g*(e-=2.25/_)*e+.9375:g*Math.pow(e-2.625/_,2)+.984375}),Bt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Bt("Circ",(function(e){return-(S(1-e*e)-1)})),Bt("Sine",(function(e){return 1===e?1:1-M(e*A)})),Bt("Back",Gt("in"),Gt("out"),Gt()),Rt.SteppedEase=Rt.steps=W.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,s=e+(t?0:1),n=t?1:0;return function(e){return((s*Qe(0,.99999999,e)|0)+n)*r}}},w.ease=Rt["quad.out"],fe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ce+=e+","+e+"Params,"}));var Yt=function(e,t){this.id=T++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:pe,this.set=t?t.getSetter:cr},Wt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Ye(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),m||Lt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Ye(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Dt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ue(this,e),!r._dp||r.parent||Ne(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&ze(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===j||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),be(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Re(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Re(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?Pe(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Fe(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Qe(-this._delay,this._tDur,t),!0),Ie(this),Oe(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Dt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==j&&(this._tTime-=j)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&ze(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(R(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Fe(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=re);var t=o;return o=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),o=t,this},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,We(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,We(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ze(this,e),R(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,R(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-j))},t.eventCallback=function(e,t,r){var s=this.vars;return arguments.length>1?(t?(s[e]=t,r&&(s[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete s[e],this):s[e]},t.then=function(e){var t=this;return new Promise((function(r){var s=q(e)?e:xe,n=function(){var e=t.then;t.then=null,q(s)&&(s=s(t))&&(s.then||s===t)&&(t.then=e),r(s),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?n():t._prom=n}))},t.kill=function(){xt(this)},e}();je(Wt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Xt=function(e){function t(t,r){var n;return void 0===t&&(t={}),(n=e.call(this,t)||this).labels={},n.smoothChildTiming=!!t.smoothChildTiming,n.autoRemoveChildren=!!t.autoRemoveChildren,n._sort=R(t.sortChildren),l&&ze(t.parent||l,s(n),r),t.reversed&&n.reverse(),t.paused&&n.paused(!0),t.scrollTrigger&&Be(s(n),t.scrollTrigger),n}n(t,e);var r=t.prototype;return r.to=function(e,t,r){return Ke(0,arguments,this),this},r.from=function(e,t,r){return Ke(1,arguments,this),this},r.fromTo=function(e,t,r,s){return Ke(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Se(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new ir(e,t,Ze(this,r),1),this},r.call=function(e,t,r){return ze(this,ir.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,s,n,i,o){return r.duration=t,r.stagger=r.stagger||s,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new ir(e,r,Ze(this,n)),this},r.staggerFrom=function(e,t,r,s,n,i,o){return r.runBackwards=1,Se(r).immediateRender=R(r.immediateRender),this.staggerTo(e,t,r,s,n,i,o)},r.staggerFromTo=function(e,t,r,s,n,i,o,a){return s.startAt=r,Se(s).immediateRender=R(s.immediateRender),this.staggerTo(e,t,s,n,i,o,a)},r.render=function(e,t,r){var s,n,i,a,u,c,d,h,p,f,m,g,_=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=e<=0?0:ge(e),w=this._zTime<0!=e<0&&(this._initted||!y);if(this!==l&&b>v&&e>=0&&(b=v),b!==this._tTime||r||w){if(_!==this._time&&y&&(b+=this._time-_,e+=this._time-_),s=b,p=this._start,c=!(h=this._ts),w&&(y||(_=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,u=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*u+e,t,r);if(s=ge(b%u),b===v?(a=this._repeat,s=y):((a=~~(b/u))&&a===b/u&&(s=y,a--),s>y&&(s=y)),f=Pe(this._tTime,u),!_&&this._tTime&&f!==a&&(f=a),m&&1&a&&(s=y-s,g=1),a!==f&&!this._lock){var x=m&&1&f,E=x===(m&&1&a);if(a<f&&(x=!x),_=x?0:y,this._lock=1,this.render(_||(g?0:ge(a*u)),t,!y)._lock=0,this._tTime=b,!t&&this.parent&&wt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),_&&_!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,E&&(this._lock=2,_=x?y:-1e-4,this.render(_,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;Nt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,r){var s;if(r>t)for(s=e._first;s&&s._start<=r;){if("isPause"===s.data&&s._start>t)return s;s=s._next}else for(s=e._last;s&&s._start>=r;){if("isPause"===s.data&&s._start<t)return s;s=s._prev}}(this,ge(_),ge(s)),d&&(b-=s-(s=d._start))),this._tTime=b,this._time=s,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,_=0),!_&&s&&!t&&(wt(this,"onStart"),this._tTime!==b))return this;if(s>=_&&e>=0)for(n=this._first;n;){if(i=n._next,(n._act||s>=n._start)&&n._ts&&d!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(s-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(s-n._start)*n._ts,t,r),s!==this._time||!this._ts&&!c){d=0,i&&(b+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var A=e<0?e:s;n;){if(i=n._prev,(n._act||A<=n._end)&&n._ts&&d!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(A-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(A-n._start)*n._ts,t,r||o&&(n._initted||n._startAt)),s!==this._time||!this._ts&&!c){d=0,i&&(b+=this._zTime=A?-1e-8:j);break}}n=i}}if(d&&!t&&(this.pause(),d.render(s>=_?0:-1e-8)._zTime=s>=_?1:-1,this._ts))return this._start=p,Ie(this),this.render(e,t,r);this._onUpdate&&!t&&wt(this,"onUpdate",!0),(b===v&&this._tTime>=this.totalDuration()||!b&&_)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((e||!y)&&(b===v&&this._ts>0||!b&&this._ts<0)&&Ce(this,1),t||e<0&&!_||!b&&!_&&v||(wt(this,b===v&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(O(t)||(t=Ze(this,t,e)),!(e instanceof Wt)){if(U(e))return e.forEach((function(e){return r.add(e,t)})),this;if(C(e))return this.addLabel(e,t);if(!q(e))return this;e=ir.delayedCall(0,e)}return this!==e?ze(this,e,t):this},r.getChildren=function(e,t,r,s){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===s&&(s=-x);for(var n=[],i=this._first;i;)i._start>=s&&(i instanceof ir?t&&n.push(i):(r&&n.push(i),e&&n.push.apply(n,i.getChildren(!0,t,r)))),i=i._next;return n},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return C(e)?this.removeLabel(e):q(e)?this.killTweensOf(e):(ke(this,e),e===this._recent&&(this._recent=this._last),qe(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ge(Lt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=Ze(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var s=ir.delayedCall(0,t||J,r);return s.data="isPause",this._hasPause=1,ze(this,s,Ze(this,e))},r.removePause=function(e){var t=this._first;for(e=Ze(this,e);t;)t._start===e&&"isPause"===t.data&&Ce(t),t=t._next},r.killTweensOf=function(e,t,r){for(var s=this.getTweensOf(e,r),n=s.length;n--;)Zt!==s[n]&&s[n].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,s=[],n=nt(e),i=this._first,o=O(t);i;)i instanceof ir?ve(i._targets,n)&&(o?(!Zt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&s.push(i):(r=i.getTweensOf(n,t)).length&&s.push.apply(s,r),i=i._next;return s},r.tweenTo=function(e,t){t=t||{};var r,s=this,n=Ze(s,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=ir.to(s,je({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale())||j,onStart:function(){if(s.pause(),!r){var e=t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale());c._dur!==e&&Ye(c,e,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,je({startAt:{time:Ze(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),bt(this,Ze(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),bt(this,Ze(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+j)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var s,n=this._first,i=this.labels;n;)n._start>=r&&(n._start+=e,n._end+=e),n=n._next;if(t)for(s in i)i[s]>=r&&(i[s]+=e);return qe(this)},r.invalidate=function(t){var r=this._first;for(this._lock=0;r;)r.invalidate(t),r=r._next;return e.prototype.invalidate.call(this,t)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),qe(this)},r.totalDuration=function(e){var t,r,s,n=0,i=this,o=i._last,a=x;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(s=i.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>a&&i._sort&&o._ts&&!i._lock?(i._lock=1,ze(i,o,r-o._delay,1)._lock=0):a=r,r<0&&o._ts&&(n-=r,(!s&&!i._dp||s&&s.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),a=0),o._end>n&&o._ts&&(n=o._end),o=t;Ye(i,i===l&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(l._ts&&(be(l,Fe(e,l)),p=Lt.frame),Lt.frame>=le){le+=b.autoSleep||120;var t=l._first;if((!t||!t._ts)&&b.autoSleep&&Lt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Lt.sleep()}}},t}(Wt);je(Xt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Zt,Kt,$t=function(e,t,r,s,n,i,o){var a,l,u,c,d,h,p,f,m=new yr(this._pt,e,t,0,1,pr,null,n),g=0,_=0;for(m.b=r,m.e=s,r+="",(p=~(s+="").indexOf("random("))&&(s=_t(s)),i&&(i(f=[r,s],e,t),r=f[0],s=f[1]),l=r.match(V)||[];a=V.exec(s);)c=a[0],d=s.substring(g,a.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==l[_++]&&(h=parseFloat(l[_-1])||0,m._pt={_next:m._pt,p:d||1===_?d:",",s:h,c:"="===c.charAt(1)?_e(h,c)-h:parseFloat(c)-h,m:u&&u<4?Math.round:0},g=V.lastIndex);return m.c=g<s.length?s.substring(g,s.length):"",m.fp=o,(H.test(s)||p)&&(m.e=0),this._pt=m,m},Qt=function(e,t,r,s,n,i,o,a,l,u){q(s)&&(s=s(n||0,e,i));var c,d=e[t],h="get"!==r?r:q(d)?l?e[t.indexOf("set")||!q(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():d,p=q(d)?l?lr:ar:or;if(C(s)&&(~s.indexOf("random(")&&(s=_t(s)),"="===s.charAt(1)&&((c=_e(h,s)+(Je(h)||0))||0===c)&&(s=c)),!u||h!==s||Kt)return isNaN(h*s)||""===s?(!d&&!(t in e)&&K(t,s),$t.call(this,e,t,h,s,p,a||b.stringFilter,l)):(c=new yr(this._pt,e,t,+h||0,s-(h||0),"boolean"==typeof d?hr:dr,0,p),l&&(c.fp=l),o&&c.modifier(o,this,e),this._pt=c)},Jt=function(e,t,r,s,n,i){var o,a,l,u;if(oe[e]&&!1!==(o=new oe[e]).init(n,o.rawVars?t[e]:function(e,t,r,s,n){if(q(e)&&(e=rr(e,n,t,r,s)),!D(e)||e.style&&e.nodeType||U(e)||I(e))return C(e)?rr(e,n,t,r,s):e;var i,o={};for(i in e)o[i]=rr(e[i],n,t,r,s);return o}(t[e],s,n,i,r),r,s,i)&&(r._pt=a=new yr(r._pt,n,e,0,1,o.render,o,0,o.priority),r!==f))for(l=r._ptLookup[r._targets.indexOf(n)],u=o._props.length;u--;)l[o._props[u]]=a;return o},er=function e(t,r,s){var n,a,u,c,d,h,p,f,m,g,_,v,y,b=t.vars,E=b.ease,A=b.startAt,T=b.immediateRender,S=b.lazy,M=b.onUpdate,k=b.onUpdateParams,C=b.callbackScope,q=b.runBackwards,O=b.yoyoEase,L=b.keyframes,D=b.autoRevert,P=t._dur,F=t._startAt,I=t._targets,U=t.parent,N=U&&"nested"===U.data?U.vars.targets:I,z="auto"===t._overwrite&&!i,B=t.timeline;if(B&&(!L||!E)&&(E="none"),t._ease=zt(E,w.ease),t._yEase=O?Ut(zt(!0===O?E:O,w.ease)):0,O&&t._yoyo&&!t._repeat&&(O=t._yEase,t._yEase=t._ease,t._ease=O),t._from=!B&&!!b.runBackwards,!B||L&&!b.stagger){if(v=(f=I[0]?he(I[0]).harness:0)&&b[f.prop],n=Te(b,se),F&&(F._zTime<0&&F.progress(1),r<0&&q&&T&&!D?F.render(-1,!0):F.revert(q&&P?te:ee),F._lazy=0),A){if(Ce(t._startAt=ir.set(I,je({data:"isStart",overwrite:!1,parent:U,immediateRender:!0,lazy:R(S),startAt:null,delay:0,onUpdate:M,onUpdateParams:k,callbackScope:C,stagger:0},A))),t._startAt._dp=0,r<0&&(o||!T&&!D)&&t._startAt.revert(te),T&&P&&r<=0&&s<=0)return void(r&&(t._zTime=r))}else if(q&&P&&!F)if(r&&(T=!1),u=je({overwrite:!1,data:"isFromStart",lazy:T&&R(S),immediateRender:T,stagger:0,parent:U},n),v&&(u[f.prop]=v),Ce(t._startAt=ir.set(I,u)),t._startAt._dp=0,r<0&&(o?t._startAt.revert(te):t._startAt.render(-1,!0)),t._zTime=r,T){if(!r)return}else e(t._startAt,j,j);for(t._pt=t._ptCache=0,S=P&&R(S)||S&&!P,a=0;a<I.length;a++){if(p=(d=I[a])._gsap||de(I)[a]._gsap,t._ptLookup[a]=g={},ie[p.id]&&ne.length&&ye(),_=N===I?a:N.indexOf(d),f&&!1!==(m=new f).init(d,v||n,t,_,N)&&(t._pt=c=new yr(t._pt,d,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(e){g[e]=c})),m.priority&&(h=1)),!f||v)for(u in n)oe[u]&&(m=Jt(u,n,t,_,d,N))?m.priority&&(h=1):g[u]=c=Qt.call(t,d,u,"get",n[u],_,N,0,b.stringFilter);t._op&&t._op[a]&&t.kill(d,t._op[a]),z&&t._pt&&(Zt=t,l.killTweensOf(d,g,t.globalTime(r)),y=!t.parent,Zt=0),t._pt&&S&&(ie[p.id]=1)}h&&vr(t),t._onInit&&t._onInit(t)}t._onUpdate=M,t._initted=(!t._op||t._pt)&&!y,L&&r<=0&&B.render(x,!0,!0)},tr=function(e,t,r,s){var n,i,o=t.ease||s||"power1.inOut";if(U(t))i=r[e]||(r[e]=[]),t.forEach((function(e,r){return i.push({t:r/(t.length-1)*100,v:e,e:o})}));else for(n in t)i=r[n]||(r[n]=[]),"ease"===n||i.push({t:parseFloat(e),v:t[n],e:o})},rr=function(e,t,r,s,n){return q(e)?e.call(t,r,s,n):C(e)&&~e.indexOf("random(")?_t(e):e},sr=ce+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",nr={};fe(sr+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return nr[e]=1}));var ir=function(e){function t(t,r,n,o){var a;"number"==typeof r&&(n.duration=r,r=n,n=null);var u,c,d,h,p,f,m,g,_=(a=e.call(this,o?r:Se(r))||this).vars,v=_.duration,y=_.delay,w=_.immediateRender,x=_.stagger,j=_.overwrite,E=_.keyframes,A=_.defaults,T=_.scrollTrigger,S=_.yoyoEase,M=r.parent||l,k=(U(t)||I(t)?O(t[0]):"length"in r)?[t]:nt(t);if(a._targets=k.length?de(k):$("GSAP target "+t+" not found. https://greensock.com",!b.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,E||x||F(v)||F(y)){if(r=a.vars,(u=a.timeline=new Xt({data:"nested",defaults:A||{},targets:M&&"nested"===M.data?M.vars.targets:k})).kill(),u.parent=u._dp=s(a),u._start=0,x||F(v)||F(y)){if(h=k.length,m=x&&at(x),D(x))for(p in x)~sr.indexOf(p)&&(g||(g={}),g[p]=x[p]);for(c=0;c<h;c++)(d=Te(r,nr)).stagger=0,S&&(d.yoyoEase=S),g&&Ee(d,g),f=k[c],d.duration=+rr(v,s(a),c,f,k),d.delay=(+rr(y,s(a),c,f,k)||0)-a._delay,!x&&1===h&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),u.to(f,d,m?m(c,f,k):0),u._ease=Rt.none;u.duration()?v=y=0:a.timeline=0}else if(E){Se(je(u.vars.defaults,{ease:"none"})),u._ease=zt(E.ease||r.ease||"none");var C,q,L,P=0;if(U(E))E.forEach((function(e){return u.to(k,e,">")})),u.duration();else{for(p in d={},E)"ease"===p||"easeEach"===p||tr(p,E[p],d,E.easeEach);for(p in d)for(C=d[p].sort((function(e,t){return e.t-t.t})),P=0,c=0;c<C.length;c++)(L={ease:(q=C[c]).e,duration:(q.t-(c?C[c-1].t:0))/100*v})[p]=q.v,u.to(k,L,P),P+=L.duration;u.duration()<v&&u.to({},{duration:v-u.duration()})}}v||a.duration(v=u.duration())}else a.timeline=0;return!0!==j||i||(Zt=s(a),l.killTweensOf(k),Zt=0),ze(M,s(a),n),r.reversed&&a.reverse(),r.paused&&a.paused(!0),(w||!v&&!E&&a._start===ge(M._time)&&R(w)&&De(s(a))&&"nested"!==M.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),T&&Be(s(a),T),a}n(t,e);var r=t.prototype;return r.render=function(e,t,r){var s,n,i,a,l,u,c,d,h,p=this._time,f=this._tDur,m=this._dur,g=e<0,_=e>f-j&&!g?f:e<j?0:e;if(m){if(_!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(s=_,d=this.timeline,this._repeat){if(a=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,r);if(s=ge(_%a),_===f?(i=this._repeat,s=m):((i=~~(_/a))&&i===_/a&&(s=m,i--),s>m&&(s=m)),(u=this._yoyo&&1&i)&&(h=this._yEase,s=m-s),l=Pe(this._tTime,a),s===p&&!r&&this._initted)return this._tTime=_,this;i!==l&&(d&&this._yEase&&Nt(d,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=r=1,this.render(ge(a*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ve(this,g?e:s,r,t,_))return this._tTime=0,this;if(p!==this._time)return this;if(m!==this._dur)return this.render(e,t,r)}if(this._tTime=_,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(h||this._ease)(s/m),this._from&&(this.ratio=c=1-c),s&&!p&&!t&&(wt(this,"onStart"),this._tTime!==_))return this;for(n=this._pt;n;)n.r(c,n.d),n=n._next;d&&d.render(e<0?e:!s&&u?-1e-8:d._dur*d._ease(s/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Le(this,e,0,r),wt(this,"onUpdate")),this._repeat&&i!==l&&this.vars.onRepeat&&!t&&this.parent&&wt(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(g&&!this._onUpdate&&Le(this,e,0,!0),(e||!m)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&Ce(this,1),t||g&&!p||!(_||p||u)||(wt(this,_===f?"onComplete":"onReverseComplete",!0),this._prom&&!(_<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,s){var n,i,a,l=e.ratio,u=t<0||!t&&(!e._start&&He(e)&&(e._initted||!Ge(e))||(e._ts<0||e._dp._ts<0)&&!Ge(e))?0:1,c=e._rDelay,d=0;if(c&&e._repeat&&(d=Qe(0,e._tDur,t),i=Pe(d,c),e._yoyo&&1&i&&(u=1-u),i!==Pe(e._tTime,c)&&(l=1-u,e.vars.repeatRefresh&&e._initted&&e.invalidate())),u!==l||o||s||e._zTime===j||!t&&e._zTime){if(!e._initted&&Ve(e,t,s,r,d))return;for(a=e._zTime,e._zTime=t||(r?j:0),r||(r=t&&!a),e.ratio=u,e._from&&(u=1-u),e._time=0,e._tTime=d,n=e._pt;n;)n.r(u,n.d),n=n._next;t<0&&Le(e,t,0,!0),e._onUpdate&&!r&&wt(e,"onUpdate"),d&&e._repeat&&!r&&e.parent&&wt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===u&&(u&&Ce(e,1),r||o||(wt(e,u?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},r.resetTo=function(e,t,r,s){m||Lt.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||er(this,n),function(e,t,r,s,n,i,o){var a,l,u,c,d=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!d)for(d=e._ptCache[t]=[],u=e._ptLookup,c=e._targets.length;c--;){if((a=u[c][t])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==t&&a.fp!==t;)a=a._next;if(!a)return Kt=1,e.vars[t]="+=0",er(e,o),Kt=0,1;d.push(a)}for(c=d.length;c--;)(a=(l=d[c])._pt||l).s=!s&&0!==s||n?a.s+(s||0)+i*a.c:s,a.c=r-a.s,l.e&&(l.e=me(r)+Je(l.e)),l.b&&(l.b=a.s+Je(l.b))}(this,e,t,r,s,this._ease(n/this._dur),n)?this.resetTo(e,t,r,s):(Ue(this,0),this.parent||Me(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?xt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Zt&&!0!==Zt.vars.overwrite)._first||xt(this),this.parent&&r!==this.timeline.totalDuration()&&Ye(this,this._dur*this.timeline._tDur/r,0,1),this}var s,n,i,o,a,l,u,c=this._targets,d=e?nt(e):c,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,s=r===t.length;s&&r--&&e[r]===t[r];);return r<0}(c,d))return"all"===t&&(this._pt=0),xt(this);for(s=this._op=this._op||[],"all"!==t&&(C(t)&&(a={},fe(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,s,n,i,o=e[0]?he(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(s in r=Ee({},t),a)if(s in r)for(n=(i=a[s].split(",")).length;n--;)r[i[n]]=r[s];return r}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(a in n=h[u],"all"===t?(s[u]=t,o=n,i={}):(i=s[u]=s[u]||{},o=t),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||ke(this,l,"_pt"),delete n[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&xt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return Ke(1,arguments)},t.delayedCall=function(e,r,s,n){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:n})},t.fromTo=function(e,t,r){return Ke(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return l.killTweensOf(e,t,r)},t}(Wt);je(ir.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),fe("staggerTo,staggerFrom,staggerFromTo",(function(e){ir[e]=function(){var t=new Xt,r=tt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var or=function(e,t,r){return e[t]=r},ar=function(e,t,r){return e[t](r)},lr=function(e,t,r,s){return e[t](s.fp,r)},ur=function(e,t,r){return e.setAttribute(t,r)},cr=function(e,t){return q(e[t])?ar:L(e[t])&&e.setAttribute?ur:or},dr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},hr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},pr=function(e,t){var r=t._pt,s="";if(!e&&t.b)s=t.b;else if(1===e&&t.e)s=t.e;else{for(;r;)s=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+s,r=r._next;s+=t.c}t.set(t.t,t.p,s,t)},fr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},mr=function(e,t,r,s){for(var n,i=this._pt;i;)n=i._next,i.p===s&&i.modifier(e,t,r),i=n},gr=function(e){for(var t,r,s=this._pt;s;)r=s._next,s.p===e&&!s.op||s.op===e?ke(this,s,"_pt"):s.dep||(t=1),s=r;return!t},_r=function(e,t,r,s){s.mSet(e,t,s.m.call(s.tween,r,s.mt),s)},vr=function(e){for(var t,r,s,n,i=e._pt;i;){for(t=i._next,r=s;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:n)?i._prev._next=i:s=i,(i._next=r)?r._prev=i:n=i,i=t}e._pt=s},yr=function(){function e(e,t,r,s,n,i,o,a,l){this.t=t,this.s=s,this.c=n,this.p=r,this.r=i||dr,this.d=o||this,this.set=a||or,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=_r,this.m=e,this.mt=r,this.tween=t},e}();fe(ce+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return se[e]=1})),W.TweenMax=W.TweenLite=ir,W.TimelineLite=W.TimelineMax=Xt,l=new Xt({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Ot;var br=[],wr={},xr=[],jr=0,Er=function(e){return(wr[e]||xr).map((function(e){return e()}))},Ar=function(){var e=Date.now(),t=[];e-jr>2&&(Er("matchMediaInit"),br.forEach((function(e){var r,s,n,i,o=e.queries,a=e.conditions;for(s in o)(r=u.matchMedia(o[s]).matches)&&(n=1),r!==a[s]&&(a[s]=r,i=1);i&&(e.revert(),n&&t.push(e))})),Er("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),jr=e,Er("matchMedia"))},Tr=function(){function e(e,t){this.selector=t&&it(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,r){q(e)&&(r=t,t=e,e=q);var s=this,n=function(){var e,n=a,i=s.selector;return n&&n!==s&&n.data.push(s),r&&(s.selector=it(r)),a=s,e=t.apply(s,arguments),q(e)&&s._r.push(e),a=n,s.selector=i,s.isReverted=!1,e};return s.last=n,e===q?n(s):e?s[e]=n:n},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(r){return r instanceof e?t.push.apply(t,r.getTweens()):r instanceof ir&&!(r.parent&&"nested"===r.parent.data)&&t.push(r)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var r=this;if(e){var s=this.getTweens();this.data.forEach((function(e){"isFlip"===e.data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(e){return s.splice(s.indexOf(e),1)})))})),s.map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof Wt)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,r)})),this.isReverted=!0}else this.data.forEach((function(e){return e.kill&&e.kill()}));if(this.clear(),t){var n=br.indexOf(this);~n&&br.splice(n,1)}},t.revert=function(e){this.kill(e||{})},e}(),Sr=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,r){D(e)||(e={matches:e});var s,n,i,o=new Tr(0,r||this.scope),a=o.conditions={};for(n in this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===n?i=1:(s=u.matchMedia(e[n]))&&(br.indexOf(o)<0&&br.push(o),(a[n]=s.matches)&&(i=1),s.addListener?s.addListener(Ar):s.addEventListener("change",Ar));return i&&t(o),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Mr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return jt(e)}))},timeline:function(e){return new Xt(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,r,s){C(e)&&(e=nt(e)[0]);var n=he(e||{}).get,i=r?xe:we;return"native"===r&&(r=""),e?t?i((oe[t]&&oe[t].get||n)(e,t,r,s)):function(t,r,s){return i((oe[t]&&oe[t].get||n)(e,t,r,s))}:e},quickSetter:function(e,t,r){if((e=nt(e)).length>1){var s=e.map((function(e){return qr.quickSetter(e,t,r)})),n=s.length;return function(e){for(var t=n;t--;)s[t](e)}}e=e[0]||{};var i=oe[t],o=he(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var s=new i;f._pt=0,s.init(e,r?t+r:t,f,0,[e]),s.render(1,s),f._pt&&fr(1,f)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},quickTo:function(e,t,r){var s,n=qr.to(e,Ee(((s={})[t]="+=0.1",s.paused=!0,s),r||{})),i=function(e,r,s){return n.resetTo(t,e,r,s)};return i.tween=n,i},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=zt(e.ease,w.ease)),Ae(w,e||{})},config:function(e){return Ae(b,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,s=e.plugins,n=e.defaults,i=e.extendTimeline;(s||"").split(",").forEach((function(e){return e&&!oe[e]&&!W[e]&&$(t+" effect requires "+e+" plugin.")})),ae[t]=function(e,t,s){return r(nt(e),je(t||{},n),s)},i&&(Xt.prototype[t]=function(e,r,s){return this.add(ae[t](e,D(r)?r:(s=r)&&{},this),s)})},registerEase:function(e,t){Rt[e]=zt(t)},parseEase:function(e,t){return arguments.length?zt(e,t):Rt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,s,n=new Xt(e);for(n.smoothChildTiming=R(e.smoothChildTiming),l.remove(n),n._dp=0,n._time=n._tTime=l._time,r=l._first;r;)s=r._next,!t&&!r._dur&&r instanceof ir&&r.vars.onComplete===r._targets[0]||ze(n,r,r._start-r._delay),r=s;return ze(l,n,0),n},context:function(e,t){return e?new Tr(e,t):a},matchMedia:function(e){return new Sr(e)},matchMediaRefresh:function(){return br.forEach((function(e){var t,r,s=e.conditions;for(r in s)s[r]&&(s[r]=!1,t=1);t&&e.revert()}))||Ar()},addEventListener:function(e,t){var r=wr[e]||(wr[e]=[]);~r.indexOf(t)||r.push(t)},removeEventListener:function(e,t){var r=wr[e],s=r&&r.indexOf(t);s>=0&&r.splice(s,1)},utils:{wrap:mt,wrapYoyo:gt,distribute:at,random:ct,snap:ut,normalize:pt,getUnit:Je,clamp:et,splitColor:St,toArray:nt,selector:it,mapRange:vt,pipe:dt,unitize:ht,interpolate:yt,shuffle:ot},install:Z,effects:ae,ticker:Lt,updateRoot:Xt.updateRoot,plugins:oe,globalTimeline:l,core:{PropTween:yr,globals:Q,Tween:ir,Timeline:Xt,Animation:Wt,getCache:he,_removeLinkedListItem:ke,reverting:function(){return o},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return i=e}}};fe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Mr[e]=ir[e]})),Lt.add(Xt.updateRoot),f=Mr.to({},{duration:0});var kr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Cr=function(e,t){return{name:e,rawVars:1,init:function(e,r,s){s._onInit=function(e){var s,n;if(C(r)&&(s={},fe(r,(function(e){return s[e]=1})),r=s),t){for(n in s={},r)s[n]=t(r[n]);r=s}!function(e,t){var r,s,n,i=e._targets;for(r in t)for(s=i.length;s--;)(n=e._ptLookup[s][r])&&(n=n.d)&&(n._pt&&(n=kr(n,r)),n&&n.modifier&&n.modifier(t[r],e,i[s],r))}(e,r)}}}},qr=Mr.registerPlugin({name:"attr",init:function(e,t,r,s,n){var i,o,a;for(i in this.tween=r,t)a=e.getAttribute(i)||"",(o=this.add(e,"setAttribute",(a||0)+"",t[i],s,n,0,0,i)).op=i,o.b=a,this._props.push(i)},render:function(e,t){for(var r=t._pt;r;)o?r.set(r.t,r.p,r.b,r):r.r(e,r.d),r=r._next}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r],0,0,0,0,0,1)}},Cr("roundProps",lt),Cr("modifiers"),Cr("snap",ut))||Mr;ir.version=Xt.version=qr.version="3.11.3",h=1,P()&&Dt();var Or=Rt.Power0,Lr=Rt.Power1,Dr=Rt.Power2,Rr=Rt.Power3,Pr=Rt.Power4,Fr=Rt.Linear,Ir=Rt.Quad,Ur=Rt.Cubic,Nr=Rt.Quart,zr=Rt.Quint,Br=Rt.Strong,Vr=Rt.Elastic,Hr=Rt.Back,Gr=Rt.SteppedEase,Yr=Rt.Bounce,Wr=Rt.Sine,Xr=Rt.Expo,Zr=Rt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var s=r("./node_modules/gsap/gsap-core.js"),n=r("./node_modules/gsap/CSSPlugin.js"),i=s.gsap.registerPlugin(n.CSSPlugin)||s.gsap,o=i.core.Tween},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},s.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),o=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=s(s({},n.namedReferences),{all:n.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(c=(i=void 0===t?u:t).mode)?"specialChars":c,s=void 0===(f=i.numeric)?"decimal":f,n=i.level;if(!e)return"";var i,c,d=l[r],h=a[void 0===n?"all":n].characters,p="hexadecimal"===s;if(d.lastIndex=0,i=d.exec(e)){c="";var f=0;do{f!==i.index&&(c+=e.substring(f,i.index));var m=h[n=i[0]];if(!m){var g=n.length>1?o.getCodePoint(n,0):n.charCodeAt(0);m=(p?"&#x"+g.toString(16):"&#"+g)+";"}c+=m,f=i.index+n.length}while(i=d.exec(e));f!==e.length&&(c+=e.substring(f))}else c=e;return c};var c={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:d,attribute:h,body:n.bodyRegExps.xml},html4:{strict:d,attribute:h,body:n.bodyRegExps.html4},html5:{strict:d,attribute:h,body:n.bodyRegExps.html5}},f=s(s({},p),{all:p.html5}),m=String.fromCharCode,g=m(65533),_={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(s=(void 0===t?_:t).level)?"all":s;if(!e)return"";var s=e,n=(e[e.length-1],a[r].entities[e]);if(n)s=n;else if("&"===e[0]&&"#"===e[1]){var l=e[2],u="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));s=u>=1114111?g:u>65535?o.fromCodePoint(u):m(i.numericUnicodeMap[u]||u)}return s},t.decode=function(e,t){var r=void 0===t?c:t,s=r.level,n=void 0===s?"all":s,l=r.scope,u=void 0===l?"xml"===n?"strict":"body":l;if(!e)return"";var d=f[n][u],h=a[n].entities,p="attribute"===u,_="strict"===u;d.lastIndex=0;var v,y=d.exec(e);if(y){v="";var b=0;do{b!==y.index&&(v+=e.substring(b,y.index));var w=y[0],x=w,j=w[w.length-1];if(p&&"="===j)x=w;else if(_&&";"!==j)x=w;else{var E=h[w];if(E)x=E;else if("&"===w[0]&&"#"===w[1]){var A=w[2],T="x"==A||"X"==A?parseInt(w.substr(3),16):parseInt(w.substr(2));x=T>=1114111?g:T>65535?o.fromCodePoint(T):m(i.numericUnicodeMap[T]||T)}}v+=x,b=y.index+w.length}while(y=d.exec(e));b!==e.length&&(v+=e.substring(b))}else v=e;return v}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=s},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var s=r("./node_modules/lodash/_hashClear.js"),n=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_listCacheClear.js"),n=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=s},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_mapCacheClear.js"),n=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=s},"./node_modules/lodash/_Set.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=s},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js"),n=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new s;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=n,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new s(e);this.size=t.size}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Symbol;e.exports=s},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=s},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=s},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=0,i=[];++r<s;){var o=e[r];t(o,r,e)&&(i[n++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseTimes.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),c=!r&&n(e),d=!r&&!c&&o(e),h=!r&&!c&&!d&&l(e),p=r||c||d||h,f=p?s(e.length,String):[],m=f.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||d&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=Array(s);++r<s;)n[r]=t(e[r],r,e);return n}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,s=t.length,n=e.length;++r<s;)e[n+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var s=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(s(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseForOwn.js"),n=r("./node_modules/lodash/_createBaseEach.js")(s);e.exports=n},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var s=r("./node_modules/lodash/_createBaseFor.js")();e.exports=s},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseFor.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&s(e,t,n)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=s(t,e)).length;null!=e&&r<i;)e=e[n(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayPush.js"),n=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return n(e)?i:s(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?n(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return n(e)&&"[object Arguments]"==s(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqualDeep.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!n(t)&&!n(r)?t!=t&&r!=r:s(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",h="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,m,g,_){var v=l(e),y=l(t),b=v?h:a(e),w=y?h:a(t),x=(b=b==d?p:b)==p,j=(w=w==d?p:w)==p,E=b==w;if(E&&u(e)){if(!u(t))return!1;v=!0,x=!1}if(E&&!x)return _||(_=new s),v||c(e)?n(e,t,r,m,g,_):i(e,t,b,r,m,g,_);if(!(1&r)){var A=x&&f.call(e,"__wrapped__"),T=j&&f.call(t,"__wrapped__");if(A||T){var S=A?e.value():e,M=T?t.value():t;return _||(_=new s),g(S,M,r,m,_)}}return!!E&&(_||(_=new s),o(e,t,r,m,g,_))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],d=e[c],h=u[1];if(l&&u[2]){if(void 0===d&&!(c in e))return!1}else{var p=new s;if(i)var f=i(d,h,c,e,t,p);if(!(void 0===f?n(h,d,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,d=u.hasOwnProperty,h=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||n(e))&&(s(e)?h:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&n(e.length)&&!!o[s(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseMatches.js"),n=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?n(e[0],e[1]):s(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isPrototype.js"),n=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return n(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseEach.js"),n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=n(e)?Array(e.length):[];return s(e,(function(e,s,n){i[++r]=t(e,s,n)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsMatch.js"),n=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=n(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||s(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqual.js"),n=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=n(r,e);return void 0===o&&o===t?i(r,e):s(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return s(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,s=Array(e);++r<e;)s[r]=t(r);return s}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=s?s.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return n(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:s}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return s(e)?e:n(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=s},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,n){if(null==r)return r;if(!s(r))return e(r,n);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==n(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,s){for(var n=-1,i=Object(t),o=s(t),a=o.length;a--;){var l=o[e?a:++n];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var s=r("./node_modules/lodash/_SetCache.js"),n=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,c=e.length,d=t.length;if(c!=d&&!(u&&d>c))return!1;var h=l.get(e),p=l.get(t);if(h&&p)return h==t&&p==e;var f=-1,m=!0,g=2&r?new s:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var _=e[f],v=t[f];if(o)var y=u?o(v,_,f,t,e,l):o(_,v,f,e,t,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!n(t,(function(e,t){if(!i(g,t)&&(_===e||a(_,e,r,o,l)))return g.push(t)}))){m=!1;break}}else if(_!==v&&!a(_,v,r,o,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=s?s.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,s,u,d,h){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new n(e),new n(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&s;if(p||(p=l),e.size!=t.size&&!f)return!1;var m=h.get(e);if(m)return m==t;s|=2,h.set(e,t);var g=o(p(e),p(t),s,u,d,h);return h.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=s(e),c=u.length;if(c!=s(t).length&&!l)return!1;for(var d=c;d--;){var h=u[d];if(!(l?h in t:n.call(t,h)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var m=!0;a.set(e,t),a.set(t,e);for(var g=l;++d<c;){var _=e[h=u[d]],v=t[h];if(i)var y=l?i(v,_,h,t,e,a):i(_,v,h,e,t,a);if(!(void 0===y?_===v||o(_,v,r,i,a):y)){m=!1;break}g||(g="constructor"==h)}if(m&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(e),a.delete(t),m}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var s="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=s},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetAllKeys.js"),n=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return s(e,i,n)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return s(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isStrictComparable.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=n(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,s(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsNative.js"),n=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=n(e,t);return s(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,o=n.toString,a=s?s.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var s=!0}catch(e){}var n=o.call(e);return s&&(t?e[a]=r:delete e[a]),n}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayFilter.js"),n=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),s(o(e),(function(t){return i.call(e,t)})))}:n;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_DataView.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",d="[object Promise]",h="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(s),g=u(n),_=u(i),v=u(o),y=u(a),b=l;(s&&b(new s(new ArrayBuffer(1)))!=f||n&&b(new n)!=c||i&&b(i.resolve())!=d||o&&b(new o)!=h||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,s=r?u(r):"";if(s)switch(s){case m:return f;case g:return c;case _:return d;case v:return h;case y:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=s(t,e)).length,d=!1;++u<c;){var h=l(t[u]);if(!(d=null!=e&&r(e,h)))break;e=e[h]}return d||++u!=c?d:!!(c=null==e?0:e.length)&&a(c)&&o(h,c)&&(i(e)||n(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(s){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return n.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return s?void 0!==t[e]:n.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=s&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var s=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==s||"symbol"!=s&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(s(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!n(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var s,n=r("./node_modules/lodash/_coreJsData.js"),i=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var s=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!s(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=s(t,e);return!(r<0)&&(r==t.length-1?t.pop():n.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=s(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return s(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,n=s(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Hash.js"),n=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new s,map:new(i||n),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=s(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,s){r[++t]=[s,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var s=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=s(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=s},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=s},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_freeGlobal.js"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,o=i&&i.exports===n&&s.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var s=r("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=s||n||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof s){var o=r.__data__;if(!n||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=s((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(n,(function(e,r,s,n){t.push(s?n.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||s(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayEach.js"),n=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:n)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var n=null==e?void 0:s(e,t);return void 0===n?r:n}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseHasIn.js"),n=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&n(e,t,s)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsArguments.js"),n=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=s(function(){return arguments}())?s:function(e){return n(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&n(e.length)&&!s(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_root.js"),n=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?s.Buffer:void 0,l=(a?a.isBuffer:void 0)||n;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!n(e))return!1;var t=s(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||n(e)&&"[object Symbol]"==s(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsTypedArray.js"),n=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?n(o):s;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayLikeKeys.js"),n=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?s(e):n(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayMap.js"),n=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:i)(e,n(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js");function n(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var s=arguments,n=t?t.apply(this,s):s[0],i=r.cache;if(i.has(n))return i.get(n);var o=e.apply(this,s);return r.cache=i.set(n,o)||i,o};return r.cache=new(n.Cache||s),r}n.Cache=s,e.exports=n},"./node_modules/lodash/property.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseProperty.js"),n=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?s(o(e)):n(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":s(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),n=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var n=function(e,t){var r;return e=s(e),t.some((function(s){e.indexOf(t)>-1&&(r=s)})),r}(t.href,e);d(n)&&!0!==t.visited&&n&&(l(t,n),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,d=function(e){var t=n[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}n[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),n=r&&r[1];return n&&e?e.split(",").map((function(e){var r=new RegExp("".concat(n,"\\.js$"),"g");return s(t.replace(r,"".concat(e.replace(/{fileName}/g,n),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},o=50,l=0,function(){var e=this,t=arguments,s=function(){return r.apply(e,t)};clearTimeout(l),l=setTimeout(s,o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),s=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+s+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,s,n,i,o,a,l,u,c,d,h,p,f,m,g=!1;function _(){if(!g){g=!0;var e=navigator.userAgent,_=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),v=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(h=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),m=/Mobile/i.exec(e),d=!!/Win64/.exec(e),_){(t=_[1]?parseFloat(_[1]):_[5]?parseFloat(_[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);o=y?parseFloat(y[1])+4:t,r=_[2]?parseFloat(_[2]):NaN,s=_[3]?parseFloat(_[3]):NaN,(n=_[4]?parseFloat(_[4]):NaN)?(_=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=_&&_[1]?parseFloat(_[1]):NaN):i=NaN}else t=r=s=i=n=NaN;if(v){if(v[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!v[2],u=!!v[3]}else a=l=u=!1}}var v={ie:function(){return _()||t},ieCompatibilityMode:function(){return _()||o>t},ie64:function(){return v.ie()&&d},firefox:function(){return _()||r},opera:function(){return _()||s},webkit:function(){return _()||n},safari:function(){return v.webkit()},chrome:function(){return _()||i},windows:function(){return _()||l},osx:function(){return _()||a},linux:function(){return _()||u},iphone:function(){return _()||h},mobile:function(){return _()||h||p||c||m},nativeApp:function(){return _()||f},android:function(){return _()||c},ipad:function(){return _()||p}};e.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var s,n=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!n.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&s&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var s=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,s=0,n=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),s=10*t,n=10*r,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||n)&&e.deltaMode&&(1==e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!r&&(r=n<1?-1:1),{spinX:t,spinY:r,pixelX:s,pixelY:n}}i.getEventType=function(){return s.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],s=/([A-Z])/g,n={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var s=e.charAt(0).toUpperCase()+e.slice(1),n=r.length;n--;){var i=r[n]+s;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in n?n[e]:n[e]=i(e)},e.exports.dash=function(e){return e=i(e),s.test(e)&&(e="-"+e.replace(s,"-$1"),s.lastIndex=0),e.toLowerCase()}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/webpack-dev-server/client/utils/log.js");function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){s.log.error(e)}}var t,r,i;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&n(t.prototype,r),i&&n(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/webpack/hot/log.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),o=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),a=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),c=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js");function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var m={isUnloading:!1,currentHash:r.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},_=(0,o.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),v={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1};if("true"===_.hot&&(g.hot=!0,v["Hot Module Replacement"]=!0),"true"===_["live-reload"]&&(g.liveReload=!0,v["Live Reloading"]=!0),"true"===_.progress&&(g.progress=!0,v.Progress=!0),_.overlay){try{g.overlay=JSON.parse(_.overlay)}catch(e){u.log.error("Error parsing overlay options from resource query:",e)}"object"==typeof g.overlay&&(g.overlay=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){f(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({errors:!0,warnings:!0},g.overlay)),v.Overlay=!0}function y(e){n().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)}_.logging&&(g.logging=_.logging),void 0!==_.reconnect&&(g.reconnect=Number(_.reconnect)),g.logging&&y(g.logging),(0,u.logEnabledFeatures)(v),self.addEventListener("beforeunload",(function(){m.isUnloading=!0}));var b={hot:function(){"false"!==_.hot&&(g.hot=!0)},liveReload:function(){"false"!==_["live-reload"]&&(g.liveReload=!0)},invalid:function(){u.log.info("App updated. Recompiling..."),g.overlay&&(0,l.hide)(),(0,c.default)("Invalid")},hash:function(e){m.previousHash=m.currentHash,m.currentHash=e},logging:y,overlay:function(e){"undefined"!=typeof document&&(g.overlay=e)},reconnect:function(e){"false"!==_.reconnect&&(g.reconnect=e)},progress:function(e){g.progress=e},"progress-update":function(e){g.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),g.overlay&&(0,l.hide)(),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),g.overlay&&(0,l.hide)(),(0,d.default)(g,m)},"content-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){u.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Warnings",r);for(var s=0;s<r.length;s++)u.log.warn(r[s]);if("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings){var n="object"==typeof g.overlay&&g.overlay.trustedTypesPolicyName;(0,l.show)("warning",e,n||null)}t&&t.preventReloading||(0,d.default)(g,m)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);if("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors){var s="object"==typeof g.overlay&&g.overlay.trustedTypesPolicyName;(0,l.show)("error",e,s||null)}},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),g.overlay&&(0,l.hide)(),(0,c.default)("Close")}},w=(0,h.default)(_);(0,a.default)(w,b,g.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=i;var o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[o]=t,this.getChildLogger=r}var t,s,u;return t=e,s=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];this[o](i.error,r)}}},{key:"trace",value:function(){this[o](i.trace,["Trace"])}},{key:"clear",value:function(){this[o](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupEnd,t)}},{key:"profile",value:function(e){this[o](i.profile,[e])}},{key:"profileEnd",value:function(e){this[o](i.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var s=process.hrtime(t);this[o](i.time,[e].concat(r(s)))}},{key:"timeEnd",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var s=process.hrtime(t);this[a].delete(e),this[o](i.time,[e].concat(r(s)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var s=this[l].get(e);void 0!==s&&(r[1]+s[1]>1e9?(r[0]+=s[0]+1,r[1]=r[1]-1e9+s[1]):(r[0]+=s[0],r[1]+=s[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[o](i.time,[e].concat(r(t))))}}}],s&&n(t.prototype,s),u&&n(t,u),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function s(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,o=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,n=e.debug,l=void 0!==n&&n,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(o),d=a["".concat(r)]||0;return function(e,t,r){var n=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(s(r.slice(1))):["[".concat(e,"]")].concat(s(r)):[]},o=c.some((function(t){return t(e)}));switch(t){case i.debug:if(!o)return;"function"==typeof u.debug?u.debug.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.log:if(!o&&d>a.log)return;u.log.apply(u,s(n()));break;case i.info:if(!o&&d>a.info)return;u.info.apply(u,s(n()));break;case i.warn:if(!o&&d>a.warn)return;u.warn.apply(u,s(n()));break;case i.error:if(!o&&d>a.error)return;u.error.apply(u,s(n()));break;case i.trace:if(!o)return;u.trace();break;case i.groupCollapsed:if(!o&&d>a.log)return;if(!o&&d>a.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,s(n())):u.log.apply(u,s(n()));break}case i.group:if(!o&&d>a.log)return;"function"==typeof u.group?u.group.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.groupEnd:if(!o&&d>a.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case i.time:if(!o&&d>a.log)return;var l=1e3*r[1]+r[2]/1e6,h="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(h):u.log(h);break;case i.profile:"function"==typeof u.profile&&u.profile.apply(u,s(n()));break;case i.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,s(n()));break;case i.clear:if(!o&&d>a.log)return;"function"==typeof u.clear&&u.clear();break;case i.status:if(!o&&d>a.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,s(n())):0!==r.length&&u.info.apply(u,s(n()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},s.apply(this,arguments)}var n=r("./client-src/modules/logger/SyncBailHookFake.js"),i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);t.getLogger=function(e){return new i((function(r,s){void 0===t.hooks.log.call(e,r,s)&&l(e,r,s)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){s(a,e),l=o(a)},t.hooks={log:new n(["origin","type","args"])}}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,s),i.exports}s.d=function(e,t){for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){s.r(n),s.d(n,{default:function(){return e}});var e=s("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in n)i[o]=n[o];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{formatProblem:()=>p,hide:()=>h,show:()=>f});var s,n,i,o=r("./node_modules/ansi-html-community/index.js"),a=r.n(o),l=r("./node_modules/html-entities/lib/index.js"),u={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function d(e,t){n?e(n):(c.push(e),s||function(e){window.trustedTypes&&(i=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(s=document.createElement("iframe")).id="webpack-dev-server-client-overlay",s.src="about:blank",s.style.position="fixed",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.border="none",s.style.zIndex=9999999999,s.onload=function(){(n=s.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",n.style.position="fixed",n.style.boxSizing="border-box",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.backgroundColor="rgba(0, 0, 0, 0.85)",n.style.color="#E8E8E8",n.style.fontFamily="Menlo, Consolas, monospace",n.style.fontSize="large",n.style.padding="2rem",n.style.lineHeight="1.2",n.style.whiteSpace="pre-wrap",n.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){h()})),n.appendChild(e),n.appendChild(t),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),s.contentDocument.body.appendChild(n),c.forEach((function(e){e(n)})),c=[],s.onload=null},document.body.appendChild(s)}(t))}function h(){s&&(document.body.removeChild(s),s=null,n=null)}function p(e,t){var r="warning"===e?"WARNING":"ERROR",s="";if("string"==typeof t)s+=t;else{var n=t.file||"",i=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",o=t.loc;r+="".concat(i||n?" in ".concat(i?"".concat(i).concat(n?" (".concat(n,")"):""):n).concat(o?" ".concat(o):""):""),s+=t.message||""}return{header:r,body:s}}function f(e,t,r){d((function(){t.forEach((function(t){var r=document.createElement("div"),s=document.createElement("span"),o=p(e,t),c=o.header,d=o.body;s.innerText=c,s.style.color="#".concat(u.red);var h=a()((0,l.encode)(d)),f=document.createElement("div");f.innerHTML=i?i.createHTML(h):h,r.appendChild(s),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),r.appendChild(f),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),n.appendChild(r)}))}),r)}a().setColors(u)},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>u,default:()=>d});var s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),n=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=void 0!==i?void 0!==i.default?i.default:i:s.default,a=0,l=10,u=null,c=function(e,t,r){(u=new o(e)).onOpen((function(){a=0,void 0!==r&&(l=r)})),u.onClose((function(){if(0===a&&t.close(),u=null,a<l){var s=1e3*Math.pow(2,a)+100*Math.random();a+=1,n.log.info("Trying to reconnect..."),setTimeout((function(){c(e,t,r)}),s)}})),u.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const d=c},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var n="";e.username&&(n=e.username,e.password&&(n=n.concat(":",e.password)));var i=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),o=e.port;o&&"0"!==o||(o=self.location.port);var a="/ws";return e.pathname&&!e.fromCurrentScript&&(a=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var s="";e.hostname&&(s=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(s+=":".concat(e.port)));var n=e.pathname||"";e.slashes?(s="//".concat(s||""),n&&"/"!==n.charAt(0)&&(n="/".concat(n))):s||(s="");var i=e.search||"";i&&"?"!==i.charAt(0)&&(i="?".concat(i));var o=e.hash||"";return o&&"#"!==o.charAt(0)&&(o="#".concat(o)),n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),i=i.replace("#","%23"),"".concat(t).concat(s).concat(n).concat(i).concat(o)}({protocol:s,auth:n,hostname:i,port:o,pathname:a,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,logEnabledFeatures:()=>a,setLogLevel:()=>i});var s=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),n=r.n(s);function i(e){n().configureDefaultLogger({level:e})}i("info");var o=n().getLogger("webpack-dev-server"),a=function(e){var t=Object.keys(e);if(e&&0!==t.length){for(var r="Server started:",s=0;s<t.length;s++){var n=t[s];r+=" ".concat(n," ").concat(e[n]?"enabled":"disabled",",")}r=r.slice(0,-1).concat("."),o.info(r)}}},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const n=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),n=0;n<r.length;n++){var i=r[n].split("=");t[i[0]]=decodeURIComponent(i[1])}else{var o,a=(0,s.default)();try{o=new URL(a,self.location.href)}catch(e){}o&&((t=o).fromCurrentScript=!0)}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/webpack/hot/emitter.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const o=function(e,t){var r=e.hot,s=e.liveReload;if(!t.isUnloading){var o=t.currentHash,a=t.previousHash;if(!(o.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)i.log.info("App hot update..."),n().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(s&&c)var d=self,h=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&p(d,h)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const n=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(s,"")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var s,n=function(){return s.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. Need to do a full reload!"),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();n()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),n()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. Need to do a full reload!"),i("warning","[HMR] "+i.formatError(t)),window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){s=t,n()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var s=r("./node_modules/events/events.js");e.exports=new s},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var s=e.filter((function(e){return t&&t.indexOf(e)<0})),n=r("./node_modules/webpack/hot/log.js");(s.length>0&&(n("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),s.forEach((function(e){n("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(n("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");n.groupCollapsed("info","[HMR]  - "+t.pop()),n("info","[HMR]  - "+e),n.groupEnd("info")}else n("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&n("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):n("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function s(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function n(e){return function(t,r){s(t)&&e(r)}}e.exports=function(e,t){s(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=n(i),e.exports.groupCollapsed=n(o),e.exports.groupEnd=n(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(s),e.hot.accept(void 0,s)},"./app/shaders/plane-fragment.glsl":e=>{"use strict";e.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  gl_FragColor = texture2D(tMap, vUv);\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":e=>{"use strict";e.exports="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new n.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends s.Transform{constructor(e,{near:t=.1,far:r=100,fov:s=45,aspect:o=1,left:a,right:l,bottom:u,top:c,zoom:d=1}={}){super(),Object.assign(this,{near:t,far:r,fov:s,aspect:o,left:a,right:l,bottom:u,top:c,zoom:d}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:s=this.right,bottom:n=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:s,bottom:n,top:i,zoom:o}),r/=o,s/=o,n/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:n,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e,t=e.worldMatrix){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const r=a;r.copy(e.geometry.bounds.center),r.applyMatrix4(t);const s=e.geometry.bounds.radius*t.getMaxScaleOnAxis();return this.frustumIntersectsSphere(r,s)}frustumIntersectsSphere(e,t){const r=l;for(let s=0;s<6;s++){const n=this.frustum[s];if(r.copy(n).dot(e)+n.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const n=new s.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const s=this.attributes[t];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const i=s.size/n,o=1===n?0:n*n*n,a=1===n?0:n*n;for(let t=0;t<n;t++)this.gl.vertexAttribPointer(e+t,i,s.type,s.normalized,s.stride+o,s.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const n=this.bounds.min,i=this.bounds.max,o=this.bounds.center,a=this.bounds.scale;n.set(1/0),i.set(-1/0);for(let e=0,s=t.length;e<s;e+=r){const r=t[e],s=t[e+1],o=t[e+2];n.x=Math.min(r,n.x),n.y=Math.min(s,n.y),n.z=Math.min(o,n.z),i.x=Math.max(r,i.x),i.y=Math.max(s,i.y),i.z=Math.max(o,i.z)}a.sub(i,n),o.add(n,i).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||this.computeBoundingBox(e);let s=0;for(let e=0,i=t.length;e<i;e+=r)n.fromArray(t,e),s=Math.max(s,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(s)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends s.Transform{constructor(e,{geometry:t,program:r,mode:s=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=s,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let s=1;const n={};class i{constructor(e,{vertex:t,fragment:r,uniforms:n={},transparent:i=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:d=e.LESS}={}){e.canvas||console.error("gl not passed as first argument to Program"),this.gl=e,this.uniforms=n,this.id=s++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const h=e.createShader(e.VERTEX_SHADER);e.shaderSource(h,t),e.compileShader(h),""!==e.getShaderInfoLog(h)&&console.warn(`${e.getShaderInfoLog(h)}\nVertex Shader\n${a(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=e.createProgram(),e.attachShader(this.program,h),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(h),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const m=[],g=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<g;t++){const r=e.getActiveAttrib(this.program,t),s=e.getAttribLocation(this.program,r.name);-1!==s&&(m[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=m.join("")}setBlendFunc(e,t,r,s){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let s=r.uniformName,n=this.uniforms[s];if(r.isStruct&&(n=n[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(n=n[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!n)return u(`Active uniform ${s} has not been supplied`);if(n&&void 0===n.value)return u(`${s} uniform is missing a value parameter`);if(n.value.texture)return t+=1,n.value.update(t),o(this.gl,r.type,e,t);if(n.value.length&&n.value[0].texture){const s=[];return n.value.forEach((e=>{t+=1,e.update(t),s.push(t)})),o(this.gl,r.type,e,s)}o(this.gl,r.type,e,n.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,s){s=s.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const s=t*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<t;s++)i.set(e[s],s*r);return i}(s):s;const i=e.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)e.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,s=e.length;r<s;r++)if(e[r]!==t[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(e,t){for(let r=0,s=e.length;r<s;r++)e[r]=t[r]}(i,s),e.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;e.renderer.state.uniformLocations.set(r,s)}switch(t){case 5126:return s.length?e.uniform1fv(r,s):e.uniform1f(r,s);case 35664:return e.uniform2fv(r,s);case 35665:return e.uniform3fv(r,s);case 35666:return e.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?e.uniform1iv(r,s):e.uniform1i(r,s);case 35671:case 35667:return e.uniform2iv(r,s);case 35672:case 35668:return e.uniform3iv(r,s);case 35673:case 35669:return e.uniform4iv(r,s);case 35674:return e.uniformMatrix2fv(r,!1,s);case 35675:return e.uniformMatrix3fv(r,!1,s);case 35676:return e.uniformMatrix4fv(r,!1,s)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const s=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:s=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:d="default",autoClear:h=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:d};this.dpr=s,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=h,this.id=n++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,s=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=s,this.gl.viewport(r,s,e,t))}setScissor(e,t,r=0,s=0){this.gl.scissor(r,s,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,s){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(e,t,r,s):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:n}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),n){const e=[],r=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):n.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(s),s.applyMatrix4(t.projectionViewMatrix),i.zDepth=s.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),n.sort(this.sortUI),i=e.concat(r,n)}return i}render({scene:e,camera:t,target:r=null,update:s=!0,sort:n=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:n}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const s=new Uint8Array(4);function n(e){return 0==(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:s=e.UNSIGNED_BYTE,format:n=e.RGBA,internalFormat:o=n,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:d=e.LINEAR,premultiplyAlpha:h=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:m=0,level:g=0,width:_,height:v=_}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=s,this.format=n,this.internalFormat=o,this.minFilter=c,this.magFilter=d,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=h,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=_,this.height=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var s=r("./node_modules/ogl/src/math/Vec3.js"),n=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new s.Vec3,this.quaternion=new n.Quat,this.scale=new s.Vec3(1),this.rotation=new o.Euler,this.up=new s.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js");class n extends s.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:s=1,heightSegments:i=1,attributes:o={}}={}){const a=s,l=i,u=(a+1)*(l+1),c=a*l*6,d=new Float32Array(3*u),h=new Float32Array(3*u),p=new Float32Array(2*u),f=c>65536?new Uint32Array(c):new Uint16Array(c);n.buildPlane(d,h,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:d},normal:{size:3,data:h},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,s,n,i,o,a,l,u=0,c=1,d=2,h=1,p=-1,f=0,m=0){const g=f,_=n/a,v=i/l;for(let y=0;y<=l;y++){let b=y*v-i/2;for(let i=0;i<=a;i++,f++){let v=i*_-n/2;if(e[3*f+u]=v*h,e[3*f+c]=b*p,e[3*f+d]=o/2,t[3*f+u]=0,t[3*f+c]=0,t[3*f+d]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;s[6*m]=w,s[6*m+1]=x,s[6*m+2]=E,s[6*m+3]=x,s[6*m+4]=j,s[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,s="YXZ"){return super(e,t,r),this.order=s,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return s.fromRotationMatrix(this,e,t),this.onChange(),this}fromQuaternion(e,t=this.order){return n.fromQuaternion(e),this.fromRotationMatrix(n,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=1,i=0,o=0,a=0,l=1){return super(e,t,r,s,n,i,o,a,l),this}set(e,t,r,n,i,o,a,l,u){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t=this){return s.rotate(this,t,e),this}scale(e,t=this){return s.scale(this,t,e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromMatrix4(e){return s.fromMat4(this,e),this}fromQuaternion(e){return s.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return s.invert(this,e),this}getNormalMatrix(e){return s.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=0,i=1,o=0,a=0,l=0,u=0,c=1,d=0,h=0,p=0,f=0,m=1){return super(e,t,r,s,n,i,o,a,l,u,c,d,h,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,n,i,o,a,l,u,c,d,h,p,f,m,g){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u,c,d,h,p,f,m,g),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t,r=this){return s.rotate(this,r,e,t),this}scale(e,t=this){return s.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:n}={}){return s.perspective(this,e,t,r,n),this}fromOrthogonal({left:e,right:t,bottom:r,top:n,near:i,far:o}){return s.ortho(this,e,t,r,n,i,o),this}fromQuaternion(e){return s.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return s.invert(this,e),this}compose(e,t,r){return s.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return s.getRotation(e,this),this}getTranslation(e){return s.getTranslation(e,this),this}getScaling(e){return s.getScaling(e,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(e,t,r){return s.targetTo(this,e,t,r),this}determinant(){return s.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>n});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(e=0,t=0,r=0,s=1){return super(e,t,r,s),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return s.identity(this),this.onChange(),this}set(e,t,r,n){return e.length?this.copy(e):(s.set(this,e,t,r,n),this.onChange(),this)}rotateX(e){return s.rotateX(this,this,e),this.onChange(),this}rotateY(e){return s.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return s.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return s.invert(this,e),this.onChange(),this}conjugate(e=this){return s.conjugate(this,e),this.onChange(),this}copy(e){return s.copy(this,e),this.onChange(),this}normalize(e=this){return s.normalize(this,e),this.onChange(),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this.onChange(),this}dot(e){return s.dot(this,e)}fromMatrix3(e){return s.fromMat3(this,e),this.onChange(),this}fromEuler(e){return s.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return s.setAxisAngle(this,e,t),this.onChange(),this}slerp(e,t){return s.slerp(this,this,e,t),this.onChange(),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this.onChange(),this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(s.set(this,e,t,r),this)}copy(e){return s.copy(this,e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e){return e.length?s.multiply(this,this,e):s.scale(this,this,e),this}divide(e){return e.length?s.divide(this,this,e):s.scale(this,this,1/e),this}inverse(e=this){return s.inverse(this,e),this}len(){return s.length(this)}distance(e){return e?s.distance(this,e):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(e){return e?s.squaredDistance(this,e):s.squaredLength(this)}negate(e=this){return s.negate(this,e),this}cross(e,t){return t?s.cross(this,e,t):s.cross(this,this,e),this}scale(e){return s.scale(this,this,e),this}normalize(){return s.normalize(this,this),this}dot(e){return s.dot(this,e)}equals(e){return s.exactEquals(this,e)}applyMatrix3(e){return s.transformMat3(this,this,e),this}applyMatrix4(e){return s.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return s.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return s.transformQuat(this,this,e),this}angle(e){return s.angle(this,e)}lerp(e,t){return s.lerp(this,this,e,t),this}clone(){return new n(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],s=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*s,this[1]=e[1]*t+e[5]*r+e[9]*s,this[2]=e[2]*t+e[6]*r+e[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function s(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,copy:()=>i,determinant:()=>c,fromMat4:()=>s,fromQuat:()=>n,identity:()=>a,invert:()=>u,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>m,projection:()=>g,rotate:()=>p,scale:()=>f,set:()=>o,subtract:()=>v,translate:()=>h,transpose:()=>l});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function n(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,d=s*a,h=n*o,p=n*a,f=n*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[3]=c-_,e[6]=h+g,e[1]=c+_,e[4]=1-u-f,e[7]=p-m,e[2]=h-g,e[5]=p+m,e[8]=1-u-d,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,s,n,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=s,e[7]=n}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=c*o-a*u,h=-c*i+a*l,p=u*i-o*l,f=r*d+s*h+n*p;return f?(f=1/f,e[0]=d*f,e[1]=(-c*s+n*u)*f,e[2]=(a*s-n*o)*f,e[3]=h*f,e[4]=(c*r-n*l)*f,e[5]=(-a*r+n*i)*f,e[6]=p*f,e[7]=(-u*r+s*l)*f,e[8]=(o*r-s*i)*f,e):null}function c(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*n+o*a)+s*(l*n-i*a)}function d(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1],f=r[2],m=r[3],g=r[4],_=r[5],v=r[6],y=r[7],b=r[8];return e[0]=h*s+p*o+f*u,e[1]=h*n+p*a+f*c,e[2]=h*i+p*l+f*d,e[3]=m*s+g*o+_*u,e[4]=m*n+g*a+_*c,e[5]=m*i+g*l+_*d,e[6]=v*s+y*o+b*u,e[7]=v*n+y*a+b*c,e[8]=v*i+y*l+b*d,e}function h(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1];return e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=h*s+p*o+u,e[7]=h*n+p*a+c,e[8]=h*i+p*l+d,e}function p(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=Math.sin(r),p=Math.cos(r);return e[0]=p*s+h*o,e[1]=p*n+h*a,e[2]=p*i+h*l,e[3]=p*o-h*s,e[4]=p*a-h*n,e[5]=p*l-h*i,e[6]=u,e[7]=c,e[8]=d,e}function f(e,t,r){let s=r[0],n=r[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=n*t[3],e[4]=n*t[4],e[5]=n*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function m(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*m-d*f,A=c*g-h*f,T=c*_-p*f,S=d*g-h*m,M=d*_-p*m,k=h*_-p*g,C=v*k-y*M+b*S+w*T-x*A+j*E;return C?(C=1/C,e[0]=(a*k-l*M+u*S)*C,e[1]=(l*T-o*k-u*A)*C,e[2]=(o*M-a*T+u*E)*C,e[3]=(n*M-s*k-i*S)*C,e[4]=(r*k-n*T+i*A)*C,e[5]=(s*T-r*M-i*E)*C,e[6]=(m*j-g*x+_*w)*C,e[7]=(g*b-f*j-_*y)*C,e[8]=(f*x-m*b+_*v)*C,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function _(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function v(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>x,copy:()=>s,determinant:()=>l,fromQuat:()=>v,fromRotationTranslationScale:()=>_,getMaxScaleOnAxis:()=>m,getRotation:()=>g,getScaling:()=>f,getTranslation:()=>p,identity:()=>i,invert:()=>a,multiply:()=>u,multiplyScalar:()=>E,ortho:()=>b,perspective:()=>y,rotate:()=>h,scale:()=>d,set:()=>n,subtract:()=>j,targetTo:()=>w,translate:()=>c,transpose:()=>o});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function n(e,t,r,s,n,i,o,a,l,u,c,d,h,p,f,m,g){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=c,e[10]=d,e[11]=h,e[12]=p,e[13]=f,e[14]=m,e[15]=g,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function o(e,t){if(e===t){let r=t[1],s=t[2],n=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=n,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function a(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*m-d*f,A=c*g-h*f,T=c*_-p*f,S=d*g-h*m,M=d*_-p*m,k=h*_-p*g,C=v*k-y*M+b*S+w*T-x*A+j*E;return C?(C=1/C,e[0]=(a*k-l*M+u*S)*C,e[1]=(n*M-s*k-i*S)*C,e[2]=(m*j-g*x+_*w)*C,e[3]=(h*x-d*j-p*w)*C,e[4]=(l*T-o*k-u*A)*C,e[5]=(r*k-n*T+i*A)*C,e[6]=(g*b-f*j-_*y)*C,e[7]=(c*j-h*b+p*y)*C,e[8]=(o*M-a*T+u*E)*C,e[9]=(s*T-r*M-i*E)*C,e[10]=(f*x-m*b+_*v)*C,e[11]=(d*b-c*x-p*v)*C,e[12]=(a*A-o*S-l*E)*C,e[13]=(r*S-s*A+n*E)*C,e[14]=(m*y-f*w-g*v)*C,e[15]=(c*w-d*y+h*v)*C,e):null}function l(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],c=e[9],d=e[10],h=e[11],p=e[12],f=e[13],m=e[14],g=e[15];return(t*o-r*i)*(d*g-h*m)-(t*a-s*i)*(c*g-h*f)+(t*l-n*i)*(c*m-d*f)+(r*a-s*o)*(u*g-h*p)-(r*l-n*o)*(u*m-d*p)+(s*l-n*a)*(u*f-c*p)}function u(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],m=t[12],g=t[13],_=t[14],v=t[15],y=r[0],b=r[1],w=r[2],x=r[3];return e[0]=y*s+b*a+w*d+x*m,e[1]=y*n+b*l+w*h+x*g,e[2]=y*i+b*u+w*p+x*_,e[3]=y*o+b*c+w*f+x*v,y=r[4],b=r[5],w=r[6],x=r[7],e[4]=y*s+b*a+w*d+x*m,e[5]=y*n+b*l+w*h+x*g,e[6]=y*i+b*u+w*p+x*_,e[7]=y*o+b*c+w*f+x*v,y=r[8],b=r[9],w=r[10],x=r[11],e[8]=y*s+b*a+w*d+x*m,e[9]=y*n+b*l+w*h+x*g,e[10]=y*i+b*u+w*p+x*_,e[11]=y*o+b*c+w*f+x*v,y=r[12],b=r[13],w=r[14],x=r[15],e[12]=y*s+b*a+w*d+x*m,e[13]=y*n+b*l+w*h+x*g,e[14]=y*i+b*u+w*p+x*_,e[15]=y*o+b*c+w*f+x*v,e}function c(e,t,r){let s,n,i,o,a,l,u,c,d,h,p,f,m=r[0],g=r[1],_=r[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*_+t[12],e[13]=t[1]*m+t[5]*g+t[9]*_+t[13],e[14]=t[2]*m+t[6]*g+t[10]*_+t[14],e[15]=t[3]*m+t[7]*g+t[11]*_+t[15]):(s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=c,e[8]=d,e[9]=h,e[10]=p,e[11]=f,e[12]=s*m+a*g+d*_+t[12],e[13]=n*m+l*g+h*_+t[13],e[14]=i*m+u*g+p*_+t[14],e[15]=o*m+c*g+f*_+t[15]),e}function d(e,t,r){let s=r[0],n=r[1],i=r[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function h(e,t,r,s){let n,i,o,a,l,u,c,d,h,p,f,m,g,_,v,y,b,w,x,j,E,A,T,S,M=s[0],k=s[1],C=s[2],q=Math.hypot(M,k,C);return Math.abs(q)<1e-6?null:(q=1/q,M*=q,k*=q,C*=q,n=Math.sin(r),i=Math.cos(r),o=1-i,a=t[0],l=t[1],u=t[2],c=t[3],d=t[4],h=t[5],p=t[6],f=t[7],m=t[8],g=t[9],_=t[10],v=t[11],y=M*M*o+i,b=k*M*o+C*n,w=C*M*o-k*n,x=M*k*o-C*n,j=k*k*o+i,E=C*k*o+M*n,A=M*C*o+k*n,T=k*C*o-M*n,S=C*C*o+i,e[0]=a*y+d*b+m*w,e[1]=l*y+h*b+g*w,e[2]=u*y+p*b+_*w,e[3]=c*y+f*b+v*w,e[4]=a*x+d*j+m*E,e[5]=l*x+h*j+g*E,e[6]=u*x+p*j+_*E,e[7]=c*x+f*j+v*E,e[8]=a*A+d*T+m*S,e[9]=l*A+h*T+g*S,e[10]=u*A+p*T+_*S,e[11]=c*A+f*T+v*S,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function p(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function f(e,t){let r=t[0],s=t[1],n=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,s,n),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,c),e}function m(e){let t=e[0],r=e[1],s=e[2],n=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const c=t*t+r*r+s*s,d=n*n+i*i+o*o,h=a*a+l*l+u*u;return Math.sqrt(Math.max(c,d,h))}const g=function(){const e=[0,0,0];return function(t,r){let s=e;f(s,r);let n=1/s[0],i=1/s[1],o=1/s[2],a=r[0]*n,l=r[1]*i,u=r[2]*o,c=r[4]*n,d=r[5]*i,h=r[6]*o,p=r[8]*n,m=r[9]*i,g=r[10]*o,_=a+d+g,v=0;return _>0?(v=2*Math.sqrt(_+1),t[3]=.25*v,t[0]=(h-m)/v,t[1]=(p-u)/v,t[2]=(l-c)/v):a>d&&a>g?(v=2*Math.sqrt(1+a-d-g),t[3]=(h-m)/v,t[0]=.25*v,t[1]=(l+c)/v,t[2]=(p+u)/v):d>g?(v=2*Math.sqrt(1+d-a-g),t[3]=(p-u)/v,t[0]=(l+c)/v,t[1]=.25*v,t[2]=(h+m)/v):(v=2*Math.sqrt(1+g-a-d),t[3]=(l-c)/v,t[0]=(p+u)/v,t[1]=(h+m)/v,t[2]=.25*v),t}}();function _(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3],l=n+n,u=i+i,c=o+o,d=n*l,h=n*u,p=n*c,f=i*u,m=i*c,g=o*c,_=a*l,v=a*u,y=a*c,b=s[0],w=s[1],x=s[2];return e[0]=(1-(f+g))*b,e[1]=(h+y)*b,e[2]=(p-v)*b,e[3]=0,e[4]=(h-y)*w,e[5]=(1-(d+g))*w,e[6]=(m+_)*w,e[7]=0,e[8]=(p+v)*x,e[9]=(m-_)*x,e[10]=(1-(d+f))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function v(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,d=s*a,h=n*o,p=n*a,f=n*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[1]=c+_,e[2]=h-g,e[3]=0,e[4]=c-_,e[5]=1-u-f,e[6]=p+m,e[7]=0,e[8]=h+g,e[9]=p-m,e[10]=1-u-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function y(e,t,r,s,n){let i=1/Math.tan(t/2),o=1/(s-n);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(n+s)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*n*s*o,e[15]=0,e}function b(e,t,r,s,n,i,o){let a=1/(t-r),l=1/(s-n),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(n+s)*l,e[14]=(o+i)*u,e[15]=1,e}function w(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=s[0],l=s[1],u=s[2],c=n-r[0],d=i-r[1],h=o-r[2],p=c*c+d*d+h*h;0===p?h=1:(p=1/Math.sqrt(p),c*=p,d*=p,h*=p);let f=l*h-u*d,m=u*c-a*h,g=a*d-l*c;return p=f*f+m*m+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*h-u*d,m=u*c-a*h,g=a*d-l*c,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,e[0]=f,e[1]=m,e[2]=g,e[3]=0,e[4]=d*g-h*m,e[5]=h*f-c*g,e[6]=c*m-d*f,e[7]=0,e[8]=c,e[9]=d,e[10]=h,e[11]=0,e[12]=n,e[13]=i,e[14]=o,e[15]=1,e}function x(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function j(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function E(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,conjugate:()=>h,copy:()=>m,dot:()=>y,fromEuler:()=>f,fromMat3:()=>p,identity:()=>n,invert:()=>d,length:()=>w,lerp:()=>b,multiply:()=>o,normalize:()=>x,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,scale:()=>v,set:()=>g,setAxisAngle:()=>i,slerp:()=>c});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let s=Math.sin(r);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],c=r[3];return e[0]=s*c+o*a+n*u-i*l,e[1]=n*c+o*l+i*a-s*u,e[2]=i*c+o*u+s*l-n*a,e[3]=o*c-s*a-n*l-i*u,e}function a(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+o*a,e[1]=n*l+i*a,e[2]=i*l-n*a,e[3]=o*l-s*a,e}function l(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l-i*a,e[1]=n*l+o*a,e[2]=i*l+s*a,e[3]=o*l-n*a,e}function u(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+n*a,e[1]=n*l-s*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function c(e,t,r,s){let n,i,o,a,l,u=t[0],c=t[1],d=t[2],h=t[3],p=r[0],f=r[1],m=r[2],g=r[3];return i=u*p+c*f+d*m+h*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(n=Math.acos(i),o=Math.sin(n),a=Math.sin((1-s)*n)/o,l=Math.sin(s*n)/o):(a=1-s,l=s),e[0]=a*u+l*p,e[1]=a*c+l*f,e[2]=a*d+l*m,e[3]=a*h+l*g,e}function d(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-s*a,e[2]=-n*a,e[3]=i*a,e}function h(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,s=t[0]+t[4]+t[8];if(s>0)r=Math.sqrt(s+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let s=0;t[4]>t[0]&&(s=1),t[8]>t[3*s+s]&&(s=2);let n=(s+1)%3,i=(s+2)%3;r=Math.sqrt(t[3*s+s]-t[3*n+n]-t[3*i+i]+1),e[s]=.5*r,r=.5/r,e[3]=(t[3*n+i]-t[3*i+n])*r,e[n]=(t[3*n+s]+t[3*s+n])*r,e[i]=(t[3*i+s]+t[3*s+i])*r}return e}function f(e,t,r="YXZ"){let s=Math.sin(.5*t[0]),n=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"YXZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"ZXY"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"ZYX"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"YZX"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l-s*i*a):"XZY"===r&&(e[0]=s*o*l-n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l+s*i*a),e}const m=s.copy,g=s.set,_=s.add,v=s.scale,y=s.dot,b=s.lerp,w=s.length,x=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o,angle:()=>E,copy:()=>n,cross:()=>v,distance:()=>d,divide:()=>u,dot:()=>_,exactEquals:()=>A,inverse:()=>m,length:()=>s,lerp:()=>y,multiply:()=>l,negate:()=>f,normalize:()=>g,scale:()=>c,scaleRotateMat4:()=>w,set:()=>i,squaredDistance:()=>h,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>x,transformMat4:()=>b,transformQuat:()=>j});function s(e){let t=e[0],r=e[1],s=e[2];return Math.sqrt(t*t+r*r+s*s)}function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,s){return e[0]=t,e[1]=r,e[2]=s,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function d(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return Math.sqrt(r*r+s*s+n*n)}function h(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return r*r+s*s+n*n}function p(e){let t=e[0],r=e[1],s=e[2];return t*t+r*r+s*s}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function m(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],s=t[1],n=t[2],i=r*r+s*s+n*n;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function _(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function v(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=n*l-i*a,e[1]=i*o-s*l,e[2]=s*a-n*o,e}function y(e,t,r,s){let n=t[0],i=t[1],o=t[2];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e}function b(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i+r[12])/o,e[1]=(r[1]*s+r[5]*n+r[9]*i+r[13])/o,e[2]=(r[2]*s+r[6]*n+r[10]*i+r[14])/o,e}function w(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i)/o,e[1]=(r[1]*s+r[5]*n+r[9]*i)/o,e[2]=(r[2]*s+r[6]*n+r[10]*i)/o,e}function x(e,t,r){let s=t[0],n=t[1],i=t[2];return e[0]=s*r[0]+n*r[3]+i*r[6],e[1]=s*r[1]+n*r[4]+i*r[7],e[2]=s*r[2]+n*r[5]+i*r[8],e}function j(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*n,c=l*s-o*i,d=o*n-a*s,h=a*d-l*c,p=l*u-o*d,f=o*c-a*u,m=2*r[3];return u*=m,c*=m,d*=m,h*=2,p*=2,f*=2,e[0]=s+u+h,e[1]=n+c+p,e[2]=i+d+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,s){n(e,r),n(t,s),g(e,e),g(t,t);let i=_(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function A(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>i,copy:()=>s,dot:()=>u,length:()=>a,lerp:()=>c,normalize:()=>l,scale:()=>o,set:()=>n});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function n(e,t,r,s,n){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],s=e[2],n=e[3];return Math.sqrt(t*t+r*r+s*s+n*n)}function l(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=s*o,e[2]=n*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e[3]=a+s*(r[3]-a),e}}},l={};function u(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=l[e]={id:e,loaded:!1,exports:{}};try{var s={id:e,module:r,factory:a[e],require:u};u.i.forEach((function(e){e(s)})),r=s.module,s.factory.call(r.exports,r,r.exports,s.require)}catch(e){throw r.error=e,e}return r.loaded=!0,r.exports}u.m=a,u.c=l,u.i=[],u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>{},u.hmrF=()=>"main."+u.h()+".hot-update.json",u.h=()=>"f3b72efbc5865dac44bc",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="portfolio_v2:",u.l=(r,s,n,i)=>{if(e[r])e[r].push(s);else{var o,a;if(void 0!==n)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var d=l[c];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+n){o=d;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,u.nc&&o.setAttribute("nonce",u.nc),o.setAttribute("data-webpack",t+n),o.src=r),e[r]=[s];var h=(t,s)=>{o.onerror=o.onload=null,clearTimeout(p);var n=e[r];if(delete e[r],o.parentNode&&o.parentNode.removeChild(o),n&&n.forEach((e=>e(s))),t)return t(s)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),a&&document.head.appendChild(o)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,s={},n=u.c,i=[],o=[],a="idle",l=0,c=[];function d(e){a=e;for(var t=[],r=0;r<o.length;r++)t[r]=o[r].call(null,e);return Promise.all(t)}function h(){0==--l&&d("ready").then((function(){if(0===l){var e=c;c=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return d("check").then(u.hmrM).then((function(r){return r?d("prepare").then((function(){var s=[];return t=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,n){return u.hmrC[n](r.c,r.r,r.m,e,t,s),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return s}))},0===l?t():new Promise((function(e){c.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},g();var s=t.map((function(t){return t(e)}));t=void 0;var n=s.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return d("abort").then((function(){throw n[0]}));var i=d("dispose");s.forEach((function(e){e.dispose&&e.dispose()}));var o,a=d("apply"),l=function(e){o||(o=e)},u=[];return s.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?d("fail").then((function(){throw o})):r?m(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return u}))}))}function g(){if(r)return t||(t=[]),Object.keys(u.hmrI).forEach((function(e){r.forEach((function(r){u.hmrI[e](r,t)}))})),r=void 0,!0}u.hmrD=s,u.i.push((function(c){var m,g,_,v,y=c.module,b=function(t,r){var s=n[r];if(!s)return t;var o=function(o){if(s.hot.active){if(n[o]){var a=n[o].parents;-1===a.indexOf(r)&&a.push(r)}else i=[r],e=o;-1===s.children.indexOf(o)&&s.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return t(o)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&"e"!==c&&Object.defineProperty(o,c,u(c));return o.e=function(e){return function(e){switch(a){case"ready":d("prepare");case"prepare":return l++,e.then(h,h),e;default:return e}}(t.e(e))},o}(c.require,c.id);y.hot=(m=c.id,g=y,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:_=e!==m,_requireSelf:function(){i=g.parents.slice(),e=_?void 0:m,u(m)},active:!0,accept:function(e,t,r){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)v._acceptedDependencies[e[s]]=t||function(){},v._acceptedErrorHandlers[e[s]]=r;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return a;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:s[m]},e=void 0,v),y.parents=i,y.children=[],i=[],c.require=b})),u.hmrC={},u.hmrI={}})(),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),r=(e,t,r,s)=>{var n=document.createElement("link");return n.rel="stylesheet",n.type="text/css",n.onerror=n.onload=i=>{if(n.onerror=n.onload=null,"load"===i.type)r();else{var o=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,n.parentNode.removeChild(n),s(l)}},n.href=t,document.head.appendChild(n),n},s=(e,t)=>{for(var r=document.getElementsByTagName("link"),s=0;s<r.length;s++){var n=(o=r[s]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(n===e||n===t))return o}var i=document.getElementsByTagName("style");for(s=0;s<i.length;s++){var o;if((n=(o=i[s]).getAttribute("data-href"))===e||n===t)return o}},n=[],i=[],o=e=>({dispose:()=>{for(var e=0;e<n.length;e++){var t=n[e];t.parentNode&&t.parentNode.removeChild(t)}n.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),u.hmrC.miniCss=(e,t,a,l,c,d)=>{c.push(o),e.forEach((e=>{var t=u.miniCssF(e),o=u.p+t,a=s(t,o);a&&l.push(new Promise(((t,s)=>{var l=r(e,o,(()=>{l.as="style",l.rel="preload",t()}),s);n.push(a),i.push(l)})))}))},(()=>{var e,t,r,s,n,i=u.hmrS_jsonp=u.hmrS_jsonp||{main:0},o={};function a(t,r){return e=r,new Promise(((e,r)=>{o[t]=e;var s=u.p+u.hu(t),n=new Error;u.l(s,(e=>{if(o[t]){o[t]=void 0;var s=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;n.message="Loading hot update chunk "+t+" failed.\n("+s+": "+i+")",n.name="ChunkLoadError",n.type=s,n.request=i,r(n)}}))}))}function l(e){function o(e){for(var t=[e],r={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var n=s.pop(),i=n.id,o=n.chain,l=u.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var c=0;c<l.parents.length;c++){var d=l.parents[c],h=u.c[d];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(h.hot._acceptedDependencies[i]?(r[d]||(r[d]=[]),a(r[d],[i])):(delete r[d],t.push(d),s.push({chain:o.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var s=t[r];-1===e.indexOf(s)&&e.push(s)}}u.f&&delete u.f.jsonpHmr,t=void 0;var l={},c=[],d={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(u.o(r,p)){var f,m=r[p],g=!1,_=!1,v=!1,y="";switch((f=m?o(p):{type:"disposed",moduleId:p}).chain&&(y="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+f.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(f),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),v=!0;break;default:throw new Error("Unexception type "+f.type)}if(g)return{error:g};if(_)for(p in d[p]=m,a(c,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(l[p]||(l[p]=[]),a(l[p],f.outdatedDependencies[p]));v&&(a(c,[f.moduleId]),d[p]=h)}r=void 0;for(var b,w=[],x=0;x<c.length;x++){var j=c[x],E=u.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&d[j]!==h&&!E.hot._selfInvalidated&&w.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;s.forEach((function(e){delete i[e]})),s=void 0;for(var t,r=c.slice();r.length>0;){var n=r.pop(),o=u.c[n];if(o){var a={},d=o.hot._disposeHandlers;for(x=0;x<d.length;x++)d[x].call(null,a);for(u.hmrD[n]=a,o.hot.active=!1,delete u.c[n],delete l[n],x=0;x<o.children.length;x++){var h=u.c[o.children[x]];h&&((e=h.parents.indexOf(n))>=0&&h.parents.splice(e,1))}}}for(var p in l)if(u.o(l,p)&&(o=u.c[p]))for(b=l[p],x=0;x<b.length;x++)t=b[x],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var r in d)u.o(d,r)&&(u.m[r]=d[r]);for(var s=0;s<n.length;s++)n[s](u);for(var i in l)if(u.o(l,i)){var o=u.c[i];if(o){b=l[i];for(var a=[],h=[],p=[],f=0;f<b.length;f++){var m=b[f],g=o.hot._acceptedDependencies[m],_=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==a.indexOf(g))continue;a.push(g),h.push(_),p.push(m)}}for(var v=0;v<a.length;v++)try{a[v].call(null,b)}catch(r){if("function"==typeof h[v])try{h[v](r,{moduleId:i,dependencyId:p[v]})}catch(s){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[v],error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[v],error:r}),e.ignoreErrored||t(r)}}}for(var y=0;y<w.length;y++){var x=w[y],j=x.module;try{x.require(j)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:j,module:u.c[j]})}catch(s){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return c}}}self.webpackHotUpdateportfolio_v2=(t,s,i)=>{for(var a in s)u.o(s,a)&&(r[a]=s[a],e&&e.push(a));i&&n.push(i),o[t]&&(o[t](),o[t]=void 0)},u.hmrI.jsonp=function(e,t){r||(r={},n=[],s=[],t.push(l)),u.o(r,e)||(r[e]=u.m[e])},u.hmrC.jsonp=function(e,o,c,d,h,p){h.push(l),t={},s=o,r=c.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],e.forEach((function(e){u.o(i,e)&&void 0!==i[e]?(d.push(a(e,p)),t[e]=!0):t[e]=!1})),u.f&&(u.f.jsonpHmr=function(e,r){t&&u.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),u("./node_modules/webpack/hot/dev-server.js"),u("./app/index.js");u("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,