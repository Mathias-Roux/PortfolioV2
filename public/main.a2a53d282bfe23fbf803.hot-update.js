/*! For license information please see main.a2a53d282bfe23fbf803.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_v2("main",{"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,n,t)=>{var o=t("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),r=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function s(){}function l(e,n){if(!n){if(!e.href)return;n=e.href.split("?")[0]}if(u(n)&&!1!==e.isLoaded&&n&&n.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(n,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function a(e){if(!e)return!1;var n=document.querySelectorAll("link"),t=!1;return c.call(n,(function(n){if(n.href){var r=function(e,n){var t;return e=o(e),n.some((function(o){e.indexOf(n)>-1&&(t=o)})),t}(n.href,e);u(r)&&!0!==n.visited&&r&&(l(n,r),t=!0)}})),t}function d(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&l(e)}))}function u(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,n){if(i)return console.log("no window.document found, will not HMR CSS"),s;var t,c,l,u=function(e){var n=r[e];if(!n){if(document.currentScript)n=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(n=i.src)}r[e]=n}return function(e){if(!n)return null;var t=n.split(/([^\\/]+)\.js$/),r=t&&t[1];return r&&e?e.split(",").map((function(e){var t=new RegExp("".concat(r,"\\.js$"),"g");return o(n.replace(t,"".concat(e.replace(/{fileName}/g,r),".css")))})):[n.replace(".js",".css")]}}(e);return t=function(){var e=u(n.filename),t=a(e);if(n.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},c=50,l=0,function(){var e=this,n=arguments,o=function(){return t.apply(e,n)};clearTimeout(l),l=setTimeout(o,c)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var n=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(n,"i"),"").split("/"),o=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",n+o+t.reduce((function(e,n){switch(n){case"..":e.pop();break;case".":break;default:e.push(n)}return e}),[]).join("/")}},"./styles/index.scss":(e,n,t)=>{t.r(n);var o=t("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(o),e.hot.accept(void 0,o)}},(function(e){e.h=()=>"0f4187fcb987ee56bd37"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,