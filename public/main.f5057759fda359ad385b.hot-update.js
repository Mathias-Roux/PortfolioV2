/*! For license information please see main.f5057759fda359ad385b.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_v2("main",{"./app/components/Canvas/Detail/Media.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>h});var s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),n=r("./node_modules/gsap/index.js"),a=r("./app/shaders/plane-fragment.glsl"),o=r("./app/shaders/plane-vertex.glsl");class h{constructor({element:t,geometry:e,gl:r,index:s,scene:i,sizes:n}){this.element=t,this.gl=r,this.geometry=e,this.scene=i,this.index=s,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector(".detail__media__image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:a,vertex:o,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t){this.updateY(t)}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{r.r(e),r.d(e,{Mesh:()=>o});var s=r("./node_modules/ogl/src/core/Transform.js"),i=r("./node_modules/ogl/src/math/Mat3.js"),n=r("./node_modules/ogl/src/math/Mat4.js");let a=0;class o extends s.Transform{constructor(t,{geometry:e,program:r,mode:s=t.TRIANGLES,frustumCulled:o=!0,renderOrder:h=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=r,this.mode=s,this.frustumCulled=o,this.renderOrder=h,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new i.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{r.r(e),r.d(e,{Program:()=>n});let s=1;const i={};class n{constructor(t,{vertex:e,fragment:r,uniforms:i={},transparent:n=!1,cullFace:a=t.BACK,frontFace:h=t.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:c=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=i,this.id=s++,e||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=a,this.frontFace=h,this.depthTest=l,this.depthWrite=u,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=t.createShader(t.VERTEX_SHADER);t.shaderSource(d,e),t.compileShader(d),""!==t.getShaderInfoLog(d)&&console.warn(`${t.getShaderInfoLog(d)}\nVertex Shader\n${o(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,r),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${o(r)}`),this.program=t.createProgram(),t.attachShader(this.program,d),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(d),t.deleteShader(m),this.uniformLocations=new Map;let g=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<g;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const r=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,r.name);-1!==s&&(p[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=p.join("")}setBlendFunc(t,e,r,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let s=r.uniformName,i=this.uniforms[s];if(r.isStruct&&(i=i[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(i=i[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!i)return l(`Active uniform ${s} has not been supplied`);if(i&&void 0===i.value)return l(`${s} uniform is missing a value parameter`);if(i.value.texture)return e+=1,i.value.update(e),a(this.gl,r.type,t,e);if(i.value.length&&i.value[0].texture){const s=[];return i.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),a(this.gl,r.type,t,s)}a(this.gl,r.type,t,i.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,r,s){s=s.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const s=e*r;let n=i[s];n||(i[s]=n=new Float32Array(s));for(let s=0;s<e;s++)n.set(t[s],s*r);return n}(s):s;const n=t.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===n||n.length!==s.length)t.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,s=t.length;r<s;r++)if(t[r]!==e[r])return!1;return!0}(n,s))return;n.set?n.set(s):function(t,e){for(let r=0,s=t.length;r<s;r++)t[r]=e[r]}(n,s),t.renderer.state.uniformLocations.set(r,n)}else{if(n===s)return;t.renderer.state.uniformLocations.set(r,s)}switch(e){case 5126:return s.length?t.uniform1fv(r,s):t.uniform1f(r,s);case 35664:return t.uniform2fv(r,s);case 35665:return t.uniform3fv(r,s);case 35666:return t.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(r,s):t.uniform1i(r,s);case 35671:case 35667:return t.uniform2iv(r,s);case 35672:case 35668:return t.uniform3iv(r,s);case 35673:case 35669:return t.uniform4iv(r,s);case 35674:return t.uniformMatrix2fv(r,!1,s);case 35675:return t.uniformMatrix3fv(r,!1,s);case 35676:return t.uniformMatrix4fv(r,!1,s)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let h=0;function l(t){h>100||(console.warn(t),h++,h>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{r.r(e),r.d(e,{Mat3:()=>i});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class i extends Array{constructor(t=1,e=0,r=0,s=0,i=1,n=0,a=0,o=0,h=1){return super(t,e,r,s,i,n,a,o,h),this}set(t,e,r,i,n,a,o,h,l){return t.length?this.copy(t):(s.set(this,t,e,r,i,n,a,o,h,l),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>x,copy:()=>n,determinant:()=>u,fromMat4:()=>s,fromQuat:()=>i,identity:()=>o,invert:()=>l,multiply:()=>c,multiplyScalar:()=>M,normalFromMat4:()=>p,projection:()=>f,rotate:()=>m,scale:()=>g,set:()=>a,subtract:()=>v,translate:()=>d,transpose:()=>h});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function i(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r+r,o=s+s,h=i+i,l=r*a,u=s*a,c=s*o,d=i*a,m=i*o,g=i*h,p=n*a,f=n*o,x=n*h;return t[0]=1-c-g,t[3]=u-x,t[6]=d+f,t[1]=u+x,t[4]=1-l-g,t[7]=m-p,t[2]=d-f,t[5]=m+p,t[8]=1-l-c,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,r,s,i,n,a,o,h,l){return t[0]=e,t[1]=r,t[2]=s,t[3]=i,t[4]=n,t[5]=a,t[6]=o,t[7]=h,t[8]=l,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function h(t,e){if(t===e){let r=e[1],s=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=s,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],c=u*a-o*l,d=-u*n+o*h,m=l*n-a*h,g=r*c+s*d+i*m;return g?(g=1/g,t[0]=c*g,t[1]=(-u*s+i*l)*g,t[2]=(o*s-i*a)*g,t[3]=d*g,t[4]=(u*r-i*h)*g,t[5]=(-o*r+i*n)*g,t[6]=m*g,t[7]=(-l*r+s*h)*g,t[8]=(a*r-s*n)*g,t):null}function u(t){let e=t[0],r=t[1],s=t[2],i=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*(l*n-a*h)+r*(-l*i+a*o)+s*(h*i-n*o)}function c(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=r[0],m=r[1],g=r[2],p=r[3],f=r[4],x=r[5],v=r[6],M=r[7],w=r[8];return t[0]=d*s+m*a+g*l,t[1]=d*i+m*o+g*u,t[2]=d*n+m*h+g*c,t[3]=p*s+f*a+x*l,t[4]=p*i+f*o+x*u,t[5]=p*n+f*h+x*c,t[6]=v*s+M*a+w*l,t[7]=v*i+M*o+w*u,t[8]=v*n+M*h+w*c,t}function d(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=r[0],m=r[1];return t[0]=s,t[1]=i,t[2]=n,t[3]=a,t[4]=o,t[5]=h,t[6]=d*s+m*a+l,t[7]=d*i+m*o+u,t[8]=d*n+m*h+c,t}function m(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=Math.sin(r),m=Math.cos(r);return t[0]=m*s+d*a,t[1]=m*i+d*o,t[2]=m*n+d*h,t[3]=m*a-d*s,t[4]=m*o-d*i,t[5]=m*h-d*n,t[6]=l,t[7]=u,t[8]=c,t}function g(t,e,r){let s=r[0],i=r[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],c=e[9],d=e[10],m=e[11],g=e[12],p=e[13],f=e[14],x=e[15],v=r*o-s*a,M=r*h-i*a,w=r*l-n*a,b=s*h-i*o,F=s*l-n*o,y=i*l-n*h,S=u*p-c*g,A=u*f-d*g,P=u*x-m*g,E=c*f-d*p,_=c*x-m*p,C=d*x-m*f,L=v*C-M*_+w*E+b*P-F*A+y*S;return L?(L=1/L,t[0]=(o*C-h*_+l*E)*L,t[1]=(h*P-a*C-l*A)*L,t[2]=(a*_-o*P+l*S)*L,t[3]=(i*_-s*C-n*E)*L,t[4]=(r*C-i*P+n*A)*L,t[5]=(s*P-r*_-n*S)*L,t[6]=(p*y-f*F+x*b)*L,t[7]=(f*w-g*y-x*M)*L,t[8]=(g*F-p*w+x*v)*L,t):null}function f(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function v(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function M(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}}},(function(t){t.h=()=>"a69c029101e1d4d2e237"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,